{
  "address": "0xdd02f961b49bc9ae75c615822115d43361cbcde0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inControl",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughVotingPower",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract IMyERC20Votes",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "voteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votingPowerSpent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc93f0b9518fc989dd23c18e711fb43d954bb559a36fc8f8d2b02d607a517cd1",
  "receipt": {
    "to": null,
    "from": "0x066e7a421fdd36f2263938ab328d8b2f09d9fce0",
    "contractAddress": "0xdd02f961b49bc9ae75c615822115d43361cbcde0",
    "transactionIndex": "0x45",
    "gasUsed": "0x15c3ba",
    "logsBloom": "0x
    "blockHash": "0xdd588e923b4d0418af9190be973a2389a1f103c24bbd56bd0ffda8b38808dffb",
    "transactionHash": "0x86e50aa4fba831c27953683e5cb5a5648de6c04a1e8d6ff76dbbef50271ffcb4",
    "logs": [],
    "blockNumber": "0x79ff49",
    "cumulativeGasUsed": "0x16f723e",
    "status": "0x1"
  },
  "args": [
    [
      "0x43686f636f6c6174650000000000000000000000000000000000000000000000",
      "0x56616e696c6c6100000000000000000000000000000000000000000000000000",
      "0x4c656d6f6e000000000000000000000000000000000000000000000000000000",
      "0x416c6d6f6e640000000000000000000000000000000000000000000000000000"
    ],
    "0xA1D703118fe5b3C2dC00835d6169e448B7e8183C",
    7994956,
    "TokenizedBallot"
  ],
  "numDeployments": 6,
  "solcInputHash": "58fcdfac26e38974d6ad56a5f7bc2518",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inControl\",\"type\":\"uint256\"}],\"name\":\"NotEnoughVotingPower\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IMyERC20Votes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"voteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingPowerSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenizedBallot.sol\":\"TokenizedBallot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenizedBallot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n// /../../utils/cryptography/ECDSA.sol\\ninterface IMyERC20Votes {\\n    function getPastVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\nerror NotEnoughVotingPower(uint256 required, uint256 inControl);\\n\\ncontract TokenizedBallot is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 private constant _VOTE_TYPEHASH =\\n        keccak256(\\n            \\\"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\\\"\\n        );\\n\\n    struct Proposal {\\n        bytes32 name;\\n        uint256 voteCount;\\n    }\\n    IMyERC20Votes public immutable tokenContract;\\n    uint256 public targetBlockNumber;\\n    Proposal[] public proposals;\\n\\n    mapping(address => uint256) public votingPowerSpent;\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    /* Events */\\n    event Vote(\\n        address indexed voter,\\n        uint256 indexed proposal,\\n        uint256 indexed amount\\n    );\\n\\n    constructor(\\n        bytes32[] memory proposalNames,\\n        address _tokenContractAddress,\\n        uint256 _targetBlockNumber,\\n        string memory name\\n    ) EIP712(name, \\\"1\\\") {\\n        tokenContract = IMyERC20Votes(_tokenContractAddress);\\n        targetBlockNumber = _targetBlockNumber;\\n        for (uint256 i = 0; i < proposalNames.length; i++) {\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    function vote(uint256 proposal, uint256 amount) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n        votingPowerSpent[msg.sender] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(msg.sender, proposal, amount);\\n    }\\n\\n    function voteBySig(\\n        uint256 proposal,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(_VOTE_TYPEHASH, proposal, amount, nonce, expiry)\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"Invalid nonce\\\");\\n        votingPowerSpent[signer] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(signer, proposal, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    function votingPower(address account) public view returns (uint256) {\\n        return\\n            tokenContract.getPastVotes(account, targetBlockNumber) -\\n            votingPowerSpent[account];\\n    }\\n\\n    function winningProposal() public view returns (uint256 winningProposal_) {\\n        uint256 winningVoteCount = 0;\\n        for (uint256 p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner)\\n        internal\\n        virtual\\n        returns (uint256 current)\\n    {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x5c398773c0442b47c169935851122c06d5530d9a94577f3c3c36b79808c35f9e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001d9438038062001d94833981810160405281019062000038919062000584565b806040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000d8818484620001ff60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050508273ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508160008190555060005b8451811015620001f457600160405180604001604052808784815181106200018d576200018c62000634565b5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620001eb9062000692565b91505062000160565b50505050506200076f565b600083838346306040516020016200021c95949392919062000712565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200029f8262000254565b810181811067ffffffffffffffff82111715620002c157620002c062000265565b5b80604052505050565b6000620002d66200023b565b9050620002e4828262000294565b919050565b600067ffffffffffffffff82111562000307576200030662000265565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b62000332816200031d565b81146200033e57600080fd5b50565b600081519050620003528162000327565b92915050565b60006200036f6200036984620002e9565b620002ca565b9050808382526020820190506020840283018581111562000395576200039462000318565b5b835b81811015620003c25780620003ad888262000341565b84526020840193505060208101905062000397565b5050509392505050565b600082601f830112620003e457620003e36200024f565b5b8151620003f684826020860162000358565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042c82620003ff565b9050919050565b6200043e816200041f565b81146200044a57600080fd5b50565b6000815190506200045e8162000433565b92915050565b6000819050919050565b620004798162000464565b81146200048557600080fd5b50565b60008151905062000499816200046e565b92915050565b600080fd5b600067ffffffffffffffff821115620004c257620004c162000265565b5b620004cd8262000254565b9050602081019050919050565b60005b83811015620004fa578082015181840152602081019050620004dd565b60008484015250505050565b60006200051d6200051784620004a4565b620002ca565b9050828152602081018484840111156200053c576200053b6200049f565b5b62000549848285620004da565b509392505050565b600082601f8301126200056957620005686200024f565b5b81516200057b84826020860162000506565b91505092915050565b60008060008060808587031215620005a157620005a062000245565b5b600085015167ffffffffffffffff811115620005c257620005c16200024a565b5b620005d087828801620003cc565b9450506020620005e3878288016200044d565b9350506040620005f68782880162000488565b925050606085015167ffffffffffffffff8111156200061a57620006196200024a565b5b620006288782880162000551565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200069f8262000464565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620006d457620006d362000663565b5b600182019050919050565b620006ea816200031d565b82525050565b620006fb8162000464565b82525050565b6200070c816200041f565b82525050565b600060a082019050620007296000830188620006df565b620007386020830187620006df565b620007476040830186620006df565b620007566060830185620006f0565b62000765608083018462000701565b9695505050505050565b60805160a05160c05160e0516101005161012051610140516115c3620007d16000396000818161047901526106ff0152600061093f015260006109810152600061096001526000610895015260006108eb0152600061091401526115c36000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe001461014a578063a72003511461017a578063b384abef146101aa578063c07473f6146101c6578063e2ba53f0146101f65761009e565b8063013cf08b146100a357806304f81b35146100d45780632a8cd29e146100f057806355a373d61461010e578063609ff1bd1461012c575b600080fd5b6100bd60048036038101906100b89190610cb1565b610214565b6040516100cb929190610d06565b60405180910390f35b6100ee60048036038101906100e99190610d94565b610248565b005b6100f8610471565b6040516101059190610e36565b60405180910390f35b610116610477565b6040516101239190610ed0565b60405180910390f35b61013461049b565b6040516101419190610e36565b60405180910390f35b610164600480360381019061015f9190610f29565b610523565b6040516101719190610e36565b60405180910390f35b610194600480360381019061018f9190610f29565b610573565b6040516101a19190610e36565b60405180910390f35b6101c460048036038101906101bf9190610f56565b61058b565b005b6101e060048036038101906101db9190610f29565b6106bb565b6040516101ed9190610e36565b60405180910390f35b6101fe6107ac565b60405161020b9190610f96565b60405180910390f35b6001818154811061022457600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b6000610253336106bb565b90508681101561029c5786816040517f29eed8ef000000000000000000000000000000000000000000000000000000008152600401610293929190610fb1565b60405180910390fd5b844211156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690611037565b60405180910390fd5b600061034361033b7f28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa05328b8b8b8b604051602001610320959493929190611057565b604051602081830303815290604052805190602001206107e0565b8686866107fa565b905061034e81610825565b871461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906110f6565b60405180910390fd5b87600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103de9190611145565b925050819055508760018a815481106103fa576103f9611179565b5b9060005260206000209060020201600101600082825461041a9190611145565b9250508190555087898273ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050505050505050565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000905060005b60018054905081101561051e5781600182815481106104c7576104c6611179565b5b906000526020600020906002020160010154111561050b57600181815481106104f3576104f2611179565b5b90600052602060002090600202016001015491508092505b8080610516906111a8565b9150506104a5565b505090565b600061056c600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610883565b9050919050565b60026020528060005260406000206000915090505481565b6000610596336106bb565b9050818110156105df5781816040517f29eed8ef0000000000000000000000000000000000000000000000000000000081526004016105d6929190610fb1565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062e9190611145565b92505081905550816001848154811061064a57610649611179565b5b9060005260206000209060020201600101600082825461066a9190611145565b9250508190555081833373ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b815260040161075a9291906111ff565b602060405180830381865afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b919061123d565b6107a5919061126a565b9050919050565b600060016107b861049b565b815481106107c9576107c8611179565b5b906000526020600020906002020160000154905090565b60006107f36107ed610891565b836109ab565b9050919050565b600080600061080b878787876109de565b9150915061081881610ac0565b8192505050949350505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061087281610883565b915061087d81610c26565b50919050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561090d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561093a577f000000000000000000000000000000000000000000000000000000000000000090506109a8565b6109a57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c3c565b90505b90565b600082826040516020016109c0929190611316565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a19576000600391509150610ab7565b600060018787878760405160008152602001604052604051610a3e949392919061135c565b6020604051602081039080840390855afa158015610a60573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57600060019250925050610ab7565b80600092509250505b94509492505050565b60006004811115610ad457610ad36113a1565b5b816004811115610ae757610ae66113a1565b5b0315610c235760016004811115610b0157610b006113a1565b5b816004811115610b1457610b136113a1565b5b03610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b9061141c565b60405180910390fd5b60026004811115610b6857610b676113a1565b5b816004811115610b7b57610b7a6113a1565b5b03610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611488565b60405180910390fd5b60036004811115610bcf57610bce6113a1565b5b816004811115610be257610be16113a1565b5b03610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c199061151a565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b60008383834630604051602001610c5795949392919061153a565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b6000819050919050565b610c8e81610c7b565b8114610c9957600080fd5b50565b600081359050610cab81610c85565b92915050565b600060208284031215610cc757610cc6610c76565b5b6000610cd584828501610c9c565b91505092915050565b6000819050919050565b610cf181610cde565b82525050565b610d0081610c7b565b82525050565b6000604082019050610d1b6000830185610ce8565b610d286020830184610cf7565b9392505050565b600060ff82169050919050565b610d4581610d2f565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b610d7181610cde565b8114610d7c57600080fd5b50565b600081359050610d8e81610d68565b92915050565b600080600080600080600060e0888a031215610db357610db2610c76565b5b6000610dc18a828b01610c9c565b9750506020610dd28a828b01610c9c565b9650506040610de38a828b01610c9c565b9550506060610df48a828b01610c9c565b9450506080610e058a828b01610d53565b93505060a0610e168a828b01610d7f565b92505060c0610e278a828b01610d7f565b91505092959891949750929550565b6000602082019050610e4b6000830184610cf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e96610e91610e8c84610e51565b610e71565b610e51565b9050919050565b6000610ea882610e7b565b9050919050565b6000610eba82610e9d565b9050919050565b610eca81610eaf565b82525050565b6000602082019050610ee56000830184610ec1565b92915050565b6000610ef682610e51565b9050919050565b610f0681610eeb565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610c76565b5b6000610f4d84828501610f14565b91505092915050565b60008060408385031215610f6d57610f6c610c76565b5b6000610f7b85828601610c9c565b9250506020610f8c85828601610c9c565b9150509250929050565b6000602082019050610fab6000830184610ce8565b92915050565b6000604082019050610fc66000830185610cf7565b610fd36020830184610cf7565b9392505050565b600082825260208201905092915050565b7f5369676e61747572652065787069726564000000000000000000000000000000600082015250565b6000611021601183610fda565b915061102c82610feb565b602082019050919050565b6000602082019050818103600083015261105081611014565b9050919050565b600060a08201905061106c6000830188610ce8565b6110796020830187610cf7565b6110866040830186610cf7565b6110936060830185610cf7565b6110a06080830184610cf7565b9695505050505050565b7f496e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b60006110e0600d83610fda565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115082610c7b565b915061115b83610c7b565b925082820190508082111561117357611172611116565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111b382610c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e5576111e4611116565b5b600182019050919050565b6111f981610eeb565b82525050565b600060408201905061121460008301856111f0565b6112216020830184610cf7565b9392505050565b60008151905061123781610c85565b92915050565b60006020828403121561125357611252610c76565b5b600061126184828501611228565b91505092915050565b600061127582610c7b565b915061128083610c7b565b925082820390508181111561129857611297611116565b5b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006112df60028361129e565b91506112ea826112a9565b600282019050919050565b6000819050919050565b61131061130b82610cde565b6112f5565b82525050565b6000611321826112d2565b915061132d82856112ff565b60208201915061133d82846112ff565b6020820191508190509392505050565b61135681610d2f565b82525050565b60006080820190506113716000830187610ce8565b61137e602083018661134d565b61138b6040830185610ce8565b6113986060830184610ce8565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611406601883610fda565b9150611411826113d0565b602082019050919050565b60006020820190508181036000830152611435816113f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611472601f83610fda565b915061147d8261143c565b602082019050919050565b600060208201905081810360008301526114a181611465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611504602283610fda565b915061150f826114a8565b604082019050919050565b60006020820190508181036000830152611533816114f7565b9050919050565b600060a08201905061154f6000830188610ce8565b61155c6020830187610ce8565b6115696040830186610ce8565b6115766060830185610cf7565b61158360808301846111f0565b969550505050505056fea264697066735822122030f2cbe1efae6b39ae59600f8a9f2112e34872f960168b270578c4887779042864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe001461014a578063a72003511461017a578063b384abef146101aa578063c07473f6146101c6578063e2ba53f0146101f65761009e565b8063013cf08b146100a357806304f81b35146100d45780632a8cd29e146100f057806355a373d61461010e578063609ff1bd1461012c575b600080fd5b6100bd60048036038101906100b89190610cb1565b610214565b6040516100cb929190610d06565b60405180910390f35b6100ee60048036038101906100e99190610d94565b610248565b005b6100f8610471565b6040516101059190610e36565b60405180910390f35b610116610477565b6040516101239190610ed0565b60405180910390f35b61013461049b565b6040516101419190610e36565b60405180910390f35b610164600480360381019061015f9190610f29565b610523565b6040516101719190610e36565b60405180910390f35b610194600480360381019061018f9190610f29565b610573565b6040516101a19190610e36565b60405180910390f35b6101c460048036038101906101bf9190610f56565b61058b565b005b6101e060048036038101906101db9190610f29565b6106bb565b6040516101ed9190610e36565b60405180910390f35b6101fe6107ac565b60405161020b9190610f96565b60405180910390f35b6001818154811061022457600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b6000610253336106bb565b90508681101561029c5786816040517f29eed8ef000000000000000000000000000000000000000000000000000000008152600401610293929190610fb1565b60405180910390fd5b844211156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690611037565b60405180910390fd5b600061034361033b7f28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa05328b8b8b8b604051602001610320959493929190611057565b604051602081830303815290604052805190602001206107e0565b8686866107fa565b905061034e81610825565b871461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906110f6565b60405180910390fd5b87600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103de9190611145565b925050819055508760018a815481106103fa576103f9611179565b5b9060005260206000209060020201600101600082825461041a9190611145565b9250508190555087898273ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050505050505050565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000905060005b60018054905081101561051e5781600182815481106104c7576104c6611179565b5b906000526020600020906002020160010154111561050b57600181815481106104f3576104f2611179565b5b90600052602060002090600202016001015491508092505b8080610516906111a8565b9150506104a5565b505090565b600061056c600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610883565b9050919050565b60026020528060005260406000206000915090505481565b6000610596336106bb565b9050818110156105df5781816040517f29eed8ef0000000000000000000000000000000000000000000000000000000081526004016105d6929190610fb1565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062e9190611145565b92505081905550816001848154811061064a57610649611179565b5b9060005260206000209060020201600101600082825461066a9190611145565b9250508190555081833373ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b815260040161075a9291906111ff565b602060405180830381865afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b919061123d565b6107a5919061126a565b9050919050565b600060016107b861049b565b815481106107c9576107c8611179565b5b906000526020600020906002020160000154905090565b60006107f36107ed610891565b836109ab565b9050919050565b600080600061080b878787876109de565b9150915061081881610ac0565b8192505050949350505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061087281610883565b915061087d81610c26565b50919050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561090d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561093a577f000000000000000000000000000000000000000000000000000000000000000090506109a8565b6109a57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c3c565b90505b90565b600082826040516020016109c0929190611316565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a19576000600391509150610ab7565b600060018787878760405160008152602001604052604051610a3e949392919061135c565b6020604051602081039080840390855afa158015610a60573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57600060019250925050610ab7565b80600092509250505b94509492505050565b60006004811115610ad457610ad36113a1565b5b816004811115610ae757610ae66113a1565b5b0315610c235760016004811115610b0157610b006113a1565b5b816004811115610b1457610b136113a1565b5b03610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b9061141c565b60405180910390fd5b60026004811115610b6857610b676113a1565b5b816004811115610b7b57610b7a6113a1565b5b03610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611488565b60405180910390fd5b60036004811115610bcf57610bce6113a1565b5b816004811115610be257610be16113a1565b5b03610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c199061151a565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b60008383834630604051602001610c5795949392919061153a565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b6000819050919050565b610c8e81610c7b565b8114610c9957600080fd5b50565b600081359050610cab81610c85565b92915050565b600060208284031215610cc757610cc6610c76565b5b6000610cd584828501610c9c565b91505092915050565b6000819050919050565b610cf181610cde565b82525050565b610d0081610c7b565b82525050565b6000604082019050610d1b6000830185610ce8565b610d286020830184610cf7565b9392505050565b600060ff82169050919050565b610d4581610d2f565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b610d7181610cde565b8114610d7c57600080fd5b50565b600081359050610d8e81610d68565b92915050565b600080600080600080600060e0888a031215610db357610db2610c76565b5b6000610dc18a828b01610c9c565b9750506020610dd28a828b01610c9c565b9650506040610de38a828b01610c9c565b9550506060610df48a828b01610c9c565b9450506080610e058a828b01610d53565b93505060a0610e168a828b01610d7f565b92505060c0610e278a828b01610d7f565b91505092959891949750929550565b6000602082019050610e4b6000830184610cf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e96610e91610e8c84610e51565b610e71565b610e51565b9050919050565b6000610ea882610e7b565b9050919050565b6000610eba82610e9d565b9050919050565b610eca81610eaf565b82525050565b6000602082019050610ee56000830184610ec1565b92915050565b6000610ef682610e51565b9050919050565b610f0681610eeb565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610c76565b5b6000610f4d84828501610f14565b91505092915050565b60008060408385031215610f6d57610f6c610c76565b5b6000610f7b85828601610c9c565b9250506020610f8c85828601610c9c565b9150509250929050565b6000602082019050610fab6000830184610ce8565b92915050565b6000604082019050610fc66000830185610cf7565b610fd36020830184610cf7565b9392505050565b600082825260208201905092915050565b7f5369676e61747572652065787069726564000000000000000000000000000000600082015250565b6000611021601183610fda565b915061102c82610feb565b602082019050919050565b6000602082019050818103600083015261105081611014565b9050919050565b600060a08201905061106c6000830188610ce8565b6110796020830187610cf7565b6110866040830186610cf7565b6110936060830185610cf7565b6110a06080830184610cf7565b9695505050505050565b7f496e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b60006110e0600d83610fda565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115082610c7b565b915061115b83610c7b565b925082820190508082111561117357611172611116565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111b382610c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e5576111e4611116565b5b600182019050919050565b6111f981610eeb565b82525050565b600060408201905061121460008301856111f0565b6112216020830184610cf7565b9392505050565b60008151905061123781610c85565b92915050565b60006020828403121561125357611252610c76565b5b600061126184828501611228565b91505092915050565b600061127582610c7b565b915061128083610c7b565b925082820390508181111561129857611297611116565b5b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006112df60028361129e565b91506112ea826112a9565b600282019050919050565b6000819050919050565b61131061130b82610cde565b6112f5565b82525050565b6000611321826112d2565b915061132d82856112ff565b60208201915061133d82846112ff565b6020820191508190509392505050565b61135681610d2f565b82525050565b60006080820190506113716000830187610ce8565b61137e602083018661134d565b61138b6040830185610ce8565b6113986060830184610ce8565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611406601883610fda565b9150611411826113d0565b602082019050919050565b60006020820190508181036000830152611435816113f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611472601f83610fda565b915061147d8261143c565b602082019050919050565b600060208201905081810360008301526114a181611465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611504602283610fda565b915061150f826114a8565b604082019050919050565b60006020820190508181036000830152611533816114f7565b9050919050565b600060a08201905061154f6000830188610ce8565b61155c6020830187610ce8565b6115696040830186610ce8565b6115766060830185610cf7565b61158360808301846111f0565b969550505050505056fea264697066735822122030f2cbe1efae6b39ae59600f8a9f2112e34872f960168b270578c4887779042864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1669,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "targetBlockNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1673,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Proposal)1664_storage)dyn_storage"
      },
      {
        "astId": 1677,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "votingPowerSpent",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1682,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Counter)5_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)1664_storage)dyn_storage": {
        "base": "t_struct(Proposal)1664_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenizedBallot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Counter)5_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)5_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)1664_storage": {
        "encoding": "inplace",
        "label": "struct TokenizedBallot.Proposal",
        "members": [
          {
            "astId": 1661,
            "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1663,
            "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}