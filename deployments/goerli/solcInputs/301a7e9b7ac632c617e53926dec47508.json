{
  "language": "Solidity",
  "sources": {
    "contracts/TokenizedBallot.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IMyERC20Votes {\n    function getPastVotes(address account, uint256 blockNumber)\n        external\n        view\n        returns (uint256);\n}\n\nerror NotEnoughVotingPower(uint256 required, uint256 inControl);\n\ncontract TokenizedBallot {\n    struct Proposal {\n        bytes32 name;\n        uint256 voteCount;\n    }\n    IMyERC20Votes public immutable tokenContract;\n    uint256 public targetBlockNumber;\n    Proposal[] public proposals;\n\n    mapping(address => uint256) public votingPowerSpent;\n\n    constructor(\n        bytes32[] memory proposalNames,\n        address _tokenContractAddress,\n        uint256 _targetBlockNumber\n    ) {\n        tokenContract = IMyERC20Votes(_tokenContractAddress);\n        targetBlockNumber = _targetBlockNumber;\n        for (uint256 i = 0; i < proposalNames.length; i++) {\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\n        }\n    }\n\n    function vote(uint256 proposal, uint256 amount) external {\n        uint256 _votingPower = votingPower(msg.sender);\n        if (_votingPower < amount)\n            revert NotEnoughVotingPower(amount, _votingPower);\n        votingPowerSpent[msg.sender] += amount;\n        proposals[proposal].voteCount += amount;\n    }\n\n    function votingPower(address account) public view returns (uint256) {\n        return\n            tokenContract.getPastVotes(account, targetBlockNumber) -\n            votingPowerSpent[account];\n    }\n\n    function winningProposal() public view returns (uint256 winningProposal_) {\n        uint256 winningVoteCount = 0;\n        for (uint256 p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    function winnerName() external view returns (bytes32 winnerName_) {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}