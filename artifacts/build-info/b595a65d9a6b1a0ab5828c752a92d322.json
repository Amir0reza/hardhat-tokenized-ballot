{"id":"b595a65d9a6b1a0ab5828c752a92d322","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/TokenizedBallot.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ninterface IMyERC20Votes {\n    function getPastVotes(\n        address account,\n        uint256 blockNumber\n    ) external view returns (uint256);\n}\n\nerror NotEnoughVotingPower(uint256 required, uint256 inControl);\n\ncontract TokenizedBallot is EIP712 {\n    using Counters for Counters.Counter;\n\n    bytes32 private constant _VOTE_TYPEHASH =\n        keccak256(\n            \"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\"\n        );\n\n    struct Proposal {\n        bytes32 name;\n        uint256 voteCount;\n    }\n    IMyERC20Votes public immutable tokenContract;\n    uint256 public targetBlockNumber;\n    Proposal[] public proposals;\n\n    mapping(address => uint256) public votingPowerSpent;\n    mapping(address => Counters.Counter) private _nonces;\n\n    /* Events */\n    event Vote(\n        address indexed voter,\n        uint256 indexed proposal,\n        uint256 indexed amount\n    );\n\n    constructor(\n        bytes32[] memory proposalNames,\n        address _tokenContractAddress,\n        uint256 _targetBlockNumber,\n        string memory name\n    ) EIP712(name, \"1\") {\n        tokenContract = IMyERC20Votes(_tokenContractAddress);\n        targetBlockNumber = _targetBlockNumber;\n        for (uint256 i = 0; i < proposalNames.length; i++) {\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\n        }\n    }\n\n    function vote(uint256 proposal, uint256 amount) external {\n        uint256 _votingPower = votingPower(msg.sender);\n        if (_votingPower < amount)\n            revert NotEnoughVotingPower(amount, _votingPower);\n        votingPowerSpent[msg.sender] += amount;\n        proposals[proposal].voteCount += amount;\n        emit Vote(msg.sender, proposal, amount);\n    }\n\n    function voteBySig(\n        uint256 proposal,\n        uint256 amount,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        uint256 _votingPower = votingPower(msg.sender);\n        if (_votingPower < amount)\n            revert NotEnoughVotingPower(amount, _votingPower);\n\n        require(block.timestamp <= expiry, \"Signature expired\");\n\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(_VOTE_TYPEHASH, proposal, amount, nonce, expiry)\n                )\n            ),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"Invalid nonce\");\n        votingPowerSpent[signer] += amount;\n        proposals[proposal].voteCount += amount;\n        emit Vote(signer, proposal, amount);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    function votingPower(address account) public view returns (uint256) {\n        return\n            tokenContract.getPastVotes(account, targetBlockNumber) -\n            votingPowerSpent[account];\n    }\n\n    function winningProposal() public view returns (uint256 winningProposal_) {\n        uint256 winningVoteCount = 0;\n        for (uint256 p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    function winnerName() external view returns (bytes32 winnerName_) {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(\n        address owner\n    ) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[73]},"id":74,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"112:311:0","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":73,"linearizedBaseContracts":[73],"name":"Counters","nameLocation":"432:8:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":5,"members":[{"constant":false,"id":4,"mutability":"mutable","name":"_value","nameLocation":"794:6:0","nodeType":"VariableDeclaration","scope":5,"src":"786:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:0","nodeType":"StructDefinition","scope":73,"src":"447:374:0","visibility":"public"},{"body":{"id":16,"nodeType":"Block","src":"901:38:0","statements":[{"expression":{"expression":{"id":13,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"918:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":14,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:0","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":4,"src":"918:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":12,"id":15,"nodeType":"Return","src":"911:21:0"}]},"id":17,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:0","nodeType":"FunctionDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"counter","nameLocation":"860:7:0","nodeType":"VariableDeclaration","scope":17,"src":"844:23:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":7,"nodeType":"UserDefinedTypeName","pathNode":{"id":6,"name":"Counter","nameLocations":["844:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"844:7:0"},"referencedDeclaration":5,"src":"844:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17,"src":"892:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:0"},"scope":73,"src":"827:112:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"998:70:0","statements":[{"id":29,"nodeType":"UncheckedBlock","src":"1008:54:0","statements":[{"expression":{"id":27,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":23,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"1032:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":25,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:0","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1032:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":26,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":28,"nodeType":"ExpressionStatement","src":"1032:19:0"}]}]},"id":31,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:0","nodeType":"FunctionDefinition","parameters":{"id":21,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"counter","nameLocation":"980:7:0","nodeType":"VariableDeclaration","scope":31,"src":"964:23:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":19,"nodeType":"UserDefinedTypeName","pathNode":{"id":18,"name":"Counter","nameLocations":["964:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"964:7:0"},"referencedDeclaration":5,"src":"964:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":73,"src":"945:123:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":58,"nodeType":"Block","src":"1127:176:0","statements":[{"assignments":[38],"declarations":[{"constant":false,"id":38,"mutability":"mutable","name":"value","nameLocation":"1145:5:0","nodeType":"VariableDeclaration","scope":58,"src":"1137:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":41,"initialValue":{"expression":{"id":39,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"1153:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":40,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:0","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1153:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1185:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":44,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":46,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":42,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1177:49:0"},{"id":57,"nodeType":"UncheckedBlock","src":"1236:61:0","statements":[{"expression":{"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":49,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"1260:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:0","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1260:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":52,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1277:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":56,"nodeType":"ExpressionStatement","src":"1260:26:0"}]}]},"id":59,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:0","nodeType":"FunctionDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"counter","nameLocation":"1109:7:0","nodeType":"VariableDeclaration","scope":59,"src":"1093:23:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":33,"nodeType":"UserDefinedTypeName","pathNode":{"id":32,"name":"Counter","nameLocations":["1093:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"1093:7:0"},"referencedDeclaration":5,"src":"1093:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[],"src":"1127:0:0"},"scope":73,"src":"1074:229:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":71,"nodeType":"Block","src":"1358:35:0","statements":[{"expression":{"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":65,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"1368:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":67,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:0","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1368:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":68,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":70,"nodeType":"ExpressionStatement","src":"1368:18:0"}]},"id":72,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:0","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"counter","nameLocation":"1340:7:0","nodeType":"VariableDeclaration","scope":72,"src":"1324:23:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":61,"nodeType":"UserDefinedTypeName","pathNode":{"id":60,"name":"Counter","nameLocations":["1324:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"1324:7:0"},"referencedDeclaration":5,"src":"1324:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:0"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[],"src":"1358:0:0"},"scope":73,"src":"1309:84:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":74,"src":"424:971:0","usedErrors":[]}],"src":"87:1309:0"},"id":0},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1628],"Strings":[248]},"id":249,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":75,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":76,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":249,"sourceUnit":1629,"src":"126:25:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"153:34:1","text":" @dev String operations."},"fullyImplemented":true,"id":248,"linearizedBaseContracts":[248],"name":"Strings","nameLocation":"196:7:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":80,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:1","nodeType":"VariableDeclaration","scope":248,"src":"210:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":78,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":83,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:1","nodeType":"VariableDeclaration","scope":248,"src":"270:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":81,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":82,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:1","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":130,"nodeType":"Block","src":"486:625:1","statements":[{"id":129,"nodeType":"UncheckedBlock","src":"496:609:1","statements":[{"assignments":[92],"declarations":[{"constant":false,"id":92,"mutability":"mutable","name":"length","nameLocation":"528:6:1","nodeType":"VariableDeclaration","scope":129,"src":"520:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":91,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":99,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":95,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"548:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":93,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"537:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1628_$","typeString":"type(library Math)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:1","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1465,"src":"537:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:1"},{"assignments":[101],"declarations":[{"constant":false,"id":101,"mutability":"mutable","name":"buffer","nameLocation":"586:6:1","nodeType":"VariableDeclaration","scope":129,"src":"572:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":100,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":106,"initialValue":{"arguments":[{"id":104,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"606:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":102,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:1"},{"assignments":[108],"declarations":[{"constant":false,"id":108,"mutability":"mutable","name":"ptr","nameLocation":"635:3:1","nodeType":"VariableDeclaration","scope":129,"src":"627:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":109,"nodeType":"VariableDeclarationStatement","src":"627:11:1"},{"AST":{"nodeType":"YulBlock","src":"708:67:1","statements":[{"nodeType":"YulAssignment","src":"726:35:1","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:1","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:1"},"nodeType":"YulFunctionCall","src":"745:15:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:1"},"nodeType":"YulFunctionCall","src":"733:28:1"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":101,"isOffset":false,"isSlot":false,"src":"737:6:1","valueSize":1},{"declaration":92,"isOffset":false,"isSlot":false,"src":"753:6:1","valueSize":1},{"declaration":108,"isOffset":false,"isSlot":false,"src":"726:3:1","valueSize":1}],"id":110,"nodeType":"InlineAssembly","src":"699:76:1"},{"body":{"id":125,"nodeType":"Block","src":"801:267:1","statements":[{"expression":{"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:1","subExpression":{"id":112,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"819:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":114,"nodeType":"ExpressionStatement","src":"819:5:1"},{"AST":{"nodeType":"YulBlock","src":"902:84:1","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:1"},"nodeType":"YulFunctionCall","src":"942:14:1"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:1"},"nodeType":"YulFunctionCall","src":"937:30:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:1"},"nodeType":"YulFunctionCall","src":"924:44:1"},"nodeType":"YulExpressionStatement","src":"924:44:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":80,"isOffset":false,"isSlot":false,"src":"958:8:1","valueSize":1},{"declaration":108,"isOffset":false,"isSlot":false,"src":"932:3:1","valueSize":1},{"declaration":86,"isOffset":false,"isSlot":false,"src":"946:5:1","valueSize":1}],"id":115,"nodeType":"InlineAssembly","src":"893:93:1"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"1003:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:1","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"1003:11:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"1036:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":124,"nodeType":"IfStatement","src":"1032:21:1","trueBody":{"id":123,"nodeType":"Break","src":"1048:5:1"}}]},"condition":{"hexValue":"74727565","id":111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":126,"nodeType":"WhileStatement","src":"788:280:1"},{"expression":{"id":127,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"1088:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":90,"id":128,"nodeType":"Return","src":"1081:13:1"}]}]},"documentation":{"id":84,"nodeType":"StructuredDocumentation","src":"320:90:1","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":131,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:1","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"value","nameLocation":"441:5:1","nodeType":"VariableDeclaration","scope":131,"src":"433:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":85,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:1"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":131,"src":"471:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":88,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:1"},"scope":248,"src":"415:696:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":150,"nodeType":"Block","src":"1290:100:1","statements":[{"id":149,"nodeType":"UncheckedBlock","src":"1300:84:1","statements":[{"expression":{"arguments":[{"id":140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"1343:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"1362:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":141,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"1350:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1628_$","typeString":"type(library Math)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:1","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1588,"src":"1350:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":139,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[151,227,247],"referencedDeclaration":227,"src":"1331:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":138,"id":148,"nodeType":"Return","src":"1324:49:1"}]}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"1117:94:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":151,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"value","nameLocation":"1245:5:1","nodeType":"VariableDeclaration","scope":151,"src":"1237:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:1"},"returnParameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":151,"src":"1275:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":136,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:1"},"scope":248,"src":"1216:174:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1603:347:1","statements":[{"assignments":[162],"declarations":[{"constant":false,"id":162,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:1","nodeType":"VariableDeclaration","scope":226,"src":"1613:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":171,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":166,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1649:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":163,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:1"},{"expression":{"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":172,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1670:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":174,"indexExpression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":177,"nodeType":"ExpressionStatement","src":"1670:15:1"},{"expression":{"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":178,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1695:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":180,"indexExpression":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":183,"nodeType":"ExpressionStatement","src":"1695:15:1"},{"body":{"id":212,"nodeType":"Block","src":"1765:83:1","statements":[{"expression":{"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":198,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1779:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":200,"indexExpression":{"id":199,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1786:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":201,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1791:8:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":205,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"1800:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:1","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":207,"nodeType":"ExpressionStatement","src":"1779:33:1"},{"expression":{"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"1826:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":211,"nodeType":"ExpressionStatement","src":"1826:11:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1753:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"initializationExpression":{"assignments":[185],"declarations":[{"constant":false,"id":185,"mutability":"mutable","name":"i","nameLocation":"1733:1:1","nodeType":"VariableDeclaration","scope":213,"src":"1725:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":191,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":187,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1741:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:1"},"loopExpression":{"expression":{"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:1","subExpression":{"id":195,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1762:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":197,"nodeType":"ExpressionStatement","src":"1760:3:1"},"nodeType":"ForStatement","src":"1720:128:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"1865:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":220,"nodeType":"ExpressionStatement","src":"1857:55:1"},{"expression":{"arguments":[{"id":223,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1936:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":221,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:1","typeDescriptions":{}}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":160,"id":225,"nodeType":"Return","src":"1922:21:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"1396:112:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"value","nameLocation":"1542:5:1","nodeType":"VariableDeclaration","scope":227,"src":"1534:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"length","nameLocation":"1557:6:1","nodeType":"VariableDeclaration","scope":227,"src":"1549:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:1"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"1588:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":158,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:1"},"scope":248,"src":"1513:437:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":246,"nodeType":"Block","src":"2175:76:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":240,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"2220:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":238,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:1","typeDescriptions":{}}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:1","typeDescriptions":{}}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":243,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2228:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":235,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[151,227,247],"referencedDeclaration":227,"src":"2192:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":234,"id":245,"nodeType":"Return","src":"2185:59:1"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1956:141:1","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":247,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:1","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"addr","nameLocation":"2131:4:1","nodeType":"VariableDeclaration","scope":247,"src":"2123:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:1"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"2160:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":232,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:1"},"scope":248,"src":"2102:149:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":249,"src":"188:2065:1","usedErrors":[]}],"src":"101:2153:1"},"id":1},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[609],"Math":[1628],"Strings":[248]},"id":610,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":250,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":610,"sourceUnit":249,"src":"137:24:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"163:205:2","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":609,"linearizedBaseContracts":[609],"name":"ECDSA","nameLocation":"377:5:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":258,"members":[{"id":253,"name":"NoError","nameLocation":"417:7:2","nodeType":"EnumValue","src":"417:7:2"},{"id":254,"name":"InvalidSignature","nameLocation":"434:16:2","nodeType":"EnumValue","src":"434:16:2"},{"id":255,"name":"InvalidSignatureLength","nameLocation":"460:22:2","nodeType":"EnumValue","src":"460:22:2"},{"id":256,"name":"InvalidSignatureS","nameLocation":"492:17:2","nodeType":"EnumValue","src":"492:17:2"},{"id":257,"name":"InvalidSignatureV","nameLocation":"519:17:2","nodeType":"EnumValue","src":"519:17:2"}],"name":"RecoverError","nameLocation":"394:12:2","nodeType":"EnumDefinition","src":"389:175:2"},{"body":{"id":301,"nodeType":"Block","src":"624:457:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":264,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"638:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":265,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"647:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:2","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":253,"src":"647:20:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":270,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"734:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":271,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"743:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:2","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":254,"src":"743:29:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":279,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"843:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":280,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"852:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:2","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":255,"src":"852:35:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":288,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"965:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":289,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"974:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:2","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":256,"src":"974:30:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":297,"nodeType":"IfStatement","src":"961:114:2","trueBody":{"id":296,"nodeType":"Block","src":"1006:69:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":292,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"ExpressionStatement","src":"1020:44:2"}]}},"id":298,"nodeType":"IfStatement","src":"839:236:2","trueBody":{"id":287,"nodeType":"Block","src":"889:66:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":283,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":286,"nodeType":"ExpressionStatement","src":"903:41:2"}]}},"id":299,"nodeType":"IfStatement","src":"730:345:2","trueBody":{"id":278,"nodeType":"Block","src":"774:59:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":274,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"ExpressionStatement","src":"788:34:2"}]}},"id":300,"nodeType":"IfStatement","src":"634:441:2","trueBody":{"id":269,"nodeType":"Block","src":"669:55:2","statements":[{"functionReturnParameters":263,"id":268,"nodeType":"Return","src":"683:7:2"}]}}]},"id":302,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:2","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"error","nameLocation":"604:5:2","nodeType":"VariableDeclaration","scope":302,"src":"591:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":260,"nodeType":"UserDefinedTypeName","pathNode":{"id":259,"name":"RecoverError","nameLocations":["591:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"591:12:2"},"referencedDeclaration":258,"src":"591:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:2"},"returnParameters":{"id":263,"nodeType":"ParameterList","parameters":[],"src":"624:0:2"},"scope":609,"src":"570:511:2","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":347,"nodeType":"Block","src":"2249:626:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":315,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2263:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:2","memberName":"length","nodeType":"MemberAccess","src":"2263:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:2","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":345,"nodeType":"Block","src":"2788:81:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:2","typeDescriptions":{}}},"id":340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":341,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2822:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:2","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":255,"src":"2822:35:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"id":343,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":314,"id":344,"nodeType":"Return","src":"2802:56:2"}]},"id":346,"nodeType":"IfStatement","src":"2259:610:2","trueBody":{"id":336,"nodeType":"Block","src":"2287:495:2","statements":[{"assignments":[320],"declarations":[{"constant":false,"id":320,"mutability":"mutable","name":"r","nameLocation":"2309:1:2","nodeType":"VariableDeclaration","scope":336,"src":"2301:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":321,"nodeType":"VariableDeclarationStatement","src":"2301:9:2"},{"assignments":[323],"declarations":[{"constant":false,"id":323,"mutability":"mutable","name":"s","nameLocation":"2332:1:2","nodeType":"VariableDeclaration","scope":336,"src":"2324:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":324,"nodeType":"VariableDeclarationStatement","src":"2324:9:2"},{"assignments":[326],"declarations":[{"constant":false,"id":326,"mutability":"mutable","name":"v","nameLocation":"2353:1:2","nodeType":"VariableDeclaration","scope":336,"src":"2347:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":325,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":327,"nodeType":"VariableDeclarationStatement","src":"2347:7:2"},{"AST":{"nodeType":"YulBlock","src":"2555:171:2","statements":[{"nodeType":"YulAssignment","src":"2573:32:2","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:2"},"nodeType":"YulFunctionCall","src":"2584:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:2"},"nodeType":"YulFunctionCall","src":"2578:27:2"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:2"}]},{"nodeType":"YulAssignment","src":"2622:32:2","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:2","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:2"},"nodeType":"YulFunctionCall","src":"2633:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:2"},"nodeType":"YulFunctionCall","src":"2627:27:2"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:2"}]},{"nodeType":"YulAssignment","src":"2671:41:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:2","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:2","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:2"},"nodeType":"YulFunctionCall","src":"2690:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:2"},"nodeType":"YulFunctionCall","src":"2684:27:2"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:2"},"nodeType":"YulFunctionCall","src":"2676:36:2"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":320,"isOffset":false,"isSlot":false,"src":"2573:1:2","valueSize":1},{"declaration":323,"isOffset":false,"isSlot":false,"src":"2622:1:2","valueSize":1},{"declaration":307,"isOffset":false,"isSlot":false,"src":"2588:9:2","valueSize":1},{"declaration":307,"isOffset":false,"isSlot":false,"src":"2637:9:2","valueSize":1},{"declaration":307,"isOffset":false,"isSlot":false,"src":"2694:9:2","valueSize":1},{"declaration":326,"isOffset":false,"isSlot":false,"src":"2671:1:2","valueSize":1}],"id":328,"nodeType":"InlineAssembly","src":"2546:180:2"},{"expression":{"arguments":[{"id":330,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"2757:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":331,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2763:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":332,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"2766:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":333,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"2769:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":329,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[348,422,516],"referencedDeclaration":516,"src":"2746:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":314,"id":335,"nodeType":"Return","src":"2739:32:2"}]}}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"1087:1053:2","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":348,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:2","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"hash","nameLocation":"2173:4:2","nodeType":"VariableDeclaration","scope":348,"src":"2165:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"signature","nameLocation":"2192:9:2","nodeType":"VariableDeclaration","scope":348,"src":"2179:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":306,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:2"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":348,"src":"2226:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":348,"src":"2235:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":312,"nodeType":"UserDefinedTypeName","pathNode":{"id":311,"name":"RecoverError","nameLocations":["2235:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"2235:12:2"},"referencedDeclaration":258,"src":"2235:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:2"},"scope":609,"src":"2145:730:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":374,"nodeType":"Block","src":"3748:140:2","statements":[{"assignments":[359,362],"declarations":[{"constant":false,"id":359,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:2","nodeType":"VariableDeclaration","scope":374,"src":"3759:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"error","nameLocation":"3791:5:2","nodeType":"VariableDeclaration","scope":374,"src":"3778:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":361,"nodeType":"UserDefinedTypeName","pathNode":{"id":360,"name":"RecoverError","nameLocations":["3778:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"3778:12:2"},"referencedDeclaration":258,"src":"3778:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":367,"initialValue":{"arguments":[{"id":364,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"3811:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":365,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"3817:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":363,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[348,422,516],"referencedDeclaration":348,"src":"3800:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:2"},{"expression":{"arguments":[{"id":369,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3849:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}],"id":368,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"3837:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$258_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":371,"nodeType":"ExpressionStatement","src":"3837:18:2"},{"expression":{"id":372,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"3872:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":357,"id":373,"nodeType":"Return","src":"3865:16:2"}]},"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"2881:775:2","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":375,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:2","nodeType":"FunctionDefinition","parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"hash","nameLocation":"3686:4:2","nodeType":"VariableDeclaration","scope":375,"src":"3678:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"signature","nameLocation":"3705:9:2","nodeType":"VariableDeclaration","scope":375,"src":"3692:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:2"},"returnParameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"3739:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:2"},"scope":609,"src":"3661:227:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":421,"nodeType":"Block","src":"4275:203:2","statements":[{"assignments":[391],"declarations":[{"constant":false,"id":391,"mutability":"mutable","name":"s","nameLocation":"4293:1:2","nodeType":"VariableDeclaration","scope":421,"src":"4285:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":398,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":392,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"4297:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:2","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:2","typeDescriptions":{}}},"id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:2"},{"assignments":[400],"declarations":[{"constant":false,"id":400,"mutability":"mutable","name":"v","nameLocation":"4393:1:2","nodeType":"VariableDeclaration","scope":421,"src":"4387:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":399,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":413,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":405,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"4412:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:2","typeDescriptions":{}}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:2","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":409,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:2","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":401,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:2","typeDescriptions":{}}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4397:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:2"},{"expression":{"arguments":[{"id":415,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"4457:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":416,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"4463:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":417,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"4466:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":418,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"4469:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":414,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[348,422,516],"referencedDeclaration":516,"src":"4446:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4446:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":389,"id":420,"nodeType":"Return","src":"4439:32:2"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"3894:243:2","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":422,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:2","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"hash","nameLocation":"4179:4:2","nodeType":"VariableDeclaration","scope":422,"src":"4171:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"r","nameLocation":"4201:1:2","nodeType":"VariableDeclaration","scope":422,"src":"4193:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":382,"mutability":"mutable","name":"vs","nameLocation":"4220:2:2","nodeType":"VariableDeclaration","scope":422,"src":"4212:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:2"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4252:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4261:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"RecoverError","nameLocations":["4261:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"4261:12:2"},"referencedDeclaration":258,"src":"4261:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:2"},"scope":609,"src":"4142:336:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":451,"nodeType":"Block","src":"4759:136:2","statements":[{"assignments":[435,438],"declarations":[{"constant":false,"id":435,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:2","nodeType":"VariableDeclaration","scope":451,"src":"4770:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"error","nameLocation":"4802:5:2","nodeType":"VariableDeclaration","scope":451,"src":"4789:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":437,"nodeType":"UserDefinedTypeName","pathNode":{"id":436,"name":"RecoverError","nameLocations":["4789:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"4789:12:2"},"referencedDeclaration":258,"src":"4789:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":444,"initialValue":{"arguments":[{"id":440,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4822:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":441,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"4828:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":442,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4831:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":439,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[348,422,516],"referencedDeclaration":422,"src":"4811:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:2"},{"expression":{"arguments":[{"id":446,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"4856:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}],"id":445,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"4844:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$258_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":448,"nodeType":"ExpressionStatement","src":"4844:18:2"},{"expression":{"id":449,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"4879:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":433,"id":450,"nodeType":"Return","src":"4872:16:2"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"4484:154:2","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":452,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:2","nodeType":"FunctionDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"hash","nameLocation":"4677:4:2","nodeType":"VariableDeclaration","scope":452,"src":"4669:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"r","nameLocation":"4699:1:2","nodeType":"VariableDeclaration","scope":452,"src":"4691:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"vs","nameLocation":"4718:2:2","nodeType":"VariableDeclaration","scope":452,"src":"4710:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":428,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:2"},"returnParameters":{"id":433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":452,"src":"4750:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":431,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:2"},"scope":609,"src":"4643:252:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"5218:1345:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":471,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"6114:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":469,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:2","typeDescriptions":{}}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:2","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":484,"nodeType":"IfStatement","src":"6102:161:2","trueBody":{"id":483,"nodeType":"Block","src":"6187:76:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:2","typeDescriptions":{}}},"id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6209:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":479,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"6221:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6234:17:2","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":256,"src":"6221:30:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"id":481,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":468,"id":482,"nodeType":"Return","src":"6201:51:2"}]}},{"assignments":[486],"declarations":[{"constant":false,"id":486,"mutability":"mutable","name":"signer","nameLocation":"6365:6:2","nodeType":"VariableDeclaration","scope":515,"src":"6357:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":493,"initialValue":{"arguments":[{"id":488,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"6384:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":489,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"6390:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":490,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"6393:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":491,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"6396:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":487,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:2","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":494,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"6412:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:2","typeDescriptions":{}}},"id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"IfStatement","src":"6408:101:2","trueBody":{"id":508,"nodeType":"Block","src":"6434:75:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:2","typeDescriptions":{}}},"id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6456:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":504,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"6468:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6481:16:2","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":254,"src":"6468:29:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"id":506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":468,"id":507,"nodeType":"Return","src":"6448:50:2"}]}},{"expression":{"components":[{"id":510,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"6527:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":511,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"6535:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$258_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:7:2","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":253,"src":"6535:20:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"id":513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":468,"id":514,"nodeType":"Return","src":"6519:37:2"}]},"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"4901:163:2","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:2","nodeType":"FunctionDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"hash","nameLocation":"5106:4:2","nodeType":"VariableDeclaration","scope":516,"src":"5098:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"v","nameLocation":"5126:1:2","nodeType":"VariableDeclaration","scope":516,"src":"5120:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":456,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"r","nameLocation":"5145:1:2","nodeType":"VariableDeclaration","scope":516,"src":"5137:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":461,"mutability":"mutable","name":"s","nameLocation":"5164:1:2","nodeType":"VariableDeclaration","scope":516,"src":"5156:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:2"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":516,"src":"5195:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":463,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":516,"src":"5204:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":466,"nodeType":"UserDefinedTypeName","pathNode":{"id":465,"name":"RecoverError","nameLocations":["5204:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"5204:12:2"},"referencedDeclaration":258,"src":"5204:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:2"},"scope":609,"src":"5069:1494:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":548,"nodeType":"Block","src":"6828:138:2","statements":[{"assignments":[531,534],"declarations":[{"constant":false,"id":531,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:2","nodeType":"VariableDeclaration","scope":548,"src":"6839:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"error","nameLocation":"6871:5:2","nodeType":"VariableDeclaration","scope":548,"src":"6858:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":533,"nodeType":"UserDefinedTypeName","pathNode":{"id":532,"name":"RecoverError","nameLocations":["6858:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"6858:12:2"},"referencedDeclaration":258,"src":"6858:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":541,"initialValue":{"arguments":[{"id":536,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"6891:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":537,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"6897:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":538,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6900:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":539,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6903:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":535,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[348,422,516],"referencedDeclaration":516,"src":"6880:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6880:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$258_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:2"},{"expression":{"arguments":[{"id":543,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"6927:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$258","typeString":"enum ECDSA.RecoverError"}],"id":542,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"6915:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$258_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6915:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":545,"nodeType":"ExpressionStatement","src":"6915:18:2"},{"expression":{"id":546,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"6950:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":529,"id":547,"nodeType":"Return","src":"6943:16:2"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"6569:122:2","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":549,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:2","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"hash","nameLocation":"6730:4:2","nodeType":"VariableDeclaration","scope":549,"src":"6722:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"v","nameLocation":"6750:1:2","nodeType":"VariableDeclaration","scope":549,"src":"6744:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":520,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"r","nameLocation":"6769:1:2","nodeType":"VariableDeclaration","scope":549,"src":"6761:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"s","nameLocation":"6788:1:2","nodeType":"VariableDeclaration","scope":549,"src":"6780:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:2"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":549,"src":"6819:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:2"},"scope":609,"src":"6696:270:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":565,"nodeType":"Block","src":"7334:187:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":561,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"7508:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":558,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7459:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":557,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7445:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":556,"id":564,"nodeType":"Return","src":"7438:76:2"}]},"documentation":{"id":550,"nodeType":"StructuredDocumentation","src":"6972:279:2","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":566,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:2","nodeType":"FunctionDefinition","parameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"hash","nameLocation":"7296:4:2","nodeType":"VariableDeclaration","scope":566,"src":"7288:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:2"},"returnParameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":566,"src":"7325:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":554,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:2"},"scope":609,"src":"7256:265:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"7886:116:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":580,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7981:1:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7983:6:2","memberName":"length","nodeType":"MemberAccess","src":"7981:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":578,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"7964:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$248_$","typeString":"type(library Strings)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7972:8:2","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":131,"src":"7964:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7964:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":583,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7992:1:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":575,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7917:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7913:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":574,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:92:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":573,"id":586,"nodeType":"Return","src":"7896:99:2"}]},"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"7527:274:2","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:2","nodeType":"FunctionDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"s","nameLocation":"7851:1:2","nodeType":"VariableDeclaration","scope":588,"src":"7838:14:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":568,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:2"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":588,"src":"7877:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:2"},"scope":609,"src":"7806:196:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":607,"nodeType":"Block","src":"8443:92:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":602,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"8499:15:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":603,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"8516:10:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":599,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8474:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":598,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":597,"id":606,"nodeType":"Return","src":"8453:75:2"}]},"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"8008:328:2","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":608,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:2","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:2","nodeType":"VariableDeclaration","scope":608,"src":"8366:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:2","nodeType":"VariableDeclaration","scope":608,"src":"8391:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:2"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":608,"src":"8434:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:2"},"scope":609,"src":"8341:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":610,"src":"369:8168:2","usedErrors":[]}],"src":"112:8426:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"ECDSA":[609],"EIP712":[763],"Math":[1628],"Strings":[248]},"id":764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":611,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":612,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":610,"src":"138:21:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"161:1142:3","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"},"fullyImplemented":true,"id":763,"linearizedBaseContracts":[763],"name":"EIP712","nameLocation":"1322:6:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":615,"mutability":"immutable","name":"_CACHED_DOMAIN_SEPARATOR","nameLocation":"1598:24:3","nodeType":"VariableDeclaration","scope":763,"src":"1572:50:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1572:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":617,"mutability":"immutable","name":"_CACHED_CHAIN_ID","nameLocation":"1654:16:3","nodeType":"VariableDeclaration","scope":763,"src":"1628:42:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":619,"mutability":"immutable","name":"_CACHED_THIS","nameLocation":"1702:12:3","nodeType":"VariableDeclaration","scope":763,"src":"1676:38:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":621,"mutability":"immutable","name":"_HASHED_NAME","nameLocation":"1747:12:3","nodeType":"VariableDeclaration","scope":763,"src":"1721:38:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1721:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":623,"mutability":"immutable","name":"_HASHED_VERSION","nameLocation":"1791:15:3","nodeType":"VariableDeclaration","scope":763,"src":"1765:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":625,"mutability":"immutable","name":"_TYPE_HASH","nameLocation":"1838:10:3","nodeType":"VariableDeclaration","scope":763,"src":"1812:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1812:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":689,"nodeType":"Block","src":"2519:547:3","statements":[{"assignments":[634],"declarations":[{"constant":false,"id":634,"mutability":"mutable","name":"hashedName","nameLocation":"2537:10:3","nodeType":"VariableDeclaration","scope":689,"src":"2529:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2529:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":641,"initialValue":{"arguments":[{"arguments":[{"id":638,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2566:4:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2560:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":636,"name":"bytes","nodeType":"ElementaryTypeName","src":"2560:5:3","typeDescriptions":{}}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":635,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2550:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2550:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2529:43:3"},{"assignments":[643],"declarations":[{"constant":false,"id":643,"mutability":"mutable","name":"hashedVersion","nameLocation":"2590:13:3","nodeType":"VariableDeclaration","scope":689,"src":"2582:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":642,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2582:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":650,"initialValue":{"arguments":[{"arguments":[{"id":647,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"2622:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2616:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":645,"name":"bytes","nodeType":"ElementaryTypeName","src":"2616:5:3","typeDescriptions":{}}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":644,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2606:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2582:49:3"},{"assignments":[652],"declarations":[{"constant":false,"id":652,"mutability":"mutable","name":"typeHash","nameLocation":"2649:8:3","nodeType":"VariableDeclaration","scope":689,"src":"2641:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":656,"initialValue":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2683:84:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":653,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2660:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:117:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2641:136:3"},{"expression":{"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":657,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"2787:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":658,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"2802:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2787:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":660,"nodeType":"ExpressionStatement","src":"2787:25:3"},{"expression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":661,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"2822:15:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":662,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2840:13:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2822:31:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":664,"nodeType":"ExpressionStatement","src":"2822:31:3"},{"expression":{"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":665,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"2863:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":666,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2882:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2888:7:3","memberName":"chainid","nodeType":"MemberAccess","src":"2882:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2863:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":669,"nodeType":"ExpressionStatement","src":"2863:32:3"},{"expression":{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":670,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"2905:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":672,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"2954:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":673,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"2964:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":674,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2976:13:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":671,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"2932:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2932:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2905:85:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":677,"nodeType":"ExpressionStatement","src":"2905:85:3"},{"expression":{"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":678,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"3000:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":681,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3023:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}],"id":680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3015:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"3015:7:3","typeDescriptions":{}}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3015:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3000:28:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":684,"nodeType":"ExpressionStatement","src":"3000:28:3"},{"expression":{"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":685,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"3038:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":686,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"3051:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3038:21:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":688,"nodeType":"ExpressionStatement","src":"3038:21:3"}]},"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"1900:559:3","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":690,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"name","nameLocation":"2490:4:3","nodeType":"VariableDeclaration","scope":690,"src":"2476:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":627,"name":"string","nodeType":"ElementaryTypeName","src":"2476:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"version","nameLocation":"2510:7:3","nodeType":"VariableDeclaration","scope":690,"src":"2496:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":629,"name":"string","nodeType":"ElementaryTypeName","src":"2496:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2475:43:3"},"returnParameters":{"id":632,"nodeType":"ParameterList","parameters":[],"src":"2519:0:3"},"scope":763,"src":"2464:602:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":718,"nodeType":"Block","src":"3214:246:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":698,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3236:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}],"id":697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3228:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":696,"name":"address","nodeType":"ElementaryTypeName","src":"3228:7:3","typeDescriptions":{}}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3228:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":700,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"3245:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3228:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":702,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3261:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3267:7:3","memberName":"chainid","nodeType":"MemberAccess","src":"3261:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":704,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"3278:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3261:33:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3228:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":716,"nodeType":"Block","src":"3358:96:3","statements":[{"expression":{"arguments":[{"id":711,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"3401:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":712,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"3413:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":713,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"3427:15:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":710,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"3379:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":695,"id":715,"nodeType":"Return","src":"3372:71:3"}]},"id":717,"nodeType":"IfStatement","src":"3224:230:3","trueBody":{"id":709,"nodeType":"Block","src":"3296:56:3","statements":[{"expression":{"id":707,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"3317:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":695,"id":708,"nodeType":"Return","src":"3310:31:3"}]}}]},"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"3072:75:3","text":" @dev Returns the domain separator for the current chain."},"id":719,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3161:18:3","nodeType":"FunctionDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"3179:2:3"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":719,"src":"3205:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3204:9:3"},"scope":763,"src":"3152:308:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":745,"nodeType":"Block","src":"3615:108:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":733,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3653:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":734,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"3663:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":735,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"3673:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":736,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3686:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3692:7:3","memberName":"chainid","nodeType":"MemberAccess","src":"3686:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":740,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3709:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$763","typeString":"contract EIP712"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3701:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:3","typeDescriptions":{}}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3701:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":731,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3642:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3646:6:3","memberName":"encode","nodeType":"MemberAccess","src":"3642:10:3","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3642:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":730,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3632:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3632:84:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":729,"id":744,"nodeType":"Return","src":"3625:91:3"}]},"id":746,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3475:21:3","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"mutability":"mutable","name":"typeHash","nameLocation":"3514:8:3","nodeType":"VariableDeclaration","scope":746,"src":"3506:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3506:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"nameHash","nameLocation":"3540:8:3","nodeType":"VariableDeclaration","scope":746,"src":"3532:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3532:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"versionHash","nameLocation":"3566:11:3","nodeType":"VariableDeclaration","scope":746,"src":"3558:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3558:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3496:87:3"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":746,"src":"3606:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3606:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3605:9:3"},"scope":763,"src":"3466:257:3","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":761,"nodeType":"Block","src":"4434:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":756,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"4473:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4473:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":758,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"4495:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":754,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"4451:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$609_$","typeString":"type(library ECDSA)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4457:15:3","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":608,"src":"4451:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4451:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":753,"id":760,"nodeType":"Return","src":"4444:62:3"}]},"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"3729:614:3","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":762,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4357:16:3","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"structHash","nameLocation":"4382:10:3","nodeType":"VariableDeclaration","scope":762,"src":"4374:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4374:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4373:20:3"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":762,"src":"4425:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4425:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4424:9:3"},"scope":763,"src":"4348:165:3","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":764,"src":"1304:3211:3","usedErrors":[]}],"src":"113:4403:3"},"id":3},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1628]},"id":1629,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":765,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"128:73:4","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1628,"linearizedBaseContracts":[1628],"name":"Math","nameLocation":"210:4:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":770,"members":[{"id":767,"name":"Down","nameLocation":"245:4:4","nodeType":"EnumValue","src":"245:4:4"},{"id":768,"name":"Up","nameLocation":"287:2:4","nodeType":"EnumValue","src":"287:2:4"},{"id":769,"name":"Zero","nameLocation":"318:4:4","nodeType":"EnumValue","src":"318:4:4"}],"name":"Rounding","nameLocation":"226:8:4","nodeType":"EnumDefinition","src":"221:122:4"},{"body":{"id":787,"nodeType":"Block","src":"480:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":780,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"497:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":781,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"501:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":784,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"509:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:4","trueExpression":{"id":783,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"505:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":779,"id":786,"nodeType":"Return","src":"490:20:4"}]},"documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"349:59:4","text":" @dev Returns the largest of two numbers."},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:4","nodeType":"FunctionDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"a","nameLocation":"434:1:4","nodeType":"VariableDeclaration","scope":788,"src":"426:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":775,"mutability":"mutable","name":"b","nameLocation":"445:1:4","nodeType":"VariableDeclaration","scope":788,"src":"437:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":774,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:4"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"471:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":777,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:4"},"scope":1628,"src":"413:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":805,"nodeType":"Block","src":"655:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":798,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"672:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":799,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"676:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"684:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:4","trueExpression":{"id":801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"680:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":797,"id":804,"nodeType":"Return","src":"665:20:4"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"523:60:4","text":" @dev Returns the smallest of two numbers."},"id":806,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:4","nodeType":"FunctionDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"a","nameLocation":"609:1:4","nodeType":"VariableDeclaration","scope":806,"src":"601:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":793,"mutability":"mutable","name":"b","nameLocation":"620:1:4","nodeType":"VariableDeclaration","scope":806,"src":"612:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:4"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":806,"src":"646:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:4"},"scope":1628,"src":"588:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":828,"nodeType":"Block","src":"876:82:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":816,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"931:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":817,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"935:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":819,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":820,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"941:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":821,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"945:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":823,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":815,"id":827,"nodeType":"Return","src":"923:28:4"}]},"documentation":{"id":807,"nodeType":"StructuredDocumentation","src":"698:102:4","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":829,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:4","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":809,"mutability":"mutable","name":"a","nameLocation":"830:1:4","nodeType":"VariableDeclaration","scope":829,"src":"822:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":811,"mutability":"mutable","name":"b","nameLocation":"841:1:4","nodeType":"VariableDeclaration","scope":829,"src":"833:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:4"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":829,"src":"867:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:4"},"scope":1628,"src":"805:153:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":853,"nodeType":"Block","src":"1228:123:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":839,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"1316:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":843,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"1330:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1339:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:4","trueExpression":{"hexValue":"30","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":838,"id":852,"nodeType":"Return","src":"1309:35:4"}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"964:188:4","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":854,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:4","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"a","nameLocation":"1182:1:4","nodeType":"VariableDeclaration","scope":854,"src":"1174:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"b","nameLocation":"1193:1:4","nodeType":"VariableDeclaration","scope":854,"src":"1185:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:4"},"returnParameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":854,"src":"1219:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:4"},"scope":1628,"src":"1157:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"1795:3797:4","statements":[{"id":974,"nodeType":"UncheckedBlock","src":"1805:3781:4","statements":[{"assignments":[867],"declarations":[{"constant":false,"id":867,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:4","nodeType":"VariableDeclaration","scope":974,"src":"2126:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":868,"nodeType":"VariableDeclarationStatement","src":"2126:13:4"},{"assignments":[870],"declarations":[{"constant":false,"id":870,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:4","nodeType":"VariableDeclaration","scope":974,"src":"2198:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":871,"nodeType":"VariableDeclarationStatement","src":"2198:13:4"},{"AST":{"nodeType":"YulBlock","src":"2278:157:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:4","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:4"},"nodeType":"YulFunctionCall","src":"2319:6:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:4"},"nodeType":"YulFunctionCall","src":"2306:20:4"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:4","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:4"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:4"},"nodeType":"YulFunctionCall","src":"2352:9:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:4"}]},{"nodeType":"YulAssignment","src":"2378:43:4","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:4"},"nodeType":"YulFunctionCall","src":"2391:14:4"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:4"},"nodeType":"YulFunctionCall","src":"2407:13:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:4"},"nodeType":"YulFunctionCall","src":"2387:34:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":867,"isOffset":false,"isSlot":false,"src":"2343:5:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"2399:5:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"2414:5:4","valueSize":1},{"declaration":870,"isOffset":false,"isSlot":false,"src":"2378:5:4","valueSize":1},{"declaration":857,"isOffset":false,"isSlot":false,"src":"2313:1:4","valueSize":1},{"declaration":857,"isOffset":false,"isSlot":false,"src":"2356:1:4","valueSize":1},{"declaration":859,"isOffset":false,"isSlot":false,"src":"2316:1:4","valueSize":1},{"declaration":859,"isOffset":false,"isSlot":false,"src":"2359:1:4","valueSize":1}],"id":872,"nodeType":"InlineAssembly","src":"2269:166:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":873,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2516:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":881,"nodeType":"IfStatement","src":"2512:75:4","trueBody":{"id":880,"nodeType":"Block","src":"2528:59:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":876,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"2553:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":877,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"2561:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":865,"id":879,"nodeType":"Return","src":"2546:26:4"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":883,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"2697:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":884,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2711:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":882,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"ExpressionStatement","src":"2689:28:4"},{"assignments":[889],"declarations":[{"constant":false,"id":889,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:4","nodeType":"VariableDeclaration","scope":974,"src":"2973:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":890,"nodeType":"VariableDeclarationStatement","src":"2973:17:4"},{"AST":{"nodeType":"YulBlock","src":"3013:291:4","statements":[{"nodeType":"YulAssignment","src":"3082:38:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:4"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:4"},"nodeType":"YulFunctionCall","src":"3095:25:4"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:4"}]},{"nodeType":"YulAssignment","src":"3202:41:4","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:4"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:4"},"nodeType":"YulFunctionCall","src":"3222:20:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:4"},"nodeType":"YulFunctionCall","src":"3211:32:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:4"}]},{"nodeType":"YulAssignment","src":"3260:30:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:4"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:4"},"nodeType":"YulFunctionCall","src":"3269:21:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":861,"isOffset":false,"isSlot":false,"src":"3108:11:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"3236:5:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"3260:5:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"3273:5:4","valueSize":1},{"declaration":870,"isOffset":false,"isSlot":false,"src":"3202:5:4","valueSize":1},{"declaration":870,"isOffset":false,"isSlot":false,"src":"3215:5:4","valueSize":1},{"declaration":889,"isOffset":false,"isSlot":false,"src":"3082:9:4","valueSize":1},{"declaration":889,"isOffset":false,"isSlot":false,"src":"3225:9:4","valueSize":1},{"declaration":889,"isOffset":false,"isSlot":false,"src":"3280:9:4","valueSize":1},{"declaration":857,"isOffset":false,"isSlot":false,"src":"3102:1:4","valueSize":1},{"declaration":859,"isOffset":false,"isSlot":false,"src":"3105:1:4","valueSize":1}],"id":891,"nodeType":"InlineAssembly","src":"3004:300:4"},{"assignments":[893],"declarations":[{"constant":false,"id":893,"mutability":"mutable","name":"twos","nameLocation":"3619:4:4","nodeType":"VariableDeclaration","scope":974,"src":"3611:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":901,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":894,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"3626:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:4","subExpression":{"id":895,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"3642:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":899,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:4"},{"AST":{"nodeType":"YulBlock","src":"3681:362:4","statements":[{"nodeType":"YulAssignment","src":"3746:37:4","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:4"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:4"},"nodeType":"YulFunctionCall","src":"3761:22:4"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:4"}]},{"nodeType":"YulAssignment","src":"3850:25:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:4"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:4"},"nodeType":"YulFunctionCall","src":"3859:16:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:4"}]},{"nodeType":"YulAssignment","src":"3990:39:4","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:4","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:4"},"nodeType":"YulFunctionCall","src":"4006:12:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:4"},"nodeType":"YulFunctionCall","src":"4002:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:4"},"nodeType":"YulFunctionCall","src":"3998:31:4"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":861,"isOffset":false,"isSlot":false,"src":"3746:11:4","valueSize":1},{"declaration":861,"isOffset":false,"isSlot":false,"src":"3765:11:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"3850:5:4","valueSize":1},{"declaration":867,"isOffset":false,"isSlot":false,"src":"3863:5:4","valueSize":1},{"declaration":893,"isOffset":false,"isSlot":false,"src":"3778:4:4","valueSize":1},{"declaration":893,"isOffset":false,"isSlot":false,"src":"3870:4:4","valueSize":1},{"declaration":893,"isOffset":false,"isSlot":false,"src":"3990:4:4","valueSize":1},{"declaration":893,"isOffset":false,"isSlot":false,"src":"4013:4:4","valueSize":1},{"declaration":893,"isOffset":false,"isSlot":false,"src":"4020:4:4","valueSize":1}],"id":902,"nodeType":"InlineAssembly","src":"3672:371:4"},{"expression":{"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":903,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4109:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":904,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"4118:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":905,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"4126:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":908,"nodeType":"ExpressionStatement","src":"4109:21:4"},{"assignments":[910],"declarations":[{"constant":false,"id":910,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:4","nodeType":"VariableDeclaration","scope":974,"src":"4448:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":917,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":912,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4471:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:4"},{"expression":{"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":918,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4704:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":920,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4719:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":921,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4733:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":925,"nodeType":"ExpressionStatement","src":"4704:36:4"},{"expression":{"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":926,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4773:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4788:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":929,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4802:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":933,"nodeType":"ExpressionStatement","src":"4773:36:4"},{"expression":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":934,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4843:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4858:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":937,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4872:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":941,"nodeType":"ExpressionStatement","src":"4843:36:4"},{"expression":{"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":942,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4913:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":944,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4928:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":945,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4942:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":949,"nodeType":"ExpressionStatement","src":"4913:36:4"},{"expression":{"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":950,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4983:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4998:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":953,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"5012:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":957,"nodeType":"ExpressionStatement","src":"4983:36:4"},{"expression":{"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":958,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"5054:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":960,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"5069:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":961,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"5083:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":965,"nodeType":"ExpressionStatement","src":"5054:36:4"},{"expression":{"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":966,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"5524:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":967,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5533:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":968,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"5541:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":971,"nodeType":"ExpressionStatement","src":"5524:24:4"},{"expression":{"id":972,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"5569:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":865,"id":973,"nodeType":"Return","src":"5562:13:4"}]}]},"documentation":{"id":855,"nodeType":"StructuredDocumentation","src":"1357:305:4","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:4","nodeType":"FunctionDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"x","nameLocation":"1700:1:4","nodeType":"VariableDeclaration","scope":976,"src":"1692:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"y","nameLocation":"1719:1:4","nodeType":"VariableDeclaration","scope":976,"src":"1711:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:4","nodeType":"VariableDeclaration","scope":976,"src":"1730:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":860,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:4"},"returnParameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"result","nameLocation":"1787:6:4","nodeType":"VariableDeclaration","scope":976,"src":"1779:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:4"},"scope":1628,"src":"1667:3925:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"5872:189:4","statements":[{"assignments":[992],"declarations":[{"constant":false,"id":992,"mutability":"mutable","name":"result","nameLocation":"5890:6:4","nodeType":"VariableDeclaration","scope":1019,"src":"5882:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":998,"initialValue":{"arguments":[{"id":994,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"5906:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":995,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"5909:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":996,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"5912:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":993,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[976,1020],"referencedDeclaration":976,"src":"5899:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":999,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"5938:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1000,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5950:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$770_$","typeString":"type(enum Math.Rounding)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":768,"src":"5950:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"src":"5938:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1004,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"5972:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1005,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"5975:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1006,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"5978:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1003,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:4","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1016,"nodeType":"IfStatement","src":"5934:98:4","trueBody":{"id":1015,"nodeType":"Block","src":"5996:36:4","statements":[{"expression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"6010:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1014,"nodeType":"ExpressionStatement","src":"6010:11:4"}]}},{"expression":{"id":1017,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"6048:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":990,"id":1018,"nodeType":"Return","src":"6041:13:4"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"5598:121:4","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:4","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"x","nameLocation":"5757:1:4","nodeType":"VariableDeclaration","scope":1020,"src":"5749:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"y","nameLocation":"5776:1:4","nodeType":"VariableDeclaration","scope":1020,"src":"5768:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:4","nodeType":"VariableDeclaration","scope":1020,"src":"5787:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:4","nodeType":"VariableDeclaration","scope":1020,"src":"5816:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"typeName":{"id":985,"nodeType":"UserDefinedTypeName","pathNode":{"id":984,"name":"Rounding","nameLocations":["5816:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":770,"src":"5816:8:4"},"referencedDeclaration":770,"src":"5816:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:4"},"returnParameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1020,"src":"5863:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:4"},"scope":1628,"src":"5724:337:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"6337:1585:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6351:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1034,"nodeType":"IfStatement","src":"6347:45:4","trueBody":{"id":1033,"nodeType":"Block","src":"6359:33:4","statements":[{"expression":{"hexValue":"30","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1027,"id":1032,"nodeType":"Return","src":"6373:8:4"}]}},{"assignments":[1036],"declarations":[{"constant":false,"id":1036,"mutability":"mutable","name":"result","nameLocation":"7079:6:4","nodeType":"VariableDeclaration","scope":1131,"src":"7071:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1035,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1045,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7099:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1038,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1300,1336],"referencedDeclaration":1300,"src":"7094:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1043,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:4"},{"id":1130,"nodeType":"UncheckedBlock","src":"7508:408:4","statements":[{"expression":{"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1046,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7532:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7542:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7551:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7555:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1056,"nodeType":"ExpressionStatement","src":"7532:35:4"},{"expression":{"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1057,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7581:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7591:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1059,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7600:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7604:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1067,"nodeType":"ExpressionStatement","src":"7581:35:4"},{"expression":{"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1068,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7630:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1069,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7640:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1070,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7649:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1071,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7653:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1074,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1078,"nodeType":"ExpressionStatement","src":"7630:35:4"},{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1079,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7679:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1080,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7689:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7698:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1082,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7702:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1085,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1089,"nodeType":"ExpressionStatement","src":"7679:35:4"},{"expression":{"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1090,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7728:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1091,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7738:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1092,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7747:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7751:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1096,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1100,"nodeType":"ExpressionStatement","src":"7728:35:4"},{"expression":{"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1101,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7777:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7787:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1103,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7796:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1104,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7800:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1107,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1111,"nodeType":"ExpressionStatement","src":"7777:35:4"},{"expression":{"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1112,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7826:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1113,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7836:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7845:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1115,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7849:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1122,"nodeType":"ExpressionStatement","src":"7826:35:4"},{"expression":{"arguments":[{"id":1124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7886:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1125,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7894:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7898:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1123,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7882:3:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1027,"id":1129,"nodeType":"Return","src":"7875:30:4"}]}]},"documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"6067:208:4","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:4","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"a","nameLocation":"6302:1:4","nodeType":"VariableDeclaration","scope":1132,"src":"6294:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1022,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:4"},"returnParameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1132,"src":"6328:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:4"},"scope":1628,"src":"6280:1642:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"8098:161:4","statements":[{"id":1166,"nodeType":"UncheckedBlock","src":"8108:145:4","statements":[{"assignments":[1144],"declarations":[{"constant":false,"id":1144,"mutability":"mutable","name":"result","nameLocation":"8140:6:4","nodeType":"VariableDeclaration","scope":1166,"src":"8132:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1148,"initialValue":{"arguments":[{"id":1146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"8154:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1132,1168],"referencedDeclaration":1132,"src":"8149:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"8177:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1150,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"8187:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1151,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"8199:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$770_$","typeString":"type(enum Math.Rounding)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":768,"src":"8199:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"src":"8187:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1154,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"8214:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"8223:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1157,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"8232:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:4","trueExpression":{"hexValue":"31","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1142,"id":1165,"nodeType":"Return","src":"8170:72:4"}]}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"7928:89:4","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:4","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"a","nameLocation":"8044:1:4","nodeType":"VariableDeclaration","scope":1168,"src":"8036:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:4","nodeType":"VariableDeclaration","scope":1168,"src":"8047:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"typeName":{"id":1137,"nodeType":"UserDefinedTypeName","pathNode":{"id":1136,"name":"Rounding","nameLocations":["8047:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":770,"src":"8047:8:4"},"referencedDeclaration":770,"src":"8047:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:4"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1168,"src":"8089:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:4"},"scope":1628,"src":"8022:237:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1299,"nodeType":"Block","src":"8444:922:4","statements":[{"assignments":[1177],"declarations":[{"constant":false,"id":1177,"mutability":"mutable","name":"result","nameLocation":"8462:6:4","nodeType":"VariableDeclaration","scope":1299,"src":"8454:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1179,"initialValue":{"hexValue":"30","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:4"},{"id":1296,"nodeType":"UncheckedBlock","src":"8482:855:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8510:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1194,"nodeType":"IfStatement","src":"8506:99:4","trueBody":{"id":1193,"nodeType":"Block","src":"8528:77:4","statements":[{"expression":{"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8546:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ExpressionStatement","src":"8546:13:4"},{"expression":{"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8577:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ExpressionStatement","src":"8577:13:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8622:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1209,"nodeType":"IfStatement","src":"8618:96:4","trueBody":{"id":1208,"nodeType":"Block","src":"8639:75:4","statements":[{"expression":{"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8657:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1203,"nodeType":"ExpressionStatement","src":"8657:12:4"},{"expression":{"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8687:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1207,"nodeType":"ExpressionStatement","src":"8687:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8731:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1224,"nodeType":"IfStatement","src":"8727:96:4","trueBody":{"id":1223,"nodeType":"Block","src":"8748:75:4","statements":[{"expression":{"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8766:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1218,"nodeType":"ExpressionStatement","src":"8766:12:4"},{"expression":{"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8796:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1222,"nodeType":"ExpressionStatement","src":"8796:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8840:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1239,"nodeType":"IfStatement","src":"8836:96:4","trueBody":{"id":1238,"nodeType":"Block","src":"8857:75:4","statements":[{"expression":{"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8875:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1233,"nodeType":"ExpressionStatement","src":"8875:12:4"},{"expression":{"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8905:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1237,"nodeType":"ExpressionStatement","src":"8905:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8949:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1254,"nodeType":"IfStatement","src":"8945:93:4","trueBody":{"id":1253,"nodeType":"Block","src":"8965:73:4","statements":[{"expression":{"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8983:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1248,"nodeType":"ExpressionStatement","src":"8983:11:4"},{"expression":{"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9012:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1252,"nodeType":"ExpressionStatement","src":"9012:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9055:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1269,"nodeType":"IfStatement","src":"9051:93:4","trueBody":{"id":1268,"nodeType":"Block","src":"9071:73:4","statements":[{"expression":{"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9089:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1263,"nodeType":"ExpressionStatement","src":"9089:11:4"},{"expression":{"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9118:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1267,"nodeType":"ExpressionStatement","src":"9118:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9161:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1284,"nodeType":"IfStatement","src":"9157:93:4","trueBody":{"id":1283,"nodeType":"Block","src":"9177:73:4","statements":[{"expression":{"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9195:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1278,"nodeType":"ExpressionStatement","src":"9195:11:4"},{"expression":{"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9224:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1282,"nodeType":"ExpressionStatement","src":"9224:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9267:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1295,"nodeType":"IfStatement","src":"9263:64:4","trueBody":{"id":1294,"nodeType":"Block","src":"9283:44:4","statements":[{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9301:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1293,"nodeType":"ExpressionStatement","src":"9301:11:4"}]}}]},{"expression":{"id":1297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9353:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1175,"id":1298,"nodeType":"Return","src":"9346:13:4"}]},"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"8265:113:4","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1300,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:4","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"value","nameLocation":"8405:5:4","nodeType":"VariableDeclaration","scope":1300,"src":"8397:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:4"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1300,"src":"8435:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:4"},"scope":1628,"src":"8383:983:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1335,"nodeType":"Block","src":"9599:165:4","statements":[{"id":1334,"nodeType":"UncheckedBlock","src":"9609:149:4","statements":[{"assignments":[1312],"declarations":[{"constant":false,"id":1312,"mutability":"mutable","name":"result","nameLocation":"9641:6:4","nodeType":"VariableDeclaration","scope":1334,"src":"9633:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1316,"initialValue":{"arguments":[{"id":1314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9655:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1313,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1300,1336],"referencedDeclaration":1300,"src":"9650:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"9682:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1318,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"9692:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1319,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"9704:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$770_$","typeString":"type(enum Math.Rounding)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":768,"src":"9704:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"src":"9692:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"9724:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9733:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:4","trueExpression":{"hexValue":"31","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1310,"id":1333,"nodeType":"Return","src":"9675:72:4"}]}]},"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"9372:142:4","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:4","nodeType":"FunctionDefinition","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"value","nameLocation":"9541:5:4","nodeType":"VariableDeclaration","scope":1336,"src":"9533:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1306,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:4","nodeType":"VariableDeclaration","scope":1336,"src":"9548:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"typeName":{"id":1305,"nodeType":"UserDefinedTypeName","pathNode":{"id":1304,"name":"Rounding","nameLocations":["9548:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":770,"src":"9548:8:4"},"referencedDeclaration":770,"src":"9548:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:4"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"9590:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:4"},"scope":1628,"src":"9519:245:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1464,"nodeType":"Block","src":"9951:828:4","statements":[{"assignments":[1345],"declarations":[{"constant":false,"id":1345,"mutability":"mutable","name":"result","nameLocation":"9969:6:4","nodeType":"VariableDeclaration","scope":1464,"src":"9961:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1344,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1347,"initialValue":{"hexValue":"30","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:4"},{"id":1461,"nodeType":"UncheckedBlock","src":"9989:761:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10017:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1364,"nodeType":"IfStatement","src":"10013:99:4","trueBody":{"id":1363,"nodeType":"Block","src":"10034:78:4","statements":[{"expression":{"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10052:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1358,"nodeType":"ExpressionStatement","src":"10052:15:4"},{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10085:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"10085:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10129:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1381,"nodeType":"IfStatement","src":"10125:99:4","trueBody":{"id":1380,"nodeType":"Block","src":"10146:78:4","statements":[{"expression":{"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10164:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1375,"nodeType":"ExpressionStatement","src":"10164:15:4"},{"expression":{"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10197:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1379,"nodeType":"ExpressionStatement","src":"10197:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10241:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1398,"nodeType":"IfStatement","src":"10237:99:4","trueBody":{"id":1397,"nodeType":"Block","src":"10258:78:4","statements":[{"expression":{"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10276:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1392,"nodeType":"ExpressionStatement","src":"10276:15:4"},{"expression":{"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10309:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1396,"nodeType":"ExpressionStatement","src":"10309:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10353:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"nodeType":"IfStatement","src":"10349:96:4","trueBody":{"id":1414,"nodeType":"Block","src":"10369:76:4","statements":[{"expression":{"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10387:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1409,"nodeType":"ExpressionStatement","src":"10387:14:4"},{"expression":{"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10419:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ExpressionStatement","src":"10419:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10462:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1432,"nodeType":"IfStatement","src":"10458:96:4","trueBody":{"id":1431,"nodeType":"Block","src":"10478:76:4","statements":[{"expression":{"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10496:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1426,"nodeType":"ExpressionStatement","src":"10496:14:4"},{"expression":{"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10528:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1430,"nodeType":"ExpressionStatement","src":"10528:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10571:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1449,"nodeType":"IfStatement","src":"10567:96:4","trueBody":{"id":1448,"nodeType":"Block","src":"10587:76:4","statements":[{"expression":{"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10605:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1443,"nodeType":"ExpressionStatement","src":"10605:14:4"},{"expression":{"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1444,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10637:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1447,"nodeType":"ExpressionStatement","src":"10637:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10680:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1460,"nodeType":"IfStatement","src":"10676:64:4","trueBody":{"id":1459,"nodeType":"Block","src":"10696:44:4","statements":[{"expression":{"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1455,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10714:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1458,"nodeType":"ExpressionStatement","src":"10714:11:4"}]}}]},{"expression":{"id":1462,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10766:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1343,"id":1463,"nodeType":"Return","src":"10759:13:4"}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"9770:114:4","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:4","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"value","nameLocation":"9912:5:4","nodeType":"VariableDeclaration","scope":1465,"src":"9904:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1338,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:4"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"9942:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:4"},"scope":1628,"src":"9889:890:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1500,"nodeType":"Block","src":"11014:165:4","statements":[{"id":1499,"nodeType":"UncheckedBlock","src":"11024:149:4","statements":[{"assignments":[1477],"declarations":[{"constant":false,"id":1477,"mutability":"mutable","name":"result","nameLocation":"11056:6:4","nodeType":"VariableDeclaration","scope":1499,"src":"11048:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1481,"initialValue":{"arguments":[{"id":1479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"11071:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1478,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1465,1501],"referencedDeclaration":1465,"src":"11065:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"11098:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1483,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"11108:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1484,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"11120:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$770_$","typeString":"type(enum Math.Rounding)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":768,"src":"11120:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"src":"11108:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1488,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"11139:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"11148:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:4","trueExpression":{"hexValue":"31","id":1493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1475,"id":1498,"nodeType":"Return","src":"11091:71:4"}]}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"10785:143:4","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1501,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:4","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"value","nameLocation":"10956:5:4","nodeType":"VariableDeclaration","scope":1501,"src":"10948:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:4","nodeType":"VariableDeclaration","scope":1501,"src":"10963:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"typeName":{"id":1470,"nodeType":"UserDefinedTypeName","pathNode":{"id":1469,"name":"Rounding","nameLocations":["10963:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":770,"src":"10963:8:4"},"referencedDeclaration":770,"src":"10963:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:4"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1501,"src":"11005:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:4"},"scope":1628,"src":"10933:246:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1587,"nodeType":"Block","src":"11493:600:4","statements":[{"assignments":[1510],"declarations":[{"constant":false,"id":1510,"mutability":"mutable","name":"result","nameLocation":"11511:6:4","nodeType":"VariableDeclaration","scope":1587,"src":"11503:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1509,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1512,"initialValue":{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:4"},{"id":1584,"nodeType":"UncheckedBlock","src":"11531:533:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11559:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1527,"nodeType":"IfStatement","src":"11555:98:4","trueBody":{"id":1526,"nodeType":"Block","src":"11577:76:4","statements":[{"expression":{"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11595:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1521,"nodeType":"ExpressionStatement","src":"11595:13:4"},{"expression":{"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"11626:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1525,"nodeType":"ExpressionStatement","src":"11626:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11670:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1542,"nodeType":"IfStatement","src":"11666:95:4","trueBody":{"id":1541,"nodeType":"Block","src":"11687:74:4","statements":[{"expression":{"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11705:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1536,"nodeType":"ExpressionStatement","src":"11705:12:4"},{"expression":{"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"11735:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1540,"nodeType":"ExpressionStatement","src":"11735:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11778:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1557,"nodeType":"IfStatement","src":"11774:95:4","trueBody":{"id":1556,"nodeType":"Block","src":"11795:74:4","statements":[{"expression":{"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11813:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1551,"nodeType":"ExpressionStatement","src":"11813:12:4"},{"expression":{"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"11843:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1555,"nodeType":"ExpressionStatement","src":"11843:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11886:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1572,"nodeType":"IfStatement","src":"11882:95:4","trueBody":{"id":1571,"nodeType":"Block","src":"11903:74:4","statements":[{"expression":{"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11921:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1566,"nodeType":"ExpressionStatement","src":"11921:12:4"},{"expression":{"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"11951:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1570,"nodeType":"ExpressionStatement","src":"11951:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11994:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1583,"nodeType":"IfStatement","src":"11990:64:4","trueBody":{"id":1582,"nodeType":"Block","src":"12010:44:4","statements":[{"expression":{"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"12028:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1581,"nodeType":"ExpressionStatement","src":"12028:11:4"}]}}]},{"expression":{"id":1585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"12080:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1508,"id":1586,"nodeType":"Return","src":"12073:13:4"}]},"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"11185:240:4","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1588,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:4","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"value","nameLocation":"11454:5:4","nodeType":"VariableDeclaration","scope":1588,"src":"11446:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:4"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1588,"src":"11484:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:4"},"scope":1628,"src":"11430:663:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1626,"nodeType":"Block","src":"12329:173:4","statements":[{"id":1625,"nodeType":"UncheckedBlock","src":"12339:157:4","statements":[{"assignments":[1600],"declarations":[{"constant":false,"id":1600,"mutability":"mutable","name":"result","nameLocation":"12371:6:4","nodeType":"VariableDeclaration","scope":1625,"src":"12363:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1599,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1604,"initialValue":{"arguments":[{"id":1602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"12387:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1601,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1588,1627],"referencedDeclaration":1588,"src":"12380:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1605,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12414:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1606,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"12424:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1607,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"12436:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$770_$","typeString":"type(enum Math.Rounding)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":768,"src":"12436:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"src":"12424:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1611,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12457:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"12471:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:4","trueExpression":{"hexValue":"31","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1622,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1598,"id":1624,"nodeType":"Return","src":"12407:78:4"}]}]},"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"12099:143:4","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1627,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:4","nodeType":"FunctionDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"value","nameLocation":"12271:5:4","nodeType":"VariableDeclaration","scope":1627,"src":"12263:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:4","nodeType":"VariableDeclaration","scope":1627,"src":"12278:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"},"typeName":{"id":1593,"nodeType":"UserDefinedTypeName","pathNode":{"id":1592,"name":"Rounding","nameLocations":["12278:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":770,"src":"12278:8:4"},"referencedDeclaration":770,"src":"12278:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$770","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:4"},"returnParameters":{"id":1598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1627,"src":"12320:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:4"},"scope":1628,"src":"12247:255:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1629,"src":"202:12302:4","usedErrors":[]}],"src":"103:12402:4"},"id":4},"contracts/TokenizedBallot.sol":{"ast":{"absolutePath":"contracts/TokenizedBallot.sol","exportedSymbols":{"Counters":[73],"ECDSA":[609],"EIP712":[763],"IMyERC20Votes":[1642],"Math":[1628],"NotEnoughVotingPower":[1648],"Strings":[248],"TokenizedBallot":[1996]},"id":1997,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1630,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"36:31:5"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","id":1631,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1997,"sourceUnit":764,"src":"69:63:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":1632,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1997,"sourceUnit":74,"src":"133:52:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMyERC20Votes","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1642,"linearizedBaseContracts":[1642],"name":"IMyERC20Votes","nameLocation":"197:13:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3a46b1a8","id":1641,"implemented":false,"kind":"function","modifiers":[],"name":"getPastVotes","nameLocation":"226:12:5","nodeType":"FunctionDefinition","parameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"account","nameLocation":"256:7:5","nodeType":"VariableDeclaration","scope":1641,"src":"248:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"248:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1636,"mutability":"mutable","name":"blockNumber","nameLocation":"281:11:5","nodeType":"VariableDeclaration","scope":1641,"src":"273:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"273:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"238:60:5"},"returnParameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1641,"src":"322:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1638,"name":"uint256","nodeType":"ElementaryTypeName","src":"322:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"321:9:5"},"scope":1642,"src":"217:114:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1997,"src":"187:146:5","usedErrors":[]},{"errorSelector":"29eed8ef","id":1648,"name":"NotEnoughVotingPower","nameLocation":"341:20:5","nodeType":"ErrorDefinition","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"required","nameLocation":"370:8:5","nodeType":"VariableDeclaration","scope":1648,"src":"362:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1643,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"inControl","nameLocation":"388:9:5","nodeType":"VariableDeclaration","scope":1648,"src":"380:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"361:37:5"},"src":"335:64:5"},{"abstract":false,"baseContracts":[{"baseName":{"id":1649,"name":"EIP712","nameLocations":["429:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":763,"src":"429:6:5"},"id":1650,"nodeType":"InheritanceSpecifier","src":"429:6:5"}],"canonicalName":"TokenizedBallot","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1996,"linearizedBaseContracts":[1996,763],"name":"TokenizedBallot","nameLocation":"410:15:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1654,"libraryName":{"id":1651,"name":"Counters","nameLocations":["448:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"448:8:5"},"nodeType":"UsingForDirective","src":"442:36:5","typeName":{"id":1653,"nodeType":"UserDefinedTypeName","pathNode":{"id":1652,"name":"Counters.Counter","nameLocations":["461:8:5","470:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"461:16:5"},"referencedDeclaration":5,"src":"461:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":true,"id":1659,"mutability":"constant","name":"_VOTE_TYPEHASH","nameLocation":"509:14:5","nodeType":"VariableDeclaration","scope":1996,"src":"484:156:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"484:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"766f746542795369672875696e743235362070726f706f73616c2c75696e7432353620616d6f756e742c75696e74323536206e6f6e63652c75696e743235362065787069727929","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"557:73:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa0532","typeString":"literal_string \"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\""},"value":"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa0532","typeString":"literal_string \"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\""}],"id":1656,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"534:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"534:106:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"canonicalName":"TokenizedBallot.Proposal","id":1664,"members":[{"constant":false,"id":1661,"mutability":"mutable","name":"name","nameLocation":"681:4:5","nodeType":"VariableDeclaration","scope":1664,"src":"673:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"673:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"voteCount","nameLocation":"703:9:5","nodeType":"VariableDeclaration","scope":1664,"src":"695:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Proposal","nameLocation":"654:8:5","nodeType":"StructDefinition","scope":1996,"src":"647:72:5","visibility":"public"},{"constant":false,"functionSelector":"55a373d6","id":1667,"mutability":"immutable","name":"tokenContract","nameLocation":"755:13:5","nodeType":"VariableDeclaration","scope":1996,"src":"724:44:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"},"typeName":{"id":1666,"nodeType":"UserDefinedTypeName","pathNode":{"id":1665,"name":"IMyERC20Votes","nameLocations":["724:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":1642,"src":"724:13:5"},"referencedDeclaration":1642,"src":"724:13:5","typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"}},"visibility":"public"},{"constant":false,"functionSelector":"2a8cd29e","id":1669,"mutability":"mutable","name":"targetBlockNumber","nameLocation":"789:17:5","nodeType":"VariableDeclaration","scope":1996,"src":"774:32:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"774:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"013cf08b","id":1673,"mutability":"mutable","name":"proposals","nameLocation":"830:9:5","nodeType":"VariableDeclaration","scope":1996,"src":"812:27:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal[]"},"typeName":{"baseType":{"id":1671,"nodeType":"UserDefinedTypeName","pathNode":{"id":1670,"name":"Proposal","nameLocations":["812:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":1664,"src":"812:8:5"},"referencedDeclaration":1664,"src":"812:8:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage_ptr","typeString":"struct TokenizedBallot.Proposal"}},"id":1672,"nodeType":"ArrayTypeName","src":"812:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage_ptr","typeString":"struct TokenizedBallot.Proposal[]"}},"visibility":"public"},{"constant":false,"functionSelector":"a7200351","id":1677,"mutability":"mutable","name":"votingPowerSpent","nameLocation":"881:16:5","nodeType":"VariableDeclaration","scope":1996,"src":"846:51:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1676,"keyType":{"id":1674,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"846:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"865:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"id":1682,"mutability":"mutable","name":"_nonces","nameLocation":"948:7:5","nodeType":"VariableDeclaration","scope":1996,"src":"903:52:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$5_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"typeName":{"id":1681,"keyType":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"903:36:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$5_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"valueType":{"id":1680,"nodeType":"UserDefinedTypeName","pathNode":{"id":1679,"name":"Counters.Counter","nameLocations":["922:8:5","931:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"922:16:5"},"referencedDeclaration":5,"src":"922:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"afd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e9588530","id":1690,"name":"Vote","nameLocation":"985:4:5","nodeType":"EventDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"1015:5:5","nodeType":"VariableDeclaration","scope":1690,"src":"999:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1686,"indexed":true,"mutability":"mutable","name":"proposal","nameLocation":"1046:8:5","nodeType":"VariableDeclaration","scope":1690,"src":"1030:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1030:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1688,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1080:6:5","nodeType":"VariableDeclaration","scope":1690,"src":"1064:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1064:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"989:103:5"},"src":"979:114:5"},{"body":{"id":1740,"nodeType":"Block","src":"1278:266:5","statements":[{"expression":{"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1706,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"1288:13:5","typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1708,"name":"_tokenContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"1318:21:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1707,"name":"IMyERC20Votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"1304:13:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMyERC20Votes_$1642_$","typeString":"type(contract IMyERC20Votes)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1304:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"}},"src":"1288:52:5","typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"}},"id":1711,"nodeType":"ExpressionStatement","src":"1288:52:5"},{"expression":{"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1712,"name":"targetBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"1350:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1713,"name":"_targetBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"1370:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1350:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1715,"nodeType":"ExpressionStatement","src":"1350:38:5"},{"body":{"id":1738,"nodeType":"Block","src":"1449:89:5","statements":[{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1731,"name":"proposalNames","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"1494:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1733,"indexExpression":{"id":1732,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"1508:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1494:16:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"30","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1523:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1730,"name":"Proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"1478:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Proposal_$1664_storage_ptr_$","typeString":"type(struct TokenizedBallot.Proposal storage pointer)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1488:4:5","1512:9:5"],"names":["name","voteCount"],"nodeType":"FunctionCall","src":"1478:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_memory_ptr","typeString":"struct TokenizedBallot.Proposal memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Proposal_$1664_memory_ptr","typeString":"struct TokenizedBallot.Proposal memory"}],"expression":{"id":1727,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"1463:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:5","memberName":"push","nodeType":"MemberAccess","src":"1463:14:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage_ptr_$_t_struct$_Proposal_$1664_storage_$returns$__$bound_to$_t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage_ptr_$","typeString":"function (struct TokenizedBallot.Proposal storage ref[] storage pointer,struct TokenizedBallot.Proposal storage ref)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1463:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1737,"nodeType":"ExpressionStatement","src":"1463:64:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1720,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"1418:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1721,"name":"proposalNames","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"1422:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1436:6:5","memberName":"length","nodeType":"MemberAccess","src":"1422:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1418:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1739,"initializationExpression":{"assignments":[1717],"declarations":[{"constant":false,"id":1717,"mutability":"mutable","name":"i","nameLocation":"1411:1:5","nodeType":"VariableDeclaration","scope":1739,"src":"1403:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1719,"initialValue":{"hexValue":"30","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1403:13:5"},"loopExpression":{"expression":{"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1444:3:5","subExpression":{"id":1724,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"1444:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1726,"nodeType":"ExpressionStatement","src":"1444:3:5"},"nodeType":"ForStatement","src":"1398:140:5"}]},"id":1741,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1702,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"1267:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1273:3:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":1704,"kind":"baseConstructorSpecifier","modifierName":{"id":1701,"name":"EIP712","nameLocations":["1260:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":763,"src":"1260:6:5"},"nodeType":"ModifierInvocation","src":"1260:17:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"proposalNames","nameLocation":"1137:13:5","nodeType":"VariableDeclaration","scope":1741,"src":"1120:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1120:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1692,"nodeType":"ArrayTypeName","src":"1120:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"_tokenContractAddress","nameLocation":"1168:21:5","nodeType":"VariableDeclaration","scope":1741,"src":"1160:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1694,"name":"address","nodeType":"ElementaryTypeName","src":"1160:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"_targetBlockNumber","nameLocation":"1207:18:5","nodeType":"VariableDeclaration","scope":1741,"src":"1199:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"name","nameLocation":"1249:4:5","nodeType":"VariableDeclaration","scope":1741,"src":"1235:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1698,"name":"string","nodeType":"ElementaryTypeName","src":"1235:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1110:149:5"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[],"src":"1278:0:5"},"scope":1996,"src":"1099:445:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1785,"nodeType":"Block","src":"1607:307:5","statements":[{"assignments":[1749],"declarations":[{"constant":false,"id":1749,"mutability":"mutable","name":"_votingPower","nameLocation":"1625:12:5","nodeType":"VariableDeclaration","scope":1785,"src":"1617:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1617:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1754,"initialValue":{"arguments":[{"expression":{"id":1751,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1652:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1656:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1652:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1750,"name":"votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1640:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1640:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1617:46:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1755,"name":"_votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"1677:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1756,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"1692:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1677:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1763,"nodeType":"IfStatement","src":"1673:88:5","trueBody":{"errorCall":{"arguments":[{"id":1759,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"1740:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1760,"name":"_votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"1748:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1758,"name":"NotEnoughVotingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"1719:20:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1719:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1762,"nodeType":"RevertStatement","src":"1712:49:5"}},{"expression":{"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1764,"name":"votingPowerSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"1771:16:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1767,"indexExpression":{"expression":{"id":1765,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1788:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1792:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1788:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1771:28:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1768,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"1803:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1771:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1770,"nodeType":"ExpressionStatement","src":"1771:38:5"},{"expression":{"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1771,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"1819:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1773,"indexExpression":{"id":1772,"name":"proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"1829:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1819:19:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage","typeString":"struct TokenizedBallot.Proposal storage ref"}},"id":1774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1839:9:5","memberName":"voteCount","nodeType":"MemberAccess","referencedDeclaration":1663,"src":"1819:29:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1775,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"1852:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1819:39:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1777,"nodeType":"ExpressionStatement","src":"1819:39:5"},{"eventCall":{"arguments":[{"expression":{"id":1779,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1878:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1882:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1878:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1781,"name":"proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"1890:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1782,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"1900:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1778,"name":"Vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"1873:4:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"EmitStatement","src":"1868:39:5"}]},"functionSelector":"b384abef","id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"vote","nameLocation":"1559:4:5","nodeType":"FunctionDefinition","parameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"proposal","nameLocation":"1572:8:5","nodeType":"VariableDeclaration","scope":1786,"src":"1564:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1564:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1745,"mutability":"mutable","name":"amount","nameLocation":"1590:6:5","nodeType":"VariableDeclaration","scope":1786,"src":"1582:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1582:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1563:34:5"},"returnParameters":{"id":1747,"nodeType":"ParameterList","parameters":[],"src":"1607:0:5"},"scope":1996,"src":"1550:364:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1876,"nodeType":"Block","src":"2106:693:5","statements":[{"assignments":[1804],"declarations":[{"constant":false,"id":1804,"mutability":"mutable","name":"_votingPower","nameLocation":"2124:12:5","nodeType":"VariableDeclaration","scope":1876,"src":"2116:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2116:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1809,"initialValue":{"arguments":[{"expression":{"id":1806,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2151:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2155:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2151:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1805,"name":"votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"2139:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2139:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2116:46:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1810,"name":"_votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"2176:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1811,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2191:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2176:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1818,"nodeType":"IfStatement","src":"2172:88:5","trueBody":{"errorCall":{"arguments":[{"id":1814,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2239:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1815,"name":"_votingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"2247:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1813,"name":"NotEnoughVotingPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"2218:20:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1817,"nodeType":"RevertStatement","src":"2211:49:5"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1820,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2279:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2285:9:5","memberName":"timestamp","nodeType":"MemberAccess","src":"2279:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1822,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"2298:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2279:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e61747572652065787069726564","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""},"value":"Signature expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""}],"id":1819,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2271:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2271:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1826,"nodeType":"ExpressionStatement","src":"2271:55:5"},{"assignments":[1828],"declarations":[{"constant":false,"id":1828,"mutability":"mutable","name":"signer","nameLocation":"2345:6:5","nodeType":"VariableDeclaration","scope":1876,"src":"2337:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"2337:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1847,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":1835,"name":"_VOTE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"2457:14:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1836,"name":"proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"2473:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1837,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2483:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1838,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"2491:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1839,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"2498:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1833,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2446:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2450:6:5","memberName":"encode","nodeType":"MemberAccess","src":"2446:10:5","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2446:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1832,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2415:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:108:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1831,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"2381:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2381:156:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1843,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"2551:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1844,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"2566:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1845,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"2581:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1829,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2354:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$609_$","typeString":"type(library ECDSA)"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:7:5","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":549,"src":"2354:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2354:238:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2337:255:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1849,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"2610:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1851,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"2629:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1850,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"2619:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2619:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2610:26:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206e6f6e6365","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2638:15:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""},"value":"Invalid nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""}],"id":1848,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2602:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2602:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1856,"nodeType":"ExpressionStatement","src":"2602:52:5"},{"expression":{"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1857,"name":"votingPowerSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"2664:16:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1859,"indexExpression":{"id":1858,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"2681:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2664:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1860,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2692:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2664:34:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1862,"nodeType":"ExpressionStatement","src":"2664:34:5"},{"expression":{"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1863,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"2708:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1865,"indexExpression":{"id":1864,"name":"proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"2718:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2708:19:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage","typeString":"struct TokenizedBallot.Proposal storage ref"}},"id":1866,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2728:9:5","memberName":"voteCount","nodeType":"MemberAccess","referencedDeclaration":1663,"src":"2708:29:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1867,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2741:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:39:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"nodeType":"ExpressionStatement","src":"2708:39:5"},{"eventCall":{"arguments":[{"id":1871,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"2767:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1872,"name":"proposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"2775:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1873,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2785:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1870,"name":"Vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2762:4:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1875,"nodeType":"EmitStatement","src":"2757:35:5"}]},"functionSelector":"04f81b35","id":1877,"implemented":true,"kind":"function","modifiers":[],"name":"voteBySig","nameLocation":"1929:9:5","nodeType":"FunctionDefinition","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"proposal","nameLocation":"1956:8:5","nodeType":"VariableDeclaration","scope":1877,"src":"1948:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1948:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"amount","nameLocation":"1982:6:5","nodeType":"VariableDeclaration","scope":1877,"src":"1974:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"1974:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"nonce","nameLocation":"2006:5:5","nodeType":"VariableDeclaration","scope":1877,"src":"1998:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1998:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1794,"mutability":"mutable","name":"expiry","nameLocation":"2029:6:5","nodeType":"VariableDeclaration","scope":1877,"src":"2021:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1793,"name":"uint256","nodeType":"ElementaryTypeName","src":"2021:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"v","nameLocation":"2051:1:5","nodeType":"VariableDeclaration","scope":1877,"src":"2045:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1795,"name":"uint8","nodeType":"ElementaryTypeName","src":"2045:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"r","nameLocation":"2070:1:5","nodeType":"VariableDeclaration","scope":1877,"src":"2062:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2062:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"s","nameLocation":"2089:1:5","nodeType":"VariableDeclaration","scope":1877,"src":"2081:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2081:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1938:158:5"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[],"src":"2106:0:5"},"scope":1996,"src":"1920:879:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1891,"nodeType":"Block","src":"2921:48:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":1885,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"2938:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$5_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":1887,"indexExpression":{"id":1886,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"2946:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2938:14:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage","typeString":"struct Counters.Counter storage ref"}},"id":1888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2953:7:5","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":17,"src":"2938:22:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$5_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$5_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2938:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1884,"id":1890,"nodeType":"Return","src":"2931:31:5"}]},"documentation":{"id":1878,"nodeType":"StructuredDocumentation","src":"2805:50:5","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":1892,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"2869:6:5","nodeType":"FunctionDefinition","parameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"owner","nameLocation":"2884:5:5","nodeType":"VariableDeclaration","scope":1892,"src":"2876:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1879,"name":"address","nodeType":"ElementaryTypeName","src":"2876:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2875:15:5"},"returnParameters":{"id":1884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1892,"src":"2912:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"2912:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2911:9:5"},"scope":1996,"src":"2860:109:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1909,"nodeType":"Block","src":"3043:130:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1901,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"3099:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1902,"name":"targetBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"3108:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1899,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"3072:13:5","typeDescriptions":{"typeIdentifier":"t_contract$_IMyERC20Votes_$1642","typeString":"contract IMyERC20Votes"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3086:12:5","memberName":"getPastVotes","nodeType":"MemberAccess","referencedDeclaration":1641,"src":"3072:26:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3072:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":1904,"name":"votingPowerSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"3141:16:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1906,"indexExpression":{"id":1905,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"3158:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3141:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3072:94:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1898,"id":1908,"nodeType":"Return","src":"3053:113:5"}]},"functionSelector":"c07473f6","id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"votingPower","nameLocation":"2984:11:5","nodeType":"FunctionDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"account","nameLocation":"3004:7:5","nodeType":"VariableDeclaration","scope":1910,"src":"2996:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:17:5"},"returnParameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"3034:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3033:9:5"},"scope":1996,"src":"2975:198:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1951,"nodeType":"Block","src":"3253:284:5","statements":[{"assignments":[1916],"declarations":[{"constant":false,"id":1916,"mutability":"mutable","name":"winningVoteCount","nameLocation":"3271:16:5","nodeType":"VariableDeclaration","scope":1951,"src":"3263:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3263:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1918,"initialValue":{"hexValue":"30","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3290:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3263:28:5"},{"body":{"id":1949,"nodeType":"Block","src":"3348:183:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1930,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"3366:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1932,"indexExpression":{"id":1931,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3376:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3366:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage","typeString":"struct TokenizedBallot.Proposal storage ref"}},"id":1933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3379:9:5","memberName":"voteCount","nodeType":"MemberAccess","referencedDeclaration":1663,"src":"3366:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1934,"name":"winningVoteCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"3391:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3366:41:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1948,"nodeType":"IfStatement","src":"3362:159:5","trueBody":{"id":1947,"nodeType":"Block","src":"3409:112:5","statements":[{"expression":{"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1936,"name":"winningVoteCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"3427:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":1937,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"3446:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1939,"indexExpression":{"id":1938,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3456:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3446:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage","typeString":"struct TokenizedBallot.Proposal storage ref"}},"id":1940,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3459:9:5","memberName":"voteCount","nodeType":"MemberAccess","referencedDeclaration":1663,"src":"3446:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3427:41:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1942,"nodeType":"ExpressionStatement","src":"3427:41:5"},{"expression":{"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1943,"name":"winningProposal_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"3486:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1944,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3505:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3486:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1946,"nodeType":"ExpressionStatement","src":"3486:20:5"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1923,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3321:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1924,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"3325:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3335:6:5","memberName":"length","nodeType":"MemberAccess","src":"3325:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3321:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1950,"initializationExpression":{"assignments":[1920],"declarations":[{"constant":false,"id":1920,"mutability":"mutable","name":"p","nameLocation":"3314:1:5","nodeType":"VariableDeclaration","scope":1950,"src":"3306:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"3306:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1922,"initialValue":{"hexValue":"30","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3306:13:5"},"loopExpression":{"expression":{"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3343:3:5","subExpression":{"id":1927,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3343:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1929,"nodeType":"ExpressionStatement","src":"3343:3:5"},"nodeType":"ForStatement","src":"3301:230:5"}]},"functionSelector":"609ff1bd","id":1952,"implemented":true,"kind":"function","modifiers":[],"name":"winningProposal","nameLocation":"3188:15:5","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[],"src":"3203:2:5"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"winningProposal_","nameLocation":"3235:16:5","nodeType":"VariableDeclaration","scope":1952,"src":"3227:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"3227:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3226:26:5"},"scope":1996,"src":"3179:358:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1965,"nodeType":"Block","src":"3609:64:5","statements":[{"expression":{"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1957,"name":"winnerName_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"3619:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":1958,"name":"proposals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"3633:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Proposal_$1664_storage_$dyn_storage","typeString":"struct TokenizedBallot.Proposal storage ref[] storage ref"}},"id":1961,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1959,"name":"winningProposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"3643:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3643:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3633:28:5","typeDescriptions":{"typeIdentifier":"t_struct$_Proposal_$1664_storage","typeString":"struct TokenizedBallot.Proposal storage ref"}},"id":1962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3662:4:5","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":1661,"src":"3633:33:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3619:47:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1964,"nodeType":"ExpressionStatement","src":"3619:47:5"}]},"functionSelector":"e2ba53f0","id":1966,"implemented":true,"kind":"function","modifiers":[],"name":"winnerName","nameLocation":"3552:10:5","nodeType":"FunctionDefinition","parameters":{"id":1953,"nodeType":"ParameterList","parameters":[],"src":"3562:2:5"},"returnParameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"winnerName_","nameLocation":"3596:11:5","nodeType":"VariableDeclaration","scope":1966,"src":"3588:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3588:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3587:21:5"},"scope":1996,"src":"3543:130:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1994,"nodeType":"Block","src":"3895:126:5","statements":[{"assignments":[1978],"declarations":[{"constant":false,"id":1978,"mutability":"mutable","name":"nonce","nameLocation":"3930:5:5","nodeType":"VariableDeclaration","scope":1994,"src":"3905:30:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1977,"nodeType":"UserDefinedTypeName","pathNode":{"id":1976,"name":"Counters.Counter","nameLocations":["3905:8:5","3914:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":5,"src":"3905:16:5"},"referencedDeclaration":5,"src":"3905:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"id":1982,"initialValue":{"baseExpression":{"id":1979,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3938:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$5_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":1981,"indexExpression":{"id":1980,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3946:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3938:14:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage","typeString":"struct Counters.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3905:47:5"},{"expression":{"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1983,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"3962:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1984,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"3972:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3978:7:5","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":17,"src":"3972:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$5_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$5_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3962:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1988,"nodeType":"ExpressionStatement","src":"3962:25:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1989,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"3997:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1991,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4003:9:5","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3997:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$5_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$5_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3997:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1993,"nodeType":"ExpressionStatement","src":"3997:17:5"}]},"documentation":{"id":1967,"nodeType":"StructuredDocumentation","src":"3679:120:5","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":1995,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3813:9:5","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"owner","nameLocation":"3840:5:5","nodeType":"VariableDeclaration","scope":1995,"src":"3832:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1968,"name":"address","nodeType":"ElementaryTypeName","src":"3832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3822:29:5"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"current","nameLocation":"3886:7:5","nodeType":"VariableDeclaration","scope":1995,"src":"3878:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"3878:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3877:17:5"},"scope":1996,"src":"3804:217:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1997,"src":"401:3622:5","usedErrors":[1648]}],"src":"36:3988:5"},"id":5}},"contracts":{"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066493166c1317441ffabf33a54ecae4820d6eab164df3144480dddeeeddd47e764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x493166C1317441 SELFDESTRUCT 0xAB RETURN GASPRICE SLOAD 0xEC 0xAE BASEFEE KECCAK256 0xD6 0xEA 0xB1 PUSH5 0xDF3144480D 0xDD 0xEE 0xED 0xDD SELFBALANCE 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"369:8168:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066493166c1317441ffabf33a54ecae4820d6eab164df3144480dddeeeddd47e764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x493166C1317441 SELFDESTRUCT 0xAB RETURN GASPRICE SLOAD 0xEC 0xAE BASEFEE KECCAK256 0xD6 0xEA 0xB1 PUSH5 0xDF3144480D 0xDD 0xEE 0xED 0xDD SELFBALANCE 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"369:8168:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[],"devdoc":{"details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{"constructor":{"details":"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TokenizedBallot.sol":{"IMyERC20Votes":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPastVotes(address,uint256)":"3a46b1a8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenizedBallot.sol\":\"IMyERC20Votes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenizedBallot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface IMyERC20Votes {\\n    function getPastVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n}\\n\\nerror NotEnoughVotingPower(uint256 required, uint256 inControl);\\n\\ncontract TokenizedBallot is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 private constant _VOTE_TYPEHASH =\\n        keccak256(\\n            \\\"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\\\"\\n        );\\n\\n    struct Proposal {\\n        bytes32 name;\\n        uint256 voteCount;\\n    }\\n    IMyERC20Votes public immutable tokenContract;\\n    uint256 public targetBlockNumber;\\n    Proposal[] public proposals;\\n\\n    mapping(address => uint256) public votingPowerSpent;\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    /* Events */\\n    event Vote(\\n        address indexed voter,\\n        uint256 indexed proposal,\\n        uint256 indexed amount\\n    );\\n\\n    constructor(\\n        bytes32[] memory proposalNames,\\n        address _tokenContractAddress,\\n        uint256 _targetBlockNumber,\\n        string memory name\\n    ) EIP712(name, \\\"1\\\") {\\n        tokenContract = IMyERC20Votes(_tokenContractAddress);\\n        targetBlockNumber = _targetBlockNumber;\\n        for (uint256 i = 0; i < proposalNames.length; i++) {\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    function vote(uint256 proposal, uint256 amount) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n        votingPowerSpent[msg.sender] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(msg.sender, proposal, amount);\\n    }\\n\\n    function voteBySig(\\n        uint256 proposal,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(_VOTE_TYPEHASH, proposal, amount, nonce, expiry)\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"Invalid nonce\\\");\\n        votingPowerSpent[signer] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(signer, proposal, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    function votingPower(address account) public view returns (uint256) {\\n        return\\n            tokenContract.getPastVotes(account, targetBlockNumber) -\\n            votingPowerSpent[account];\\n    }\\n\\n    function winningProposal() public view returns (uint256 winningProposal_) {\\n        uint256 winningVoteCount = 0;\\n        for (uint256 p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(\\n        address owner\\n    ) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x5b0d66a028fda9d6f0fc6e4cf6d36ceb5f40c9d6436772792f7fea6650d0ad6b\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"TokenizedBallot":{"abi":[{"inputs":[{"internalType":"bytes32[]","name":"proposalNames","type":"bytes32[]"},{"internalType":"address","name":"_tokenContractAddress","type":"address"},{"internalType":"uint256","name":"_targetBlockNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"required","type":"uint256"},{"internalType":"uint256","name":"inControl","type":"uint256"}],"name":"NotEnoughVotingPower","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"voter","type":"address"},{"indexed":true,"internalType":"uint256","name":"proposal","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Vote","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"proposals","outputs":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint256","name":"voteCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenContract","outputs":[{"internalType":"contract IMyERC20Votes","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"proposal","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"proposal","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"voteBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"votingPower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"votingPowerSpent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winnerName","outputs":[{"internalType":"bytes32","name":"winnerName_","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winningProposal","outputs":[{"internalType":"uint256","name":"winningProposal_","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"nonces(address)":{"details":"See {IERC20Permit-nonces}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1741":{"entryPoint":null,"id":1741,"parameterSlots":4,"returnSlots":0},"@_690":{"entryPoint":null,"id":690,"parameterSlots":2,"returnSlots":0},"@_buildDomainSeparator_746":{"entryPoint":511,"id":746,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory":{"entryPoint":856,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1286,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1101,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory":{"entryPoint":972,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":833,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1361,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_addresst_uint256t_string_memory_ptr_fromMemory":{"entryPoint":1412,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1793,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1759,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1776,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":1810,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":714,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":571,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":745,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1188,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1055,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":797,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1023,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1124,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1242,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":660,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":1682,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":1635,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":1588,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":613,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":591,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":792,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1183,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":586,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":581,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":596,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":1075,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":807,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1134,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8363:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"423:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:6"},"nodeType":"YulFunctionCall","src":"433:12:6"},"nodeType":"YulExpressionStatement","src":"433:12:6"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:6"},{"body":{"nodeType":"YulBlock","src":"505:54:6","statements":[{"nodeType":"YulAssignment","src":"515:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"533:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"540:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"529:3:6"},"nodeType":"YulFunctionCall","src":"529:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"549:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"545:3:6"},"nodeType":"YulFunctionCall","src":"545:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"525:3:6"},"nodeType":"YulFunctionCall","src":"525:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"515:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"488:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"498:6:6","type":""}],"src":"457:102:6"},{"body":{"nodeType":"YulBlock","src":"593:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"610:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"613:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"603:6:6"},"nodeType":"YulFunctionCall","src":"603:88:6"},"nodeType":"YulExpressionStatement","src":"603:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"710:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"700:6:6"},"nodeType":"YulFunctionCall","src":"700:15:6"},"nodeType":"YulExpressionStatement","src":"700:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"731:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"724:6:6"},"nodeType":"YulFunctionCall","src":"724:15:6"},"nodeType":"YulExpressionStatement","src":"724:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"565:180:6"},{"body":{"nodeType":"YulBlock","src":"794:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"804:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"826:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"856:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"834:21:6"},"nodeType":"YulFunctionCall","src":"834:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:6"},"nodeType":"YulFunctionCall","src":"822:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"808:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"973:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"975:16:6"},"nodeType":"YulFunctionCall","src":"975:18:6"},"nodeType":"YulExpressionStatement","src":"975:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"916:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"928:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"913:2:6"},"nodeType":"YulFunctionCall","src":"913:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"952:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"964:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"949:2:6"},"nodeType":"YulFunctionCall","src":"949:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"910:2:6"},"nodeType":"YulFunctionCall","src":"910:62:6"},"nodeType":"YulIf","src":"907:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1011:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1015:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1004:6:6"},"nodeType":"YulFunctionCall","src":"1004:22:6"},"nodeType":"YulExpressionStatement","src":"1004:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"780:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"788:4:6","type":""}],"src":"751:281:6"},{"body":{"nodeType":"YulBlock","src":"1079:88:6","statements":[{"nodeType":"YulAssignment","src":"1089:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1099:18:6"},"nodeType":"YulFunctionCall","src":"1099:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1089:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1148:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"1156:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1128:19:6"},"nodeType":"YulFunctionCall","src":"1128:33:6"},"nodeType":"YulExpressionStatement","src":"1128:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1063:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1072:6:6","type":""}],"src":"1038:129:6"},{"body":{"nodeType":"YulBlock","src":"1255:229:6","statements":[{"body":{"nodeType":"YulBlock","src":"1360:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1362:16:6"},"nodeType":"YulFunctionCall","src":"1362:18:6"},"nodeType":"YulExpressionStatement","src":"1362:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1332:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1340:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1329:2:6"},"nodeType":"YulFunctionCall","src":"1329:30:6"},"nodeType":"YulIf","src":"1326:56:6"},{"nodeType":"YulAssignment","src":"1392:25:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1404:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1412:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1400:3:6"},"nodeType":"YulFunctionCall","src":"1400:17:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1392:4:6"}]},{"nodeType":"YulAssignment","src":"1454:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1466:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"1472:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1462:3:6"},"nodeType":"YulFunctionCall","src":"1462:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1454:4:6"}]}]},"name":"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1239:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1250:4:6","type":""}],"src":"1173:311:6"},{"body":{"nodeType":"YulBlock","src":"1579:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1596:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1599:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1589:6:6"},"nodeType":"YulFunctionCall","src":"1589:12:6"},"nodeType":"YulExpressionStatement","src":"1589:12:6"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1490:117:6"},{"body":{"nodeType":"YulBlock","src":"1658:32:6","statements":[{"nodeType":"YulAssignment","src":"1668:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1679:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1668:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1640:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1650:7:6","type":""}],"src":"1613:77:6"},{"body":{"nodeType":"YulBlock","src":"1739:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"1796:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1805:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1808:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1798:6:6"},"nodeType":"YulFunctionCall","src":"1798:12:6"},"nodeType":"YulExpressionStatement","src":"1798:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1762:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1787:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1769:17:6"},"nodeType":"YulFunctionCall","src":"1769:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1759:2:6"},"nodeType":"YulFunctionCall","src":"1759:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1752:6:6"},"nodeType":"YulFunctionCall","src":"1752:43:6"},"nodeType":"YulIf","src":"1749:63:6"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1732:5:6","type":""}],"src":"1696:122:6"},{"body":{"nodeType":"YulBlock","src":"1887:80:6","statements":[{"nodeType":"YulAssignment","src":"1897:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1912:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1906:5:6"},"nodeType":"YulFunctionCall","src":"1906:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1897:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1955:5:6"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1928:26:6"},"nodeType":"YulFunctionCall","src":"1928:33:6"},"nodeType":"YulExpressionStatement","src":"1928:33:6"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1865:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1873:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1881:5:6","type":""}],"src":"1824:143:6"},{"body":{"nodeType":"YulBlock","src":"2103:619:6","statements":[{"nodeType":"YulAssignment","src":"2113:90:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2195:6:6"}],"functionName":{"name":"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2138:56:6"},"nodeType":"YulFunctionCall","src":"2138:64:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2122:15:6"},"nodeType":"YulFunctionCall","src":"2122:81:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2113:5:6"}]},{"nodeType":"YulVariableDeclaration","src":"2212:16:6","value":{"name":"array","nodeType":"YulIdentifier","src":"2223:5:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2216:3:6","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2245:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"2252:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2238:6:6"},"nodeType":"YulFunctionCall","src":"2238:21:6"},"nodeType":"YulExpressionStatement","src":"2238:21:6"},{"nodeType":"YulAssignment","src":"2268:23:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2279:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2286:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2275:3:6"},"nodeType":"YulFunctionCall","src":"2275:16:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2268:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"2301:44:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2319:6:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2331:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2339:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2327:3:6"},"nodeType":"YulFunctionCall","src":"2327:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2315:3:6"},"nodeType":"YulFunctionCall","src":"2315:30:6"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2305:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2373:103:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2387:77:6"},"nodeType":"YulFunctionCall","src":"2387:79:6"},"nodeType":"YulExpressionStatement","src":"2387:79:6"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2360:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"2368:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2357:2:6"},"nodeType":"YulFunctionCall","src":"2357:15:6"},"nodeType":"YulIf","src":"2354:122:6"},{"body":{"nodeType":"YulBlock","src":"2561:155:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2576:21:6","value":{"name":"src","nodeType":"YulIdentifier","src":"2594:3:6"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"2580:10:6","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2618:3:6"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"2655:10:6"},{"name":"end","nodeType":"YulIdentifier","src":"2667:3:6"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2623:31:6"},"nodeType":"YulFunctionCall","src":"2623:48:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2611:6:6"},"nodeType":"YulFunctionCall","src":"2611:61:6"},"nodeType":"YulExpressionStatement","src":"2611:61:6"},{"nodeType":"YulAssignment","src":"2685:21:6","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2696:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2701:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2692:3:6"},"nodeType":"YulFunctionCall","src":"2692:14:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2685:3:6"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2514:3:6"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2519:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2511:2:6"},"nodeType":"YulFunctionCall","src":"2511:15:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2527:25:6","statements":[{"nodeType":"YulAssignment","src":"2529:21:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2540:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2545:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:6"},"nodeType":"YulFunctionCall","src":"2536:14:6"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2529:3:6"}]}]},"pre":{"nodeType":"YulBlock","src":"2489:21:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2491:17:6","value":{"name":"offset","nodeType":"YulIdentifier","src":"2502:6:6"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2495:3:6","type":""}]}]},"src":"2485:231:6"}]},"name":"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2073:6:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"2081:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2089:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2097:5:6","type":""}],"src":"1990:732:6"},{"body":{"nodeType":"YulBlock","src":"2833:297:6","statements":[{"body":{"nodeType":"YulBlock","src":"2882:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2884:77:6"},"nodeType":"YulFunctionCall","src":"2884:79:6"},"nodeType":"YulExpressionStatement","src":"2884:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2861:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2869:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2857:3:6"},"nodeType":"YulFunctionCall","src":"2857:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"2876:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2853:3:6"},"nodeType":"YulFunctionCall","src":"2853:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2846:6:6"},"nodeType":"YulFunctionCall","src":"2846:35:6"},"nodeType":"YulIf","src":"2843:122:6"},{"nodeType":"YulVariableDeclaration","src":"2974:27:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2994:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2988:5:6"},"nodeType":"YulFunctionCall","src":"2988:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2978:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3010:114:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3097:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3105:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3093:3:6"},"nodeType":"YulFunctionCall","src":"3093:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"3112:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"3120:3:6"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3019:73:6"},"nodeType":"YulFunctionCall","src":"3019:105:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3010:5:6"}]}]},"name":"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2811:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2819:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2827:5:6","type":""}],"src":"2745:385:6"},{"body":{"nodeType":"YulBlock","src":"3181:81:6","statements":[{"nodeType":"YulAssignment","src":"3191:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3206:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3213:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3202:3:6"},"nodeType":"YulFunctionCall","src":"3202:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3191:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3163:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3173:7:6","type":""}],"src":"3136:126:6"},{"body":{"nodeType":"YulBlock","src":"3313:51:6","statements":[{"nodeType":"YulAssignment","src":"3323:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3352:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3334:17:6"},"nodeType":"YulFunctionCall","src":"3334:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3323:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3295:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3305:7:6","type":""}],"src":"3268:96:6"},{"body":{"nodeType":"YulBlock","src":"3413:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"3470:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3479:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3482:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3472:6:6"},"nodeType":"YulFunctionCall","src":"3472:12:6"},"nodeType":"YulExpressionStatement","src":"3472:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3436:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3461:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3443:17:6"},"nodeType":"YulFunctionCall","src":"3443:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3433:2:6"},"nodeType":"YulFunctionCall","src":"3433:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3426:6:6"},"nodeType":"YulFunctionCall","src":"3426:43:6"},"nodeType":"YulIf","src":"3423:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3406:5:6","type":""}],"src":"3370:122:6"},{"body":{"nodeType":"YulBlock","src":"3561:80:6","statements":[{"nodeType":"YulAssignment","src":"3571:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3586:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3580:5:6"},"nodeType":"YulFunctionCall","src":"3580:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3571:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3629:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3602:26:6"},"nodeType":"YulFunctionCall","src":"3602:33:6"},"nodeType":"YulExpressionStatement","src":"3602:33:6"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3539:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"3547:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3555:5:6","type":""}],"src":"3498:143:6"},{"body":{"nodeType":"YulBlock","src":"3692:32:6","statements":[{"nodeType":"YulAssignment","src":"3702:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"3713:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3702:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3674:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3684:7:6","type":""}],"src":"3647:77:6"},{"body":{"nodeType":"YulBlock","src":"3773:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"3830:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3839:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3842:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3832:6:6"},"nodeType":"YulFunctionCall","src":"3832:12:6"},"nodeType":"YulExpressionStatement","src":"3832:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3796:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3821:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3803:17:6"},"nodeType":"YulFunctionCall","src":"3803:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3793:2:6"},"nodeType":"YulFunctionCall","src":"3793:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3786:6:6"},"nodeType":"YulFunctionCall","src":"3786:43:6"},"nodeType":"YulIf","src":"3783:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3766:5:6","type":""}],"src":"3730:122:6"},{"body":{"nodeType":"YulBlock","src":"3921:80:6","statements":[{"nodeType":"YulAssignment","src":"3931:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3946:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3940:5:6"},"nodeType":"YulFunctionCall","src":"3940:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3931:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3989:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3962:26:6"},"nodeType":"YulFunctionCall","src":"3962:33:6"},"nodeType":"YulExpressionStatement","src":"3962:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3899:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"3907:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3915:5:6","type":""}],"src":"3858:143:6"},{"body":{"nodeType":"YulBlock","src":"4096:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4113:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4116:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4106:6:6"},"nodeType":"YulFunctionCall","src":"4106:12:6"},"nodeType":"YulExpressionStatement","src":"4106:12:6"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"4007:117:6"},{"body":{"nodeType":"YulBlock","src":"4197:241:6","statements":[{"body":{"nodeType":"YulBlock","src":"4302:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4304:16:6"},"nodeType":"YulFunctionCall","src":"4304:18:6"},"nodeType":"YulExpressionStatement","src":"4304:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4274:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4282:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4271:2:6"},"nodeType":"YulFunctionCall","src":"4271:30:6"},"nodeType":"YulIf","src":"4268:56:6"},{"nodeType":"YulAssignment","src":"4334:37:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4364:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4342:21:6"},"nodeType":"YulFunctionCall","src":"4342:29:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4334:4:6"}]},{"nodeType":"YulAssignment","src":"4408:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"4420:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"4426:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4416:3:6"},"nodeType":"YulFunctionCall","src":"4416:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4408:4:6"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4181:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4192:4:6","type":""}],"src":"4130:308:6"},{"body":{"nodeType":"YulBlock","src":"4506:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4516:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4525:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4520:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4585:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4610:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"4615:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4606:3:6"},"nodeType":"YulFunctionCall","src":"4606:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4629:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"4634:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4625:3:6"},"nodeType":"YulFunctionCall","src":"4625:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4619:5:6"},"nodeType":"YulFunctionCall","src":"4619:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4599:6:6"},"nodeType":"YulFunctionCall","src":"4599:39:6"},"nodeType":"YulExpressionStatement","src":"4599:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4546:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"4549:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4543:2:6"},"nodeType":"YulFunctionCall","src":"4543:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4557:19:6","statements":[{"nodeType":"YulAssignment","src":"4559:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4568:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"4571:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4564:3:6"},"nodeType":"YulFunctionCall","src":"4564:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4559:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"4539:3:6","statements":[]},"src":"4535:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4668:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4673:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4664:3:6"},"nodeType":"YulFunctionCall","src":"4664:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"4682:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4657:6:6"},"nodeType":"YulFunctionCall","src":"4657:27:6"},"nodeType":"YulExpressionStatement","src":"4657:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4488:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4493:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"4498:6:6","type":""}],"src":"4444:246:6"},{"body":{"nodeType":"YulBlock","src":"4791:339:6","statements":[{"nodeType":"YulAssignment","src":"4801:75:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4868:6:6"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4826:41:6"},"nodeType":"YulFunctionCall","src":"4826:49:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4810:15:6"},"nodeType":"YulFunctionCall","src":"4810:66:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4801:5:6"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4892:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"4899:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4885:6:6"},"nodeType":"YulFunctionCall","src":"4885:21:6"},"nodeType":"YulExpressionStatement","src":"4885:21:6"},{"nodeType":"YulVariableDeclaration","src":"4915:27:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4930:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4937:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4926:3:6"},"nodeType":"YulFunctionCall","src":"4926:16:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4919:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4980:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"4982:77:6"},"nodeType":"YulFunctionCall","src":"4982:79:6"},"nodeType":"YulExpressionStatement","src":"4982:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4961:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4966:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4957:3:6"},"nodeType":"YulFunctionCall","src":"4957:16:6"},{"name":"end","nodeType":"YulIdentifier","src":"4975:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4954:2:6"},"nodeType":"YulFunctionCall","src":"4954:25:6"},"nodeType":"YulIf","src":"4951:112:6"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5107:3:6"},{"name":"dst","nodeType":"YulIdentifier","src":"5112:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"5117:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5072:34:6"},"nodeType":"YulFunctionCall","src":"5072:52:6"},"nodeType":"YulExpressionStatement","src":"5072:52:6"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4764:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"4769:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"4777:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4785:5:6","type":""}],"src":"4696:434:6"},{"body":{"nodeType":"YulBlock","src":"5223:282:6","statements":[{"body":{"nodeType":"YulBlock","src":"5272:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5274:77:6"},"nodeType":"YulFunctionCall","src":"5274:79:6"},"nodeType":"YulExpressionStatement","src":"5274:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5251:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5259:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5247:3:6"},"nodeType":"YulFunctionCall","src":"5247:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"5266:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5243:3:6"},"nodeType":"YulFunctionCall","src":"5243:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5236:6:6"},"nodeType":"YulFunctionCall","src":"5236:35:6"},"nodeType":"YulIf","src":"5233:122:6"},{"nodeType":"YulVariableDeclaration","src":"5364:27:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5384:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5378:5:6"},"nodeType":"YulFunctionCall","src":"5378:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5368:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5400:99:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5472:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5480:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5468:3:6"},"nodeType":"YulFunctionCall","src":"5468:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"5487:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"5495:3:6"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"5409:58:6"},"nodeType":"YulFunctionCall","src":"5409:90:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5400:5:6"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5201:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"5209:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5217:5:6","type":""}],"src":"5150:355:6"},{"body":{"nodeType":"YulBlock","src":"5674:1033:6","statements":[{"body":{"nodeType":"YulBlock","src":"5721:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5723:77:6"},"nodeType":"YulFunctionCall","src":"5723:79:6"},"nodeType":"YulExpressionStatement","src":"5723:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5695:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5704:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5691:3:6"},"nodeType":"YulFunctionCall","src":"5691:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5716:3:6","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5687:3:6"},"nodeType":"YulFunctionCall","src":"5687:33:6"},"nodeType":"YulIf","src":"5684:120:6"},{"nodeType":"YulBlock","src":"5814:306:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5829:38:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5853:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5864:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5849:3:6"},"nodeType":"YulFunctionCall","src":"5849:17:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5843:5:6"},"nodeType":"YulFunctionCall","src":"5843:24:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5833:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5914:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5916:77:6"},"nodeType":"YulFunctionCall","src":"5916:79:6"},"nodeType":"YulExpressionStatement","src":"5916:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5886:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5894:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5883:2:6"},"nodeType":"YulFunctionCall","src":"5883:30:6"},"nodeType":"YulIf","src":"5880:117:6"},{"nodeType":"YulAssignment","src":"6011:99:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6082:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"6093:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6078:3:6"},"nodeType":"YulFunctionCall","src":"6078:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6102:7:6"}],"functionName":{"name":"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"6021:56:6"},"nodeType":"YulFunctionCall","src":"6021:89:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6011:6:6"}]}]},{"nodeType":"YulBlock","src":"6130:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6145:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6159:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6149:6:6","type":""}]},{"nodeType":"YulAssignment","src":"6175:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6221:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"6232:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6217:3:6"},"nodeType":"YulFunctionCall","src":"6217:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6241:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"6185:31:6"},"nodeType":"YulFunctionCall","src":"6185:64:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6175:6:6"}]}]},{"nodeType":"YulBlock","src":"6269:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6284:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6298:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6288:6:6","type":""}]},{"nodeType":"YulAssignment","src":"6314:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6360:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"6371:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6356:3:6"},"nodeType":"YulFunctionCall","src":"6356:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6380:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"6324:31:6"},"nodeType":"YulFunctionCall","src":"6324:64:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6314:6:6"}]}]},{"nodeType":"YulBlock","src":"6408:292:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6423:39:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6447:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6458:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6443:3:6"},"nodeType":"YulFunctionCall","src":"6443:18:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6437:5:6"},"nodeType":"YulFunctionCall","src":"6437:25:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6427:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6509:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6511:77:6"},"nodeType":"YulFunctionCall","src":"6511:79:6"},"nodeType":"YulExpressionStatement","src":"6511:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6481:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6489:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6478:2:6"},"nodeType":"YulFunctionCall","src":"6478:30:6"},"nodeType":"YulIf","src":"6475:117:6"},{"nodeType":"YulAssignment","src":"6606:84:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6662:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"6673:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6658:3:6"},"nodeType":"YulFunctionCall","src":"6658:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6682:7:6"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"6616:41:6"},"nodeType":"YulFunctionCall","src":"6616:74:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6606:6:6"}]}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_addresst_uint256t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5620:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5631:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5643:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5651:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5659:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5667:6:6","type":""}],"src":"5511:1196:6"},{"body":{"nodeType":"YulBlock","src":"6741:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6758:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6761:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6751:6:6"},"nodeType":"YulFunctionCall","src":"6751:88:6"},"nodeType":"YulExpressionStatement","src":"6751:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6855:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6858:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6848:6:6"},"nodeType":"YulFunctionCall","src":"6848:15:6"},"nodeType":"YulExpressionStatement","src":"6848:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6879:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6882:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6872:6:6"},"nodeType":"YulFunctionCall","src":"6872:15:6"},"nodeType":"YulExpressionStatement","src":"6872:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6713:180:6"},{"body":{"nodeType":"YulBlock","src":"6927:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6944:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6947:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6937:6:6"},"nodeType":"YulFunctionCall","src":"6937:88:6"},"nodeType":"YulExpressionStatement","src":"6937:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7041:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7044:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7034:6:6"},"nodeType":"YulFunctionCall","src":"7034:15:6"},"nodeType":"YulExpressionStatement","src":"7034:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7065:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7068:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7058:6:6"},"nodeType":"YulFunctionCall","src":"7058:15:6"},"nodeType":"YulExpressionStatement","src":"7058:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6899:180:6"},{"body":{"nodeType":"YulBlock","src":"7128:190:6","statements":[{"nodeType":"YulAssignment","src":"7138:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7165:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7147:17:6"},"nodeType":"YulFunctionCall","src":"7147:24:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7138:5:6"}]},{"body":{"nodeType":"YulBlock","src":"7261:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7263:16:6"},"nodeType":"YulFunctionCall","src":"7263:18:6"},"nodeType":"YulExpressionStatement","src":"7263:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7186:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7193:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7183:2:6"},"nodeType":"YulFunctionCall","src":"7183:77:6"},"nodeType":"YulIf","src":"7180:103:6"},{"nodeType":"YulAssignment","src":"7292:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7303:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7310:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7299:3:6"},"nodeType":"YulFunctionCall","src":"7299:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"7292:3:6"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7114:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"7124:3:6","type":""}],"src":"7085:233:6"},{"body":{"nodeType":"YulBlock","src":"7389:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7406:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7429:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"7411:17:6"},"nodeType":"YulFunctionCall","src":"7411:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7399:6:6"},"nodeType":"YulFunctionCall","src":"7399:37:6"},"nodeType":"YulExpressionStatement","src":"7399:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7377:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7384:3:6","type":""}],"src":"7324:118:6"},{"body":{"nodeType":"YulBlock","src":"7513:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7530:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7553:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7535:17:6"},"nodeType":"YulFunctionCall","src":"7535:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7523:6:6"},"nodeType":"YulFunctionCall","src":"7523:37:6"},"nodeType":"YulExpressionStatement","src":"7523:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7501:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7508:3:6","type":""}],"src":"7448:118:6"},{"body":{"nodeType":"YulBlock","src":"7637:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7654:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7677:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7659:17:6"},"nodeType":"YulFunctionCall","src":"7659:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7647:6:6"},"nodeType":"YulFunctionCall","src":"7647:37:6"},"nodeType":"YulExpressionStatement","src":"7647:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7625:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7632:3:6","type":""}],"src":"7572:118:6"},{"body":{"nodeType":"YulBlock","src":"7906:454:6","statements":[{"nodeType":"YulAssignment","src":"7916:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7928:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7939:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7924:3:6"},"nodeType":"YulFunctionCall","src":"7924:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7916:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7997:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8010:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8021:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8006:3:6"},"nodeType":"YulFunctionCall","src":"8006:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"7953:43:6"},"nodeType":"YulFunctionCall","src":"7953:71:6"},"nodeType":"YulExpressionStatement","src":"7953:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8078:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8091:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8102:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8087:3:6"},"nodeType":"YulFunctionCall","src":"8087:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8034:43:6"},"nodeType":"YulFunctionCall","src":"8034:72:6"},"nodeType":"YulExpressionStatement","src":"8034:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8160:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8173:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8184:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8169:3:6"},"nodeType":"YulFunctionCall","src":"8169:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8116:43:6"},"nodeType":"YulFunctionCall","src":"8116:72:6"},"nodeType":"YulExpressionStatement","src":"8116:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8242:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8255:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8266:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8251:3:6"},"nodeType":"YulFunctionCall","src":"8251:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8198:43:6"},"nodeType":"YulFunctionCall","src":"8198:72:6"},"nodeType":"YulExpressionStatement","src":"8198:72:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8324:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8337:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8348:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8333:3:6"},"nodeType":"YulFunctionCall","src":"8333:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8280:43:6"},"nodeType":"YulFunctionCall","src":"8280:73:6"},"nodeType":"YulExpressionStatement","src":"8280:73:6"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7846:9:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7858:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7866:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7874:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7882:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7890:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7901:4:6","type":""}],"src":"7696:664:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // bytes32[]\n    function abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_bytes32_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_addresst_uint256t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001d9438038062001d94833981810160405281019062000038919062000584565b806040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000d8818484620001ff60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050508273ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508160008190555060005b8451811015620001f457600160405180604001604052808784815181106200018d576200018c62000634565b5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620001eb9062000692565b91505062000160565b50505050506200076f565b600083838346306040516020016200021c95949392919062000712565b6040516020818303038152906040528051906020012090509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200029f8262000254565b810181811067ffffffffffffffff82111715620002c157620002c062000265565b5b80604052505050565b6000620002d66200023b565b9050620002e4828262000294565b919050565b600067ffffffffffffffff82111562000307576200030662000265565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b62000332816200031d565b81146200033e57600080fd5b50565b600081519050620003528162000327565b92915050565b60006200036f6200036984620002e9565b620002ca565b9050808382526020820190506020840283018581111562000395576200039462000318565b5b835b81811015620003c25780620003ad888262000341565b84526020840193505060208101905062000397565b5050509392505050565b600082601f830112620003e457620003e36200024f565b5b8151620003f684826020860162000358565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042c82620003ff565b9050919050565b6200043e816200041f565b81146200044a57600080fd5b50565b6000815190506200045e8162000433565b92915050565b6000819050919050565b620004798162000464565b81146200048557600080fd5b50565b60008151905062000499816200046e565b92915050565b600080fd5b600067ffffffffffffffff821115620004c257620004c162000265565b5b620004cd8262000254565b9050602081019050919050565b60005b83811015620004fa578082015181840152602081019050620004dd565b60008484015250505050565b60006200051d6200051784620004a4565b620002ca565b9050828152602081018484840111156200053c576200053b6200049f565b5b62000549848285620004da565b509392505050565b600082601f8301126200056957620005686200024f565b5b81516200057b84826020860162000506565b91505092915050565b60008060008060808587031215620005a157620005a062000245565b5b600085015167ffffffffffffffff811115620005c257620005c16200024a565b5b620005d087828801620003cc565b9450506020620005e3878288016200044d565b9350506040620005f68782880162000488565b925050606085015167ffffffffffffffff8111156200061a57620006196200024a565b5b620006288782880162000551565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200069f8262000464565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620006d457620006d362000663565b5b600182019050919050565b620006ea816200031d565b82525050565b620006fb8162000464565b82525050565b6200070c816200041f565b82525050565b600060a082019050620007296000830188620006df565b620007386020830187620006df565b620007476040830186620006df565b620007566060830185620006f0565b62000765608083018462000701565b9695505050505050565b60805160a05160c05160e0516101005161012051610140516115c3620007d16000396000818161047901526106ff0152600061093f015260006109810152600061096001526000610895015260006108eb0152600061091401526115c36000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe001461014a578063a72003511461017a578063b384abef146101aa578063c07473f6146101c6578063e2ba53f0146101f65761009e565b8063013cf08b146100a357806304f81b35146100d45780632a8cd29e146100f057806355a373d61461010e578063609ff1bd1461012c575b600080fd5b6100bd60048036038101906100b89190610cb1565b610214565b6040516100cb929190610d06565b60405180910390f35b6100ee60048036038101906100e99190610d94565b610248565b005b6100f8610471565b6040516101059190610e36565b60405180910390f35b610116610477565b6040516101239190610ed0565b60405180910390f35b61013461049b565b6040516101419190610e36565b60405180910390f35b610164600480360381019061015f9190610f29565b610523565b6040516101719190610e36565b60405180910390f35b610194600480360381019061018f9190610f29565b610573565b6040516101a19190610e36565b60405180910390f35b6101c460048036038101906101bf9190610f56565b61058b565b005b6101e060048036038101906101db9190610f29565b6106bb565b6040516101ed9190610e36565b60405180910390f35b6101fe6107ac565b60405161020b9190610f96565b60405180910390f35b6001818154811061022457600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b6000610253336106bb565b90508681101561029c5786816040517f29eed8ef000000000000000000000000000000000000000000000000000000008152600401610293929190610fb1565b60405180910390fd5b844211156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690611037565b60405180910390fd5b600061034361033b7f28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa05328b8b8b8b604051602001610320959493929190611057565b604051602081830303815290604052805190602001206107e0565b8686866107fa565b905061034e81610825565b871461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906110f6565b60405180910390fd5b87600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103de9190611145565b925050819055508760018a815481106103fa576103f9611179565b5b9060005260206000209060020201600101600082825461041a9190611145565b9250508190555087898273ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050505050505050565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000905060005b60018054905081101561051e5781600182815481106104c7576104c6611179565b5b906000526020600020906002020160010154111561050b57600181815481106104f3576104f2611179565b5b90600052602060002090600202016001015491508092505b8080610516906111a8565b9150506104a5565b505090565b600061056c600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610883565b9050919050565b60026020528060005260406000206000915090505481565b6000610596336106bb565b9050818110156105df5781816040517f29eed8ef0000000000000000000000000000000000000000000000000000000081526004016105d6929190610fb1565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062e9190611145565b92505081905550816001848154811061064a57610649611179565b5b9060005260206000209060020201600101600082825461066a9190611145565b9250508190555081833373ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b815260040161075a9291906111ff565b602060405180830381865afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b919061123d565b6107a5919061126a565b9050919050565b600060016107b861049b565b815481106107c9576107c8611179565b5b906000526020600020906002020160000154905090565b60006107f36107ed610891565b836109ab565b9050919050565b600080600061080b878787876109de565b9150915061081881610ac0565b8192505050949350505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061087281610883565b915061087d81610c26565b50919050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561090d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561093a577f000000000000000000000000000000000000000000000000000000000000000090506109a8565b6109a57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c3c565b90505b90565b600082826040516020016109c0929190611316565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a19576000600391509150610ab7565b600060018787878760405160008152602001604052604051610a3e949392919061135c565b6020604051602081039080840390855afa158015610a60573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57600060019250925050610ab7565b80600092509250505b94509492505050565b60006004811115610ad457610ad36113a1565b5b816004811115610ae757610ae66113a1565b5b0315610c235760016004811115610b0157610b006113a1565b5b816004811115610b1457610b136113a1565b5b03610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b9061141c565b60405180910390fd5b60026004811115610b6857610b676113a1565b5b816004811115610b7b57610b7a6113a1565b5b03610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611488565b60405180910390fd5b60036004811115610bcf57610bce6113a1565b5b816004811115610be257610be16113a1565b5b03610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c199061151a565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b60008383834630604051602001610c5795949392919061153a565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b6000819050919050565b610c8e81610c7b565b8114610c9957600080fd5b50565b600081359050610cab81610c85565b92915050565b600060208284031215610cc757610cc6610c76565b5b6000610cd584828501610c9c565b91505092915050565b6000819050919050565b610cf181610cde565b82525050565b610d0081610c7b565b82525050565b6000604082019050610d1b6000830185610ce8565b610d286020830184610cf7565b9392505050565b600060ff82169050919050565b610d4581610d2f565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b610d7181610cde565b8114610d7c57600080fd5b50565b600081359050610d8e81610d68565b92915050565b600080600080600080600060e0888a031215610db357610db2610c76565b5b6000610dc18a828b01610c9c565b9750506020610dd28a828b01610c9c565b9650506040610de38a828b01610c9c565b9550506060610df48a828b01610c9c565b9450506080610e058a828b01610d53565b93505060a0610e168a828b01610d7f565b92505060c0610e278a828b01610d7f565b91505092959891949750929550565b6000602082019050610e4b6000830184610cf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e96610e91610e8c84610e51565b610e71565b610e51565b9050919050565b6000610ea882610e7b565b9050919050565b6000610eba82610e9d565b9050919050565b610eca81610eaf565b82525050565b6000602082019050610ee56000830184610ec1565b92915050565b6000610ef682610e51565b9050919050565b610f0681610eeb565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610c76565b5b6000610f4d84828501610f14565b91505092915050565b60008060408385031215610f6d57610f6c610c76565b5b6000610f7b85828601610c9c565b9250506020610f8c85828601610c9c565b9150509250929050565b6000602082019050610fab6000830184610ce8565b92915050565b6000604082019050610fc66000830185610cf7565b610fd36020830184610cf7565b9392505050565b600082825260208201905092915050565b7f5369676e61747572652065787069726564000000000000000000000000000000600082015250565b6000611021601183610fda565b915061102c82610feb565b602082019050919050565b6000602082019050818103600083015261105081611014565b9050919050565b600060a08201905061106c6000830188610ce8565b6110796020830187610cf7565b6110866040830186610cf7565b6110936060830185610cf7565b6110a06080830184610cf7565b9695505050505050565b7f496e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b60006110e0600d83610fda565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115082610c7b565b915061115b83610c7b565b925082820190508082111561117357611172611116565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111b382610c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e5576111e4611116565b5b600182019050919050565b6111f981610eeb565b82525050565b600060408201905061121460008301856111f0565b6112216020830184610cf7565b9392505050565b60008151905061123781610c85565b92915050565b60006020828403121561125357611252610c76565b5b600061126184828501611228565b91505092915050565b600061127582610c7b565b915061128083610c7b565b925082820390508181111561129857611297611116565b5b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006112df60028361129e565b91506112ea826112a9565b600282019050919050565b6000819050919050565b61131061130b82610cde565b6112f5565b82525050565b6000611321826112d2565b915061132d82856112ff565b60208201915061133d82846112ff565b6020820191508190509392505050565b61135681610d2f565b82525050565b60006080820190506113716000830187610ce8565b61137e602083018661134d565b61138b6040830185610ce8565b6113986060830184610ce8565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611406601883610fda565b9150611411826113d0565b602082019050919050565b60006020820190508181036000830152611435816113f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611472601f83610fda565b915061147d8261143c565b602082019050919050565b600060208201905081810360008301526114a181611465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611504602283610fda565b915061150f826114a8565b604082019050919050565b60006020820190508181036000830152611533816114f7565b9050919050565b600060a08201905061154f6000830188610ce8565b61155c6020830187610ce8565b6115696040830186610ce8565b6115766060830185610cf7565b61158360808301846111f0565b969550505050505056fea2646970667358221220252f42aaafe07c5a5f5dd4277fab65a3d40db52f84d1609094897a566061e27764736f6c63430008110033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1D94 CODESIZE SUB DUP1 PUSH3 0x1D94 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x584 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 POP DUP3 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH3 0xD8 DUP2 DUP5 DUP5 PUSH3 0x1FF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH3 0x1F4 JUMPI PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x18D JUMPI PUSH3 0x18C PUSH3 0x634 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP DUP1 DUP1 PUSH3 0x1EB SWAP1 PUSH3 0x692 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x160 JUMP JUMPDEST POP POP POP POP POP PUSH3 0x76F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x21C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x29F DUP3 PUSH3 0x254 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2C1 JUMPI PUSH3 0x2C0 PUSH3 0x265 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D6 PUSH3 0x23B JUMP JUMPDEST SWAP1 POP PUSH3 0x2E4 DUP3 DUP3 PUSH3 0x294 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x307 JUMPI PUSH3 0x306 PUSH3 0x265 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x332 DUP2 PUSH3 0x31D JUMP JUMPDEST DUP2 EQ PUSH3 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x352 DUP2 PUSH3 0x327 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x36F PUSH3 0x369 DUP5 PUSH3 0x2E9 JUMP JUMPDEST PUSH3 0x2CA JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x395 JUMPI PUSH3 0x394 PUSH3 0x318 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3C2 JUMPI DUP1 PUSH3 0x3AD DUP9 DUP3 PUSH3 0x341 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x397 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3E4 JUMPI PUSH3 0x3E3 PUSH3 0x24F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3F6 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x358 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42C DUP3 PUSH3 0x3FF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x43E DUP2 PUSH3 0x41F JUMP JUMPDEST DUP2 EQ PUSH3 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x45E DUP2 PUSH3 0x433 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x479 DUP2 PUSH3 0x464 JUMP JUMPDEST DUP2 EQ PUSH3 0x485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x499 DUP2 PUSH3 0x46E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4C2 JUMPI PUSH3 0x4C1 PUSH3 0x265 JUMP JUMPDEST JUMPDEST PUSH3 0x4CD DUP3 PUSH3 0x254 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4FA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4DD JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x51D PUSH3 0x517 DUP5 PUSH3 0x4A4 JUMP JUMPDEST PUSH3 0x2CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x53C JUMPI PUSH3 0x53B PUSH3 0x49F JUMP JUMPDEST JUMPDEST PUSH3 0x549 DUP5 DUP3 DUP6 PUSH3 0x4DA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x569 JUMPI PUSH3 0x568 PUSH3 0x24F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x57B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x506 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x5A1 JUMPI PUSH3 0x5A0 PUSH3 0x245 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5C2 JUMPI PUSH3 0x5C1 PUSH3 0x24A JUMP JUMPDEST JUMPDEST PUSH3 0x5D0 DUP8 DUP3 DUP9 ADD PUSH3 0x3CC JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x5E3 DUP8 DUP3 DUP9 ADD PUSH3 0x44D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x5F6 DUP8 DUP3 DUP9 ADD PUSH3 0x488 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x61A JUMPI PUSH3 0x619 PUSH3 0x24A JUMP JUMPDEST JUMPDEST PUSH3 0x628 DUP8 DUP3 DUP9 ADD PUSH3 0x551 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x69F DUP3 PUSH3 0x464 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x6D4 JUMPI PUSH3 0x6D3 PUSH3 0x663 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x6EA DUP2 PUSH3 0x31D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x6FB DUP2 PUSH3 0x464 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x70C DUP2 PUSH3 0x41F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH3 0x729 PUSH1 0x0 DUP4 ADD DUP9 PUSH3 0x6DF JUMP JUMPDEST PUSH3 0x738 PUSH1 0x20 DUP4 ADD DUP8 PUSH3 0x6DF JUMP JUMPDEST PUSH3 0x747 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0x6DF JUMP JUMPDEST PUSH3 0x756 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x6F0 JUMP JUMPDEST PUSH3 0x765 PUSH1 0x80 DUP4 ADD DUP5 PUSH3 0x701 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x15C3 PUSH3 0x7D1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x479 ADD MSTORE PUSH2 0x6FF ADD MSTORE PUSH1 0x0 PUSH2 0x93F ADD MSTORE PUSH1 0x0 PUSH2 0x981 ADD MSTORE PUSH1 0x0 PUSH2 0x960 ADD MSTORE PUSH1 0x0 PUSH2 0x895 ADD MSTORE PUSH1 0x0 PUSH2 0x8EB ADD MSTORE PUSH1 0x0 PUSH2 0x914 ADD MSTORE PUSH2 0x15C3 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xA7200351 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xB384ABEF EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xC07473F6 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xE2BA53F0 EQ PUSH2 0x1F6 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x13CF08B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x4F81B35 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A8CD29E EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x55A373D6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x609FF1BD EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP3 SWAP2 SWAP1 PUSH2 0xD06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xD94 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x471 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x116 PUSH2 0x477 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH2 0x49B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x573 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A1 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0xF96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253 CALLER PUSH2 0x6BB JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x29C JUMPI DUP7 DUP2 PUSH1 0x40 MLOAD PUSH32 0x29EED8EF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293 SWAP3 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 TIMESTAMP GT ISZERO PUSH2 0x2DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D6 SWAP1 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x343 PUSH2 0x33B PUSH32 0x28816CE205799CD8E74A803D550B4F187A36F340DB77C90235BDF7187FAA0532 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x320 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E0 JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x7FA JUMP JUMPDEST SWAP1 POP PUSH2 0x34E DUP2 PUSH2 0x825 JUMP JUMPDEST DUP8 EQ PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x386 SWAP1 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x1 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x3FA JUMPI PUSH2 0x3F9 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 DUP10 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFD3F234C1F8E944129B26B206D98E5752AD3336A4059938B4A3E990E9588530 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x51E JUMPI DUP2 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C6 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x50B JUMPI PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4F3 JUMPI PUSH2 0x4F2 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 DUP1 PUSH2 0x516 SWAP1 PUSH2 0x11A8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4A5 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x883 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x596 CALLER PUSH2 0x6BB JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x5DF JUMPI DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x29EED8EF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D6 SWAP3 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62E SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x64A JUMPI PUSH2 0x649 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x66A SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFD3F234C1F8E944129B26B206D98E5752AD3336A4059938B4A3E990E9588530 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3A46B1A8 DUP5 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x777 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79B SWAP2 SWAP1 PUSH2 0x123D JUMP JUMPDEST PUSH2 0x7A5 SWAP2 SWAP1 PUSH2 0x126A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x7B8 PUSH2 0x49B JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x7C9 JUMPI PUSH2 0x7C8 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F3 PUSH2 0x7ED PUSH2 0x891 JUMP JUMPDEST DUP4 PUSH2 0x9AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80B DUP8 DUP8 DUP8 DUP8 PUSH2 0x9DE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x818 DUP2 PUSH2 0xAC0 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x872 DUP2 PUSH2 0x883 JUMP JUMPDEST SWAP2 POP PUSH2 0x87D DUP2 PUSH2 0xC26 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x90D JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x93A JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x9A5 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH2 0xC3C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9C0 SWAP3 SWAP2 SWAP1 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0xAB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xA3E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x135C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA60 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAAE JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xAB7 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAD4 JUMPI PUSH2 0xAD3 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE7 JUMPI PUSH2 0xAE6 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0xC23 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB01 JUMPI PUSH2 0xB00 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB14 JUMPI PUSH2 0xB13 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xB54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB4B SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB68 JUMPI PUSH2 0xB67 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB7B JUMPI PUSH2 0xB7A PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB2 SWAP1 PUSH2 0x1488 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBCF JUMPI PUSH2 0xBCE PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xC22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC19 SWAP1 PUSH2 0x151A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC57 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC8E DUP2 PUSH2 0xC7B JUMP JUMPDEST DUP2 EQ PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCAB DUP2 PUSH2 0xC85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC7 JUMPI PUSH2 0xCC6 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCD5 DUP5 DUP3 DUP6 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF1 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD00 DUP2 PUSH2 0xC7B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD1B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0xD28 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD45 DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP2 EQ PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD62 DUP2 PUSH2 0xD3C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD71 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP2 EQ PUSH2 0xD7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD8E DUP2 PUSH2 0xD68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH2 0xDB2 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDC1 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0xDD2 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0xDE3 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0xDF4 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0xE05 DUP11 DUP3 DUP12 ADD PUSH2 0xD53 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0xE16 DUP11 DUP3 DUP12 ADD PUSH2 0xD7F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0xE27 DUP11 DUP3 DUP12 ADD PUSH2 0xD7F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE4B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE96 PUSH2 0xE91 PUSH2 0xE8C DUP5 PUSH2 0xE51 JUMP JUMPDEST PUSH2 0xE71 JUMP JUMPDEST PUSH2 0xE51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA8 DUP3 PUSH2 0xE7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBA DUP3 PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xECA DUP2 PUSH2 0xEAF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEE5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF6 DUP3 PUSH2 0xE51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF06 DUP2 PUSH2 0xEEB JUMP JUMPDEST DUP2 EQ PUSH2 0xF11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF23 DUP2 PUSH2 0xEFD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF3F JUMPI PUSH2 0xF3E PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF4D DUP5 DUP3 DUP6 ADD PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF6D JUMPI PUSH2 0xF6C PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP6 DUP3 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF8C DUP6 DUP3 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFAB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCE8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFC6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0xFD3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5369676E61747572652065787069726564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1021 PUSH1 0x11 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x102C DUP3 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1050 DUP2 PUSH2 0x1014 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x106C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1079 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1086 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1093 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x10A0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x496E76616C6964206E6F6E636500000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 PUSH1 0xD DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x10EB DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x110F DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1150 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x115B DUP4 PUSH2 0xC7B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1173 JUMPI PUSH2 0x1172 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x11B3 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x11E5 JUMPI PUSH2 0x11E4 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11F9 DUP2 PUSH2 0xEEB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1214 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x11F0 JUMP JUMPDEST PUSH2 0x1221 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1237 DUP2 PUSH2 0xC85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1253 JUMPI PUSH2 0x1252 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1261 DUP5 DUP3 DUP6 ADD PUSH2 0x1228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1275 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x1280 DUP4 PUSH2 0xC7B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1298 JUMPI PUSH2 0x1297 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DF PUSH1 0x2 DUP4 PUSH2 0x129E JUMP JUMPDEST SWAP2 POP PUSH2 0x12EA DUP3 PUSH2 0x12A9 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1310 PUSH2 0x130B DUP3 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1321 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x132D DUP3 DUP6 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x133D DUP3 DUP5 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1356 DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1371 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x137E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x134D JUMP JUMPDEST PUSH2 0x138B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1398 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xCE8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1406 PUSH1 0x18 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x1411 DUP3 PUSH2 0x13D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1435 DUP2 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1472 PUSH1 0x1F DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x147D DUP3 PUSH2 0x143C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14A1 DUP2 PUSH2 0x1465 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1504 PUSH1 0x22 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x150F DUP3 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1533 DUP2 PUSH2 0x14F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x154F PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x155C PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1569 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1576 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1583 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11F0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0x2F TIMESTAMP 0xAA 0xAF 0xE0 PUSH29 0x5A5F5DD4277FAB65A3D40DB52F84D1609094897A566061E27764736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"401:3622:5:-:0;;;1099:445;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1267:4;2464:602:3;;;;;;;;;;;;;;;;;2529:18;2566:4;2550:22;;;;;;2529:43;;2582:21;2622:7;2606:25;;;;;;2582:49;;2641:16;2660:117;2641:136;;2802:10;2787:25;;;;;;2840:13;2822:31;;;;;;2882:13;2863:32;;;;;;2932:58;2954:8;2964:10;2976:13;2932:21;;;:58;;:::i;:::-;2905:85;;;;;;3023:4;3000:28;;;;;;;;;;3051:8;3038:21;;;;;;2519:547;;;2464:602;;1318:21:5::1;1288:52;;;;;;;;::::0;::::1;1370:18;1350:17;:38;;;;1403:9;1398:140;1422:13;:20;1418:1;:24;1398:140;;;1463:9;1478:48;;;;;;;;1494:13;1508:1;1494:16;;;;;;;;:::i;:::-;;;;;;;;1478:48;;;;1523:1;1478:48;;::::0;1463:64:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1444:3;;;;;:::i;:::-;;;;1398:140;;;;1099:445:::0;;;;401:3622;;3466:257:3;3606:7;3653:8;3663;3673:11;3686:13;3709:4;3642:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3632:84;;;;;;3625:91;;3466:257;;;;;:::o;7:75:6:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:102;498:6;549:2;545:7;540:2;533:5;529:14;525:28;515:38;;457:102;;;:::o;565:180::-;613:77;610:1;603:88;710:4;707:1;700:15;734:4;731:1;724:15;751:281;834:27;856:4;834:27;:::i;:::-;826:6;822:40;964:6;952:10;949:22;928:18;916:10;913:34;910:62;907:88;;;975:18;;:::i;:::-;907:88;1015:10;1011:2;1004:22;794:238;751:281;;:::o;1038:129::-;1072:6;1099:20;;:::i;:::-;1089:30;;1128:33;1156:4;1148:6;1128:33;:::i;:::-;1038:129;;;:::o;1173:311::-;1250:4;1340:18;1332:6;1329:30;1326:56;;;1362:18;;:::i;:::-;1326:56;1412:4;1404:6;1400:17;1392:25;;1472:4;1466;1462:15;1454:23;;1173:311;;;:::o;1490:117::-;1599:1;1596;1589:12;1613:77;1650:7;1679:5;1668:16;;1613:77;;;:::o;1696:122::-;1769:24;1787:5;1769:24;:::i;:::-;1762:5;1759:35;1749:63;;1808:1;1805;1798:12;1749:63;1696:122;:::o;1824:143::-;1881:5;1912:6;1906:13;1897:22;;1928:33;1955:5;1928:33;:::i;:::-;1824:143;;;;:::o;1990:732::-;2097:5;2122:81;2138:64;2195:6;2138:64;:::i;:::-;2122:81;:::i;:::-;2113:90;;2223:5;2252:6;2245:5;2238:21;2286:4;2279:5;2275:16;2268:23;;2339:4;2331:6;2327:17;2319:6;2315:30;2368:3;2360:6;2357:15;2354:122;;;2387:79;;:::i;:::-;2354:122;2502:6;2485:231;2519:6;2514:3;2511:15;2485:231;;;2594:3;2623:48;2667:3;2655:10;2623:48;:::i;:::-;2618:3;2611:61;2701:4;2696:3;2692:14;2685:21;;2561:155;2545:4;2540:3;2536:14;2529:21;;2485:231;;;2489:21;2103:619;;1990:732;;;;;:::o;2745:385::-;2827:5;2876:3;2869:4;2861:6;2857:17;2853:27;2843:122;;2884:79;;:::i;:::-;2843:122;2994:6;2988:13;3019:105;3120:3;3112:6;3105:4;3097:6;3093:17;3019:105;:::i;:::-;3010:114;;2833:297;2745:385;;;;:::o;3136:126::-;3173:7;3213:42;3206:5;3202:54;3191:65;;3136:126;;;:::o;3268:96::-;3305:7;3334:24;3352:5;3334:24;:::i;:::-;3323:35;;3268:96;;;:::o;3370:122::-;3443:24;3461:5;3443:24;:::i;:::-;3436:5;3433:35;3423:63;;3482:1;3479;3472:12;3423:63;3370:122;:::o;3498:143::-;3555:5;3586:6;3580:13;3571:22;;3602:33;3629:5;3602:33;:::i;:::-;3498:143;;;;:::o;3647:77::-;3684:7;3713:5;3702:16;;3647:77;;;:::o;3730:122::-;3803:24;3821:5;3803:24;:::i;:::-;3796:5;3793:35;3783:63;;3842:1;3839;3832:12;3783:63;3730:122;:::o;3858:143::-;3915:5;3946:6;3940:13;3931:22;;3962:33;3989:5;3962:33;:::i;:::-;3858:143;;;;:::o;4007:117::-;4116:1;4113;4106:12;4130:308;4192:4;4282:18;4274:6;4271:30;4268:56;;;4304:18;;:::i;:::-;4268:56;4342:29;4364:6;4342:29;:::i;:::-;4334:37;;4426:4;4420;4416:15;4408:23;;4130:308;;;:::o;4444:246::-;4525:1;4535:113;4549:6;4546:1;4543:13;4535:113;;;4634:1;4629:3;4625:11;4619:18;4615:1;4610:3;4606:11;4599:39;4571:2;4568:1;4564:10;4559:15;;4535:113;;;4682:1;4673:6;4668:3;4664:16;4657:27;4506:184;4444:246;;;:::o;4696:434::-;4785:5;4810:66;4826:49;4868:6;4826:49;:::i;:::-;4810:66;:::i;:::-;4801:75;;4899:6;4892:5;4885:21;4937:4;4930:5;4926:16;4975:3;4966:6;4961:3;4957:16;4954:25;4951:112;;;4982:79;;:::i;:::-;4951:112;5072:52;5117:6;5112:3;5107;5072:52;:::i;:::-;4791:339;4696:434;;;;;:::o;5150:355::-;5217:5;5266:3;5259:4;5251:6;5247:17;5243:27;5233:122;;5274:79;;:::i;:::-;5233:122;5384:6;5378:13;5409:90;5495:3;5487:6;5480:4;5472:6;5468:17;5409:90;:::i;:::-;5400:99;;5223:282;5150:355;;;;:::o;5511:1196::-;5643:6;5651;5659;5667;5716:3;5704:9;5695:7;5691:23;5687:33;5684:120;;;5723:79;;:::i;:::-;5684:120;5864:1;5853:9;5849:17;5843:24;5894:18;5886:6;5883:30;5880:117;;;5916:79;;:::i;:::-;5880:117;6021:89;6102:7;6093:6;6082:9;6078:22;6021:89;:::i;:::-;6011:99;;5814:306;6159:2;6185:64;6241:7;6232:6;6221:9;6217:22;6185:64;:::i;:::-;6175:74;;6130:129;6298:2;6324:64;6380:7;6371:6;6360:9;6356:22;6324:64;:::i;:::-;6314:74;;6269:129;6458:2;6447:9;6443:18;6437:25;6489:18;6481:6;6478:30;6475:117;;;6511:79;;:::i;:::-;6475:117;6616:74;6682:7;6673:6;6662:9;6658:22;6616:74;:::i;:::-;6606:84;;6408:292;5511:1196;;;;;;;:::o;6713:180::-;6761:77;6758:1;6751:88;6858:4;6855:1;6848:15;6882:4;6879:1;6872:15;6899:180;6947:77;6944:1;6937:88;7044:4;7041:1;7034:15;7068:4;7065:1;7058:15;7085:233;7124:3;7147:24;7165:5;7147:24;:::i;:::-;7138:33;;7193:66;7186:5;7183:77;7180:103;;7263:18;;:::i;:::-;7180:103;7310:1;7303:5;7299:13;7292:20;;7085:233;;;:::o;7324:118::-;7411:24;7429:5;7411:24;:::i;:::-;7406:3;7399:37;7324:118;;:::o;7448:::-;7535:24;7553:5;7535:24;:::i;:::-;7530:3;7523:37;7448:118;;:::o;7572:::-;7659:24;7677:5;7659:24;:::i;:::-;7654:3;7647:37;7572:118;;:::o;7696:664::-;7901:4;7939:3;7928:9;7924:19;7916:27;;7953:71;8021:1;8010:9;8006:17;7997:6;7953:71;:::i;:::-;8034:72;8102:2;8091:9;8087:18;8078:6;8034:72;:::i;:::-;8116;8184:2;8173:9;8169:18;8160:6;8116:72;:::i;:::-;8198;8266:2;8255:9;8251:18;8242:6;8198:72;:::i;:::-;8280:73;8348:3;8337:9;8333:19;8324:6;8280:73;:::i;:::-;7696:664;;;;;;;;:::o;401:3622:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_buildDomainSeparator_746":{"entryPoint":3132,"id":746,"parameterSlots":3,"returnSlots":1},"@_domainSeparatorV4_719":{"entryPoint":2193,"id":719,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_762":{"entryPoint":2016,"id":762,"parameterSlots":1,"returnSlots":1},"@_throwError_302":{"entryPoint":2752,"id":302,"parameterSlots":1,"returnSlots":0},"@_useNonce_1995":{"entryPoint":2085,"id":1995,"parameterSlots":1,"returnSlots":1},"@current_17":{"entryPoint":2179,"id":17,"parameterSlots":1,"returnSlots":1},"@increment_31":{"entryPoint":3110,"id":31,"parameterSlots":1,"returnSlots":0},"@nonces_1892":{"entryPoint":1315,"id":1892,"parameterSlots":1,"returnSlots":1},"@proposals_1673":{"entryPoint":532,"id":1673,"parameterSlots":0,"returnSlots":0},"@recover_549":{"entryPoint":2042,"id":549,"parameterSlots":4,"returnSlots":1},"@targetBlockNumber_1669":{"entryPoint":1137,"id":1669,"parameterSlots":0,"returnSlots":0},"@toTypedDataHash_608":{"entryPoint":2475,"id":608,"parameterSlots":2,"returnSlots":1},"@tokenContract_1667":{"entryPoint":1143,"id":1667,"parameterSlots":0,"returnSlots":0},"@tryRecover_516":{"entryPoint":2526,"id":516,"parameterSlots":4,"returnSlots":2},"@voteBySig_1877":{"entryPoint":584,"id":1877,"parameterSlots":7,"returnSlots":0},"@vote_1786":{"entryPoint":1419,"id":1786,"parameterSlots":2,"returnSlots":0},"@votingPowerSpent_1677":{"entryPoint":1395,"id":1677,"parameterSlots":0,"returnSlots":0},"@votingPower_1910":{"entryPoint":1723,"id":1910,"parameterSlots":1,"returnSlots":1},"@winnerName_1966":{"entryPoint":1964,"id":1966,"parameterSlots":0,"returnSlots":1},"@winningProposal_1952":{"entryPoint":1179,"id":1952,"parameterSlots":0,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3860,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":3455,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3228,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":4648,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":3411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3249,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":4669,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":3926,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":3476,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4592,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3304,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":4863,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IMyERC20Votes_$1642_to_t_address_fromStack":{"entryPoint":3777,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":5113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":5221,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568_to_t_string_memory_ptr_fromStack":{"entryPoint":4307,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4818,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":5367,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517_to_t_string_memory_ptr_fromStack":{"entryPoint":4116,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3319,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":4941,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":4886,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":4607,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3990,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":5434,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":3334,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":4183,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":4956,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IMyERC20Votes_$1642__to_t_address__fromStack_reversed":{"entryPoint":3792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5148,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5256,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4342,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5402,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4151,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3638,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":4017,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":4058,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4766,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4421,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4714,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3819,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":3294,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3665,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3195,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3375,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IMyERC20Votes_$1642_to_t_address":{"entryPoint":3759,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":3741,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":3707,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":3697,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":4520,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":4853,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4374,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":5025,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4473,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3190,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":5072,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":5180,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568":{"entryPoint":4266,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541":{"entryPoint":4777,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":5288,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517":{"entryPoint":4075,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3837,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":3432,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":3205,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":3388,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17559:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:32:6","statements":[{"nodeType":"YulAssignment","src":"389:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:77:6"},{"body":{"nodeType":"YulBlock","src":"460:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:6"},"nodeType":"YulFunctionCall","src":"519:12:6"},"nodeType":"YulExpressionStatement","src":"519:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:6"},"nodeType":"YulFunctionCall","src":"490:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:6"},"nodeType":"YulFunctionCall","src":"480:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:6"},"nodeType":"YulFunctionCall","src":"473:43:6"},"nodeType":"YulIf","src":"470:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:6","type":""}],"src":"417:122:6"},{"body":{"nodeType":"YulBlock","src":"597:87:6","statements":[{"nodeType":"YulAssignment","src":"607:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:6"},"nodeType":"YulFunctionCall","src":"616:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:6"},"nodeType":"YulFunctionCall","src":"645:33:6"},"nodeType":"YulExpressionStatement","src":"645:33:6"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:6","type":""}],"src":"545:139:6"},{"body":{"nodeType":"YulBlock","src":"756:263:6","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:6"},"nodeType":"YulFunctionCall","src":"804:79:6"},"nodeType":"YulExpressionStatement","src":"804:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:6"},"nodeType":"YulFunctionCall","src":"773:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:6"},"nodeType":"YulFunctionCall","src":"769:32:6"},"nodeType":"YulIf","src":"766:119:6"},{"nodeType":"YulBlock","src":"895:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:6","type":""}]},{"nodeType":"YulAssignment","src":"939:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:6"},"nodeType":"YulFunctionCall","src":"970:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"949:20:6"},"nodeType":"YulFunctionCall","src":"949:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:6","type":""}],"src":"690:329:6"},{"body":{"nodeType":"YulBlock","src":"1070:32:6","statements":[{"nodeType":"YulAssignment","src":"1080:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1091:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1080:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1052:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1062:7:6","type":""}],"src":"1025:77:6"},{"body":{"nodeType":"YulBlock","src":"1173:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1190:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1213:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1195:17:6"},"nodeType":"YulFunctionCall","src":"1195:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1183:6:6"},"nodeType":"YulFunctionCall","src":"1183:37:6"},"nodeType":"YulExpressionStatement","src":"1183:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1161:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1168:3:6","type":""}],"src":"1108:118:6"},{"body":{"nodeType":"YulBlock","src":"1297:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1314:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1337:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1319:17:6"},"nodeType":"YulFunctionCall","src":"1319:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1307:6:6"},"nodeType":"YulFunctionCall","src":"1307:37:6"},"nodeType":"YulExpressionStatement","src":"1307:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1285:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1292:3:6","type":""}],"src":"1232:118:6"},{"body":{"nodeType":"YulBlock","src":"1482:206:6","statements":[{"nodeType":"YulAssignment","src":"1492:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1504:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1515:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1500:3:6"},"nodeType":"YulFunctionCall","src":"1500:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1492:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1572:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1585:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1596:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1581:3:6"},"nodeType":"YulFunctionCall","src":"1581:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1528:43:6"},"nodeType":"YulFunctionCall","src":"1528:71:6"},"nodeType":"YulExpressionStatement","src":"1528:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1653:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1666:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1677:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1662:3:6"},"nodeType":"YulFunctionCall","src":"1662:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1609:43:6"},"nodeType":"YulFunctionCall","src":"1609:72:6"},"nodeType":"YulExpressionStatement","src":"1609:72:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1446:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1458:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1466:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1477:4:6","type":""}],"src":"1356:332:6"},{"body":{"nodeType":"YulBlock","src":"1737:43:6","statements":[{"nodeType":"YulAssignment","src":"1747:27:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1762:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"1769:4:6","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1758:3:6"},"nodeType":"YulFunctionCall","src":"1758:16:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1747:7:6"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1719:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1729:7:6","type":""}],"src":"1694:86:6"},{"body":{"nodeType":"YulBlock","src":"1827:77:6","statements":[{"body":{"nodeType":"YulBlock","src":"1882:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1891:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1894:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1884:6:6"},"nodeType":"YulFunctionCall","src":"1884:12:6"},"nodeType":"YulExpressionStatement","src":"1884:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1850:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1873:5:6"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1857:15:6"},"nodeType":"YulFunctionCall","src":"1857:22:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1847:2:6"},"nodeType":"YulFunctionCall","src":"1847:33:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1840:6:6"},"nodeType":"YulFunctionCall","src":"1840:41:6"},"nodeType":"YulIf","src":"1837:61:6"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1820:5:6","type":""}],"src":"1786:118:6"},{"body":{"nodeType":"YulBlock","src":"1960:85:6","statements":[{"nodeType":"YulAssignment","src":"1970:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1992:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1979:12:6"},"nodeType":"YulFunctionCall","src":"1979:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1970:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2033:5:6"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"2008:24:6"},"nodeType":"YulFunctionCall","src":"2008:31:6"},"nodeType":"YulExpressionStatement","src":"2008:31:6"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1938:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1946:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1954:5:6","type":""}],"src":"1910:135:6"},{"body":{"nodeType":"YulBlock","src":"2094:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"2151:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2160:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2163:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2153:6:6"},"nodeType":"YulFunctionCall","src":"2153:12:6"},"nodeType":"YulExpressionStatement","src":"2153:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2117:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2142:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2124:17:6"},"nodeType":"YulFunctionCall","src":"2124:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2114:2:6"},"nodeType":"YulFunctionCall","src":"2114:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2107:6:6"},"nodeType":"YulFunctionCall","src":"2107:43:6"},"nodeType":"YulIf","src":"2104:63:6"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2087:5:6","type":""}],"src":"2051:122:6"},{"body":{"nodeType":"YulBlock","src":"2231:87:6","statements":[{"nodeType":"YulAssignment","src":"2241:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2263:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2250:12:6"},"nodeType":"YulFunctionCall","src":"2250:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2241:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2306:5:6"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2279:26:6"},"nodeType":"YulFunctionCall","src":"2279:33:6"},"nodeType":"YulExpressionStatement","src":"2279:33:6"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2209:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2217:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2225:5:6","type":""}],"src":"2179:139:6"},{"body":{"nodeType":"YulBlock","src":"2490:1033:6","statements":[{"body":{"nodeType":"YulBlock","src":"2537:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2539:77:6"},"nodeType":"YulFunctionCall","src":"2539:79:6"},"nodeType":"YulExpressionStatement","src":"2539:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2511:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2520:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2507:3:6"},"nodeType":"YulFunctionCall","src":"2507:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2532:3:6","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2503:3:6"},"nodeType":"YulFunctionCall","src":"2503:33:6"},"nodeType":"YulIf","src":"2500:120:6"},{"nodeType":"YulBlock","src":"2630:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2645:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2659:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2649:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2674:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2709:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2720:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2705:3:6"},"nodeType":"YulFunctionCall","src":"2705:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2729:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2684:20:6"},"nodeType":"YulFunctionCall","src":"2684:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2674:6:6"}]}]},{"nodeType":"YulBlock","src":"2757:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2772:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2786:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2776:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2802:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2837:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2848:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2833:3:6"},"nodeType":"YulFunctionCall","src":"2833:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2857:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2812:20:6"},"nodeType":"YulFunctionCall","src":"2812:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2802:6:6"}]}]},{"nodeType":"YulBlock","src":"2885:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2900:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2914:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2904:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2930:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2965:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2976:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2961:3:6"},"nodeType":"YulFunctionCall","src":"2961:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2985:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2940:20:6"},"nodeType":"YulFunctionCall","src":"2940:53:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2930:6:6"}]}]},{"nodeType":"YulBlock","src":"3013:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3028:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3042:2:6","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3032:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3058:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3093:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3104:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3089:3:6"},"nodeType":"YulFunctionCall","src":"3089:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3113:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3068:20:6"},"nodeType":"YulFunctionCall","src":"3068:53:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3058:6:6"}]}]},{"nodeType":"YulBlock","src":"3141:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3156:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3170:3:6","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3160:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3187:61:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3220:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3231:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3216:3:6"},"nodeType":"YulFunctionCall","src":"3216:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3240:7:6"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"3197:18:6"},"nodeType":"YulFunctionCall","src":"3197:51:6"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3187:6:6"}]}]},{"nodeType":"YulBlock","src":"3268:119:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3283:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3297:3:6","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3287:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3314:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3349:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3360:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3345:3:6"},"nodeType":"YulFunctionCall","src":"3345:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3369:7:6"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3324:20:6"},"nodeType":"YulFunctionCall","src":"3324:53:6"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3314:6:6"}]}]},{"nodeType":"YulBlock","src":"3397:119:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3412:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3426:3:6","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3416:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3443:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3478:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3489:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3474:3:6"},"nodeType":"YulFunctionCall","src":"3474:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3498:7:6"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3453:20:6"},"nodeType":"YulFunctionCall","src":"3453:53:6"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"3443:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2412:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2423:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2435:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2443:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2451:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2459:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2467:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2475:6:6","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2483:6:6","type":""}],"src":"2324:1199:6"},{"body":{"nodeType":"YulBlock","src":"3627:124:6","statements":[{"nodeType":"YulAssignment","src":"3637:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3649:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3660:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3645:3:6"},"nodeType":"YulFunctionCall","src":"3645:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3637:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3717:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3730:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3741:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3726:3:6"},"nodeType":"YulFunctionCall","src":"3726:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3673:43:6"},"nodeType":"YulFunctionCall","src":"3673:71:6"},"nodeType":"YulExpressionStatement","src":"3673:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3599:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3611:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3622:4:6","type":""}],"src":"3529:222:6"},{"body":{"nodeType":"YulBlock","src":"3802:81:6","statements":[{"nodeType":"YulAssignment","src":"3812:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3827:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3834:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3823:3:6"},"nodeType":"YulFunctionCall","src":"3823:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3812:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3784:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3794:7:6","type":""}],"src":"3757:126:6"},{"body":{"nodeType":"YulBlock","src":"3921:28:6","statements":[{"nodeType":"YulAssignment","src":"3931:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"3938:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3931:3:6"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3907:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3917:3:6","type":""}],"src":"3889:60:6"},{"body":{"nodeType":"YulBlock","src":"4015:82:6","statements":[{"nodeType":"YulAssignment","src":"4025:66:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4083:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4065:17:6"},"nodeType":"YulFunctionCall","src":"4065:24:6"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"4056:8:6"},"nodeType":"YulFunctionCall","src":"4056:34:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4038:17:6"},"nodeType":"YulFunctionCall","src":"4038:53:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"4025:9:6"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3995:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4005:9:6","type":""}],"src":"3955:142:6"},{"body":{"nodeType":"YulBlock","src":"4163:66:6","statements":[{"nodeType":"YulAssignment","src":"4173:50:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4217:5:6"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"4186:30:6"},"nodeType":"YulFunctionCall","src":"4186:37:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"4173:9:6"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4143:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4153:9:6","type":""}],"src":"4103:126:6"},{"body":{"nodeType":"YulBlock","src":"4317:66:6","statements":[{"nodeType":"YulAssignment","src":"4327:50:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4371:5:6"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"4340:30:6"},"nodeType":"YulFunctionCall","src":"4340:37:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"4327:9:6"}]}]},"name":"convert_t_contract$_IMyERC20Votes_$1642_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4297:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4307:9:6","type":""}],"src":"4235:148:6"},{"body":{"nodeType":"YulBlock","src":"4476:88:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4493:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4551:5:6"}],"functionName":{"name":"convert_t_contract$_IMyERC20Votes_$1642_to_t_address","nodeType":"YulIdentifier","src":"4498:52:6"},"nodeType":"YulFunctionCall","src":"4498:59:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4486:6:6"},"nodeType":"YulFunctionCall","src":"4486:72:6"},"nodeType":"YulExpressionStatement","src":"4486:72:6"}]},"name":"abi_encode_t_contract$_IMyERC20Votes_$1642_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4464:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4471:3:6","type":""}],"src":"4389:175:6"},{"body":{"nodeType":"YulBlock","src":"4690:146:6","statements":[{"nodeType":"YulAssignment","src":"4700:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4712:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4723:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4708:3:6"},"nodeType":"YulFunctionCall","src":"4708:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4700:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4802:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4815:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4826:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4811:3:6"},"nodeType":"YulFunctionCall","src":"4811:17:6"}],"functionName":{"name":"abi_encode_t_contract$_IMyERC20Votes_$1642_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4736:65:6"},"nodeType":"YulFunctionCall","src":"4736:93:6"},"nodeType":"YulExpressionStatement","src":"4736:93:6"}]},"name":"abi_encode_tuple_t_contract$_IMyERC20Votes_$1642__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4662:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4674:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4685:4:6","type":""}],"src":"4570:266:6"},{"body":{"nodeType":"YulBlock","src":"4887:51:6","statements":[{"nodeType":"YulAssignment","src":"4897:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4926:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4908:17:6"},"nodeType":"YulFunctionCall","src":"4908:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4897:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4869:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4879:7:6","type":""}],"src":"4842:96:6"},{"body":{"nodeType":"YulBlock","src":"4987:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"5044:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5053:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5056:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5046:6:6"},"nodeType":"YulFunctionCall","src":"5046:12:6"},"nodeType":"YulExpressionStatement","src":"5046:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5010:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5035:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5017:17:6"},"nodeType":"YulFunctionCall","src":"5017:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5007:2:6"},"nodeType":"YulFunctionCall","src":"5007:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5000:6:6"},"nodeType":"YulFunctionCall","src":"5000:43:6"},"nodeType":"YulIf","src":"4997:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4980:5:6","type":""}],"src":"4944:122:6"},{"body":{"nodeType":"YulBlock","src":"5124:87:6","statements":[{"nodeType":"YulAssignment","src":"5134:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5156:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5143:12:6"},"nodeType":"YulFunctionCall","src":"5143:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5134:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5199:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5172:26:6"},"nodeType":"YulFunctionCall","src":"5172:33:6"},"nodeType":"YulExpressionStatement","src":"5172:33:6"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5102:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"5110:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5118:5:6","type":""}],"src":"5072:139:6"},{"body":{"nodeType":"YulBlock","src":"5283:263:6","statements":[{"body":{"nodeType":"YulBlock","src":"5329:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5331:77:6"},"nodeType":"YulFunctionCall","src":"5331:79:6"},"nodeType":"YulExpressionStatement","src":"5331:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5304:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5313:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5300:3:6"},"nodeType":"YulFunctionCall","src":"5300:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5325:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5296:3:6"},"nodeType":"YulFunctionCall","src":"5296:32:6"},"nodeType":"YulIf","src":"5293:119:6"},{"nodeType":"YulBlock","src":"5422:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5437:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5451:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5441:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5466:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5501:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5512:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5497:3:6"},"nodeType":"YulFunctionCall","src":"5497:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5521:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5476:20:6"},"nodeType":"YulFunctionCall","src":"5476:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5466:6:6"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5253:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5264:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5276:6:6","type":""}],"src":"5217:329:6"},{"body":{"nodeType":"YulBlock","src":"5635:391:6","statements":[{"body":{"nodeType":"YulBlock","src":"5681:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5683:77:6"},"nodeType":"YulFunctionCall","src":"5683:79:6"},"nodeType":"YulExpressionStatement","src":"5683:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5656:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5665:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5652:3:6"},"nodeType":"YulFunctionCall","src":"5652:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5677:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5648:3:6"},"nodeType":"YulFunctionCall","src":"5648:32:6"},"nodeType":"YulIf","src":"5645:119:6"},{"nodeType":"YulBlock","src":"5774:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5789:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5803:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5793:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5818:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5853:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5864:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5849:3:6"},"nodeType":"YulFunctionCall","src":"5849:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5873:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5828:20:6"},"nodeType":"YulFunctionCall","src":"5828:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5818:6:6"}]}]},{"nodeType":"YulBlock","src":"5901:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5916:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5930:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5920:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5946:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5981:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5992:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5977:3:6"},"nodeType":"YulFunctionCall","src":"5977:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6001:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5956:20:6"},"nodeType":"YulFunctionCall","src":"5956:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5946:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5597:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5608:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5620:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5628:6:6","type":""}],"src":"5552:474:6"},{"body":{"nodeType":"YulBlock","src":"6130:124:6","statements":[{"nodeType":"YulAssignment","src":"6140:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6152:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6163:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6148:3:6"},"nodeType":"YulFunctionCall","src":"6148:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6140:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6220:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6233:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6244:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6229:3:6"},"nodeType":"YulFunctionCall","src":"6229:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"6176:43:6"},"nodeType":"YulFunctionCall","src":"6176:71:6"},"nodeType":"YulExpressionStatement","src":"6176:71:6"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6102:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6114:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6125:4:6","type":""}],"src":"6032:222:6"},{"body":{"nodeType":"YulBlock","src":"6386:206:6","statements":[{"nodeType":"YulAssignment","src":"6396:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6408:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6419:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6404:3:6"},"nodeType":"YulFunctionCall","src":"6404:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6396:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6476:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6489:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6500:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6485:3:6"},"nodeType":"YulFunctionCall","src":"6485:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6432:43:6"},"nodeType":"YulFunctionCall","src":"6432:71:6"},"nodeType":"YulExpressionStatement","src":"6432:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6557:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6570:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6581:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6566:3:6"},"nodeType":"YulFunctionCall","src":"6566:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6513:43:6"},"nodeType":"YulFunctionCall","src":"6513:72:6"},"nodeType":"YulExpressionStatement","src":"6513:72:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6350:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6362:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6370:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6381:4:6","type":""}],"src":"6260:332:6"},{"body":{"nodeType":"YulBlock","src":"6694:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6711:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"6716:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6704:6:6"},"nodeType":"YulFunctionCall","src":"6704:19:6"},"nodeType":"YulExpressionStatement","src":"6704:19:6"},{"nodeType":"YulAssignment","src":"6732:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6751:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6756:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6747:3:6"},"nodeType":"YulFunctionCall","src":"6747:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6732:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6666:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"6671:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6682:11:6","type":""}],"src":"6598:169:6"},{"body":{"nodeType":"YulBlock","src":"6879:61:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6901:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6909:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6897:3:6"},"nodeType":"YulFunctionCall","src":"6897:14:6"},{"hexValue":"5369676e61747572652065787069726564","kind":"string","nodeType":"YulLiteral","src":"6913:19:6","type":"","value":"Signature expired"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6890:6:6"},"nodeType":"YulFunctionCall","src":"6890:43:6"},"nodeType":"YulExpressionStatement","src":"6890:43:6"}]},"name":"store_literal_in_memory_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6871:6:6","type":""}],"src":"6773:167:6"},{"body":{"nodeType":"YulBlock","src":"7092:220:6","statements":[{"nodeType":"YulAssignment","src":"7102:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7168:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7173:2:6","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7109:58:6"},"nodeType":"YulFunctionCall","src":"7109:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7102:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7274:3:6"}],"functionName":{"name":"store_literal_in_memory_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","nodeType":"YulIdentifier","src":"7185:88:6"},"nodeType":"YulFunctionCall","src":"7185:93:6"},"nodeType":"YulExpressionStatement","src":"7185:93:6"},{"nodeType":"YulAssignment","src":"7287:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7298:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7303:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7294:3:6"},"nodeType":"YulFunctionCall","src":"7294:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7287:3:6"}]}]},"name":"abi_encode_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7080:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7088:3:6","type":""}],"src":"6946:366:6"},{"body":{"nodeType":"YulBlock","src":"7489:248:6","statements":[{"nodeType":"YulAssignment","src":"7499:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7511:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7522:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7507:3:6"},"nodeType":"YulFunctionCall","src":"7507:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7499:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7546:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7557:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7542:3:6"},"nodeType":"YulFunctionCall","src":"7542:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7565:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"7571:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7561:3:6"},"nodeType":"YulFunctionCall","src":"7561:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7535:6:6"},"nodeType":"YulFunctionCall","src":"7535:47:6"},"nodeType":"YulExpressionStatement","src":"7535:47:6"},{"nodeType":"YulAssignment","src":"7591:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7725:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7599:124:6"},"nodeType":"YulFunctionCall","src":"7599:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7591:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7469:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7484:4:6","type":""}],"src":"7318:419:6"},{"body":{"nodeType":"YulBlock","src":"7953:454:6","statements":[{"nodeType":"YulAssignment","src":"7963:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7975:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7986:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7971:3:6"},"nodeType":"YulFunctionCall","src":"7971:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7963:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8044:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8057:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8068:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8053:3:6"},"nodeType":"YulFunctionCall","src":"8053:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8000:43:6"},"nodeType":"YulFunctionCall","src":"8000:71:6"},"nodeType":"YulExpressionStatement","src":"8000:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8125:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8138:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8149:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8134:3:6"},"nodeType":"YulFunctionCall","src":"8134:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8081:43:6"},"nodeType":"YulFunctionCall","src":"8081:72:6"},"nodeType":"YulExpressionStatement","src":"8081:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8207:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8220:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8231:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8216:3:6"},"nodeType":"YulFunctionCall","src":"8216:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8163:43:6"},"nodeType":"YulFunctionCall","src":"8163:72:6"},"nodeType":"YulExpressionStatement","src":"8163:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8289:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8302:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8313:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8298:3:6"},"nodeType":"YulFunctionCall","src":"8298:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8245:43:6"},"nodeType":"YulFunctionCall","src":"8245:72:6"},"nodeType":"YulExpressionStatement","src":"8245:72:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8371:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8395:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8380:3:6"},"nodeType":"YulFunctionCall","src":"8380:19:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8327:43:6"},"nodeType":"YulFunctionCall","src":"8327:73:6"},"nodeType":"YulExpressionStatement","src":"8327:73:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7893:9:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7905:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7913:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7921:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7929:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7937:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7948:4:6","type":""}],"src":"7743:664:6"},{"body":{"nodeType":"YulBlock","src":"8519:57:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8541:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8549:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8537:3:6"},"nodeType":"YulFunctionCall","src":"8537:14:6"},{"hexValue":"496e76616c6964206e6f6e6365","kind":"string","nodeType":"YulLiteral","src":"8553:15:6","type":"","value":"Invalid nonce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8530:6:6"},"nodeType":"YulFunctionCall","src":"8530:39:6"},"nodeType":"YulExpressionStatement","src":"8530:39:6"}]},"name":"store_literal_in_memory_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8511:6:6","type":""}],"src":"8413:163:6"},{"body":{"nodeType":"YulBlock","src":"8728:220:6","statements":[{"nodeType":"YulAssignment","src":"8738:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8804:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8809:2:6","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8745:58:6"},"nodeType":"YulFunctionCall","src":"8745:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8738:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8910:3:6"}],"functionName":{"name":"store_literal_in_memory_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","nodeType":"YulIdentifier","src":"8821:88:6"},"nodeType":"YulFunctionCall","src":"8821:93:6"},"nodeType":"YulExpressionStatement","src":"8821:93:6"},{"nodeType":"YulAssignment","src":"8923:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8934:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8939:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8930:3:6"},"nodeType":"YulFunctionCall","src":"8930:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8923:3:6"}]}]},"name":"abi_encode_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8716:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8724:3:6","type":""}],"src":"8582:366:6"},{"body":{"nodeType":"YulBlock","src":"9125:248:6","statements":[{"nodeType":"YulAssignment","src":"9135:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9147:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"9158:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9143:3:6"},"nodeType":"YulFunctionCall","src":"9143:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9135:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9182:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"9193:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9178:3:6"},"nodeType":"YulFunctionCall","src":"9178:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9201:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"9207:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9197:3:6"},"nodeType":"YulFunctionCall","src":"9197:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9171:6:6"},"nodeType":"YulFunctionCall","src":"9171:47:6"},"nodeType":"YulExpressionStatement","src":"9171:47:6"},{"nodeType":"YulAssignment","src":"9227:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9361:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9235:124:6"},"nodeType":"YulFunctionCall","src":"9235:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9227:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9105:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9120:4:6","type":""}],"src":"8954:419:6"},{"body":{"nodeType":"YulBlock","src":"9407:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9424:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9427:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9417:6:6"},"nodeType":"YulFunctionCall","src":"9417:88:6"},"nodeType":"YulExpressionStatement","src":"9417:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9521:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9524:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9514:6:6"},"nodeType":"YulFunctionCall","src":"9514:15:6"},"nodeType":"YulExpressionStatement","src":"9514:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9545:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9548:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9538:6:6"},"nodeType":"YulFunctionCall","src":"9538:15:6"},"nodeType":"YulExpressionStatement","src":"9538:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9379:180:6"},{"body":{"nodeType":"YulBlock","src":"9609:147:6","statements":[{"nodeType":"YulAssignment","src":"9619:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9642:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9624:17:6"},"nodeType":"YulFunctionCall","src":"9624:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9619:1:6"}]},{"nodeType":"YulAssignment","src":"9653:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9676:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9658:17:6"},"nodeType":"YulFunctionCall","src":"9658:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9653:1:6"}]},{"nodeType":"YulAssignment","src":"9687:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9698:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"9701:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9694:3:6"},"nodeType":"YulFunctionCall","src":"9694:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9687:3:6"}]},{"body":{"nodeType":"YulBlock","src":"9727:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9729:16:6"},"nodeType":"YulFunctionCall","src":"9729:18:6"},"nodeType":"YulExpressionStatement","src":"9729:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9719:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"9722:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9716:2:6"},"nodeType":"YulFunctionCall","src":"9716:10:6"},"nodeType":"YulIf","src":"9713:36:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9596:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"9599:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9605:3:6","type":""}],"src":"9565:191:6"},{"body":{"nodeType":"YulBlock","src":"9790:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9807:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9810:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9800:6:6"},"nodeType":"YulFunctionCall","src":"9800:88:6"},"nodeType":"YulExpressionStatement","src":"9800:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9904:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9907:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9897:6:6"},"nodeType":"YulFunctionCall","src":"9897:15:6"},"nodeType":"YulExpressionStatement","src":"9897:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9928:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9931:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9921:6:6"},"nodeType":"YulFunctionCall","src":"9921:15:6"},"nodeType":"YulExpressionStatement","src":"9921:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9762:180:6"},{"body":{"nodeType":"YulBlock","src":"9991:190:6","statements":[{"nodeType":"YulAssignment","src":"10001:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10028:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10010:17:6"},"nodeType":"YulFunctionCall","src":"10010:24:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10001:5:6"}]},{"body":{"nodeType":"YulBlock","src":"10124:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10126:16:6"},"nodeType":"YulFunctionCall","src":"10126:18:6"},"nodeType":"YulExpressionStatement","src":"10126:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10049:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10056:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10046:2:6"},"nodeType":"YulFunctionCall","src":"10046:77:6"},"nodeType":"YulIf","src":"10043:103:6"},{"nodeType":"YulAssignment","src":"10155:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10166:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10173:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10162:3:6"},"nodeType":"YulFunctionCall","src":"10162:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10155:3:6"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9977:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9987:3:6","type":""}],"src":"9948:233:6"},{"body":{"nodeType":"YulBlock","src":"10252:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10269:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10292:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"10274:17:6"},"nodeType":"YulFunctionCall","src":"10274:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10262:6:6"},"nodeType":"YulFunctionCall","src":"10262:37:6"},"nodeType":"YulExpressionStatement","src":"10262:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10240:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10247:3:6","type":""}],"src":"10187:118:6"},{"body":{"nodeType":"YulBlock","src":"10437:206:6","statements":[{"nodeType":"YulAssignment","src":"10447:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10459:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10470:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10455:3:6"},"nodeType":"YulFunctionCall","src":"10455:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10447:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10527:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10540:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10551:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10536:3:6"},"nodeType":"YulFunctionCall","src":"10536:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10483:43:6"},"nodeType":"YulFunctionCall","src":"10483:71:6"},"nodeType":"YulExpressionStatement","src":"10483:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10608:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10621:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"10632:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10617:3:6"},"nodeType":"YulFunctionCall","src":"10617:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10564:43:6"},"nodeType":"YulFunctionCall","src":"10564:72:6"},"nodeType":"YulExpressionStatement","src":"10564:72:6"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10401:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10413:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10421:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10432:4:6","type":""}],"src":"10311:332:6"},{"body":{"nodeType":"YulBlock","src":"10712:80:6","statements":[{"nodeType":"YulAssignment","src":"10722:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10737:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10731:5:6"},"nodeType":"YulFunctionCall","src":"10731:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10722:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10780:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"10753:26:6"},"nodeType":"YulFunctionCall","src":"10753:33:6"},"nodeType":"YulExpressionStatement","src":"10753:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10690:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"10698:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10706:5:6","type":""}],"src":"10649:143:6"},{"body":{"nodeType":"YulBlock","src":"10875:274:6","statements":[{"body":{"nodeType":"YulBlock","src":"10921:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10923:77:6"},"nodeType":"YulFunctionCall","src":"10923:79:6"},"nodeType":"YulExpressionStatement","src":"10923:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10896:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"10905:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10892:3:6"},"nodeType":"YulFunctionCall","src":"10892:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"10917:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10888:3:6"},"nodeType":"YulFunctionCall","src":"10888:32:6"},"nodeType":"YulIf","src":"10885:119:6"},{"nodeType":"YulBlock","src":"11014:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11029:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"11043:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11033:6:6","type":""}]},{"nodeType":"YulAssignment","src":"11058:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11104:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"11115:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11100:3:6"},"nodeType":"YulFunctionCall","src":"11100:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11124:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"11068:31:6"},"nodeType":"YulFunctionCall","src":"11068:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11058:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10845:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10856:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10868:6:6","type":""}],"src":"10798:351:6"},{"body":{"nodeType":"YulBlock","src":"11200:149:6","statements":[{"nodeType":"YulAssignment","src":"11210:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11233:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11215:17:6"},"nodeType":"YulFunctionCall","src":"11215:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11210:1:6"}]},{"nodeType":"YulAssignment","src":"11244:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11267:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11249:17:6"},"nodeType":"YulFunctionCall","src":"11249:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11244:1:6"}]},{"nodeType":"YulAssignment","src":"11278:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11290:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"11293:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11286:3:6"},"nodeType":"YulFunctionCall","src":"11286:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11278:4:6"}]},{"body":{"nodeType":"YulBlock","src":"11320:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11322:16:6"},"nodeType":"YulFunctionCall","src":"11322:18:6"},"nodeType":"YulExpressionStatement","src":"11322:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"11311:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"11317:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11308:2:6"},"nodeType":"YulFunctionCall","src":"11308:11:6"},"nodeType":"YulIf","src":"11305:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11186:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"11189:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11195:4:6","type":""}],"src":"11155:194:6"},{"body":{"nodeType":"YulBlock","src":"11469:34:6","statements":[{"nodeType":"YulAssignment","src":"11479:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"11494:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11479:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11441:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"11446:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"11457:11:6","type":""}],"src":"11355:148:6"},{"body":{"nodeType":"YulBlock","src":"11615:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11637:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"11645:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11633:3:6"},"nodeType":"YulFunctionCall","src":"11633:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"11649:66:6","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11626:6:6"},"nodeType":"YulFunctionCall","src":"11626:90:6"},"nodeType":"YulExpressionStatement","src":"11626:90:6"}]},"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11607:6:6","type":""}],"src":"11509:214:6"},{"body":{"nodeType":"YulBlock","src":"11893:236:6","statements":[{"nodeType":"YulAssignment","src":"11903:91:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11987:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"11992:1:6","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11910:76:6"},"nodeType":"YulFunctionCall","src":"11910:84:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11903:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12092:3:6"}],"functionName":{"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulIdentifier","src":"12003:88:6"},"nodeType":"YulFunctionCall","src":"12003:93:6"},"nodeType":"YulExpressionStatement","src":"12003:93:6"},{"nodeType":"YulAssignment","src":"12105:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12116:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"12121:1:6","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12112:3:6"},"nodeType":"YulFunctionCall","src":"12112:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12105:3:6"}]}]},"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11881:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11889:3:6","type":""}],"src":"11729:400:6"},{"body":{"nodeType":"YulBlock","src":"12182:32:6","statements":[{"nodeType":"YulAssignment","src":"12192:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"12203:5:6"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"12192:7:6"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12164:5:6","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"12174:7:6","type":""}],"src":"12135:79:6"},{"body":{"nodeType":"YulBlock","src":"12303:74:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12320:3:6"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12363:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"12345:17:6"},"nodeType":"YulFunctionCall","src":"12345:24:6"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"12325:19:6"},"nodeType":"YulFunctionCall","src":"12325:45:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12313:6:6"},"nodeType":"YulFunctionCall","src":"12313:58:6"},"nodeType":"YulExpressionStatement","src":"12313:58:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12291:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12298:3:6","type":""}],"src":"12220:157:6"},{"body":{"nodeType":"YulBlock","src":"12628:418:6","statements":[{"nodeType":"YulAssignment","src":"12639:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12790:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"12646:142:6"},"nodeType":"YulFunctionCall","src":"12646:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12639:3:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12866:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"12875:3:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"12804:61:6"},"nodeType":"YulFunctionCall","src":"12804:75:6"},"nodeType":"YulExpressionStatement","src":"12804:75:6"},{"nodeType":"YulAssignment","src":"12888:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12899:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"12904:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12895:3:6"},"nodeType":"YulFunctionCall","src":"12895:12:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12888:3:6"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12979:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"12988:3:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"12917:61:6"},"nodeType":"YulFunctionCall","src":"12917:75:6"},"nodeType":"YulExpressionStatement","src":"12917:75:6"},{"nodeType":"YulAssignment","src":"13001:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13012:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"13017:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13008:3:6"},"nodeType":"YulFunctionCall","src":"13008:12:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13001:3:6"}]},{"nodeType":"YulAssignment","src":"13030:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"13037:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13030:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12599:3:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12605:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12613:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12624:3:6","type":""}],"src":"12383:663:6"},{"body":{"nodeType":"YulBlock","src":"13113:51:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13130:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13151:5:6"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"13135:15:6"},"nodeType":"YulFunctionCall","src":"13135:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13123:6:6"},"nodeType":"YulFunctionCall","src":"13123:35:6"},"nodeType":"YulExpressionStatement","src":"13123:35:6"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13101:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13108:3:6","type":""}],"src":"13052:112:6"},{"body":{"nodeType":"YulBlock","src":"13348:367:6","statements":[{"nodeType":"YulAssignment","src":"13358:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13370:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13381:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13366:3:6"},"nodeType":"YulFunctionCall","src":"13366:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13358:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13439:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13452:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13463:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13448:3:6"},"nodeType":"YulFunctionCall","src":"13448:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"13395:43:6"},"nodeType":"YulFunctionCall","src":"13395:71:6"},"nodeType":"YulExpressionStatement","src":"13395:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13516:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13529:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13540:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13525:3:6"},"nodeType":"YulFunctionCall","src":"13525:18:6"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"13476:39:6"},"nodeType":"YulFunctionCall","src":"13476:68:6"},"nodeType":"YulExpressionStatement","src":"13476:68:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13598:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13611:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13622:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13607:3:6"},"nodeType":"YulFunctionCall","src":"13607:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"13554:43:6"},"nodeType":"YulFunctionCall","src":"13554:72:6"},"nodeType":"YulExpressionStatement","src":"13554:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13680:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13693:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13704:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13689:3:6"},"nodeType":"YulFunctionCall","src":"13689:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"13636:43:6"},"nodeType":"YulFunctionCall","src":"13636:72:6"},"nodeType":"YulExpressionStatement","src":"13636:72:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13296:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13308:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13316:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13324:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13332:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13343:4:6","type":""}],"src":"13170:545:6"},{"body":{"nodeType":"YulBlock","src":"13749:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13766:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13769:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13759:6:6"},"nodeType":"YulFunctionCall","src":"13759:88:6"},"nodeType":"YulExpressionStatement","src":"13759:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13863:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13866:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13856:6:6"},"nodeType":"YulFunctionCall","src":"13856:15:6"},"nodeType":"YulExpressionStatement","src":"13856:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13887:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13890:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13880:6:6"},"nodeType":"YulFunctionCall","src":"13880:15:6"},"nodeType":"YulExpressionStatement","src":"13880:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"13721:180:6"},{"body":{"nodeType":"YulBlock","src":"14013:68:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14035:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"14043:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14031:3:6"},"nodeType":"YulFunctionCall","src":"14031:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"14047:26:6","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14024:6:6"},"nodeType":"YulFunctionCall","src":"14024:50:6"},"nodeType":"YulExpressionStatement","src":"14024:50:6"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14005:6:6","type":""}],"src":"13907:174:6"},{"body":{"nodeType":"YulBlock","src":"14233:220:6","statements":[{"nodeType":"YulAssignment","src":"14243:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14309:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14314:2:6","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14250:58:6"},"nodeType":"YulFunctionCall","src":"14250:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14243:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14415:3:6"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"14326:88:6"},"nodeType":"YulFunctionCall","src":"14326:93:6"},"nodeType":"YulExpressionStatement","src":"14326:93:6"},{"nodeType":"YulAssignment","src":"14428:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14439:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14444:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14435:3:6"},"nodeType":"YulFunctionCall","src":"14435:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14428:3:6"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14221:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14229:3:6","type":""}],"src":"14087:366:6"},{"body":{"nodeType":"YulBlock","src":"14630:248:6","statements":[{"nodeType":"YulAssignment","src":"14640:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14652:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"14663:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14648:3:6"},"nodeType":"YulFunctionCall","src":"14648:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14640:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14687:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"14698:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14683:3:6"},"nodeType":"YulFunctionCall","src":"14683:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14706:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"14712:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14702:3:6"},"nodeType":"YulFunctionCall","src":"14702:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14676:6:6"},"nodeType":"YulFunctionCall","src":"14676:47:6"},"nodeType":"YulExpressionStatement","src":"14676:47:6"},{"nodeType":"YulAssignment","src":"14732:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14866:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14740:124:6"},"nodeType":"YulFunctionCall","src":"14740:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14732:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14610:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14625:4:6","type":""}],"src":"14459:419:6"},{"body":{"nodeType":"YulBlock","src":"14990:75:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15012:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"15020:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15008:3:6"},"nodeType":"YulFunctionCall","src":"15008:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"15024:33:6","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15001:6:6"},"nodeType":"YulFunctionCall","src":"15001:57:6"},"nodeType":"YulExpressionStatement","src":"15001:57:6"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14982:6:6","type":""}],"src":"14884:181:6"},{"body":{"nodeType":"YulBlock","src":"15217:220:6","statements":[{"nodeType":"YulAssignment","src":"15227:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15293:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"15298:2:6","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15234:58:6"},"nodeType":"YulFunctionCall","src":"15234:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15227:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15399:3:6"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"15310:88:6"},"nodeType":"YulFunctionCall","src":"15310:93:6"},"nodeType":"YulExpressionStatement","src":"15310:93:6"},{"nodeType":"YulAssignment","src":"15412:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15423:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"15428:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15419:3:6"},"nodeType":"YulFunctionCall","src":"15419:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15412:3:6"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15205:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15213:3:6","type":""}],"src":"15071:366:6"},{"body":{"nodeType":"YulBlock","src":"15614:248:6","statements":[{"nodeType":"YulAssignment","src":"15624:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15636:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15647:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15632:3:6"},"nodeType":"YulFunctionCall","src":"15632:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15624:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15671:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15682:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15667:3:6"},"nodeType":"YulFunctionCall","src":"15667:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15690:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"15696:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15686:3:6"},"nodeType":"YulFunctionCall","src":"15686:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15660:6:6"},"nodeType":"YulFunctionCall","src":"15660:47:6"},"nodeType":"YulExpressionStatement","src":"15660:47:6"},{"nodeType":"YulAssignment","src":"15716:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15850:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15724:124:6"},"nodeType":"YulFunctionCall","src":"15724:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15716:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15594:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15609:4:6","type":""}],"src":"15443:419:6"},{"body":{"nodeType":"YulBlock","src":"15974:115:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15996:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"16004:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15992:3:6"},"nodeType":"YulFunctionCall","src":"15992:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"16008:34:6","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15985:6:6"},"nodeType":"YulFunctionCall","src":"15985:58:6"},"nodeType":"YulExpressionStatement","src":"15985:58:6"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16064:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"16072:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16060:3:6"},"nodeType":"YulFunctionCall","src":"16060:15:6"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"16077:4:6","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16053:6:6"},"nodeType":"YulFunctionCall","src":"16053:29:6"},"nodeType":"YulExpressionStatement","src":"16053:29:6"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15966:6:6","type":""}],"src":"15868:221:6"},{"body":{"nodeType":"YulBlock","src":"16241:220:6","statements":[{"nodeType":"YulAssignment","src":"16251:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16317:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16322:2:6","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16258:58:6"},"nodeType":"YulFunctionCall","src":"16258:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16251:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16423:3:6"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"16334:88:6"},"nodeType":"YulFunctionCall","src":"16334:93:6"},"nodeType":"YulExpressionStatement","src":"16334:93:6"},{"nodeType":"YulAssignment","src":"16436:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16447:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16452:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16443:3:6"},"nodeType":"YulFunctionCall","src":"16443:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16436:3:6"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16229:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16237:3:6","type":""}],"src":"16095:366:6"},{"body":{"nodeType":"YulBlock","src":"16638:248:6","statements":[{"nodeType":"YulAssignment","src":"16648:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16660:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"16671:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16656:3:6"},"nodeType":"YulFunctionCall","src":"16656:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16648:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16695:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"16706:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16691:3:6"},"nodeType":"YulFunctionCall","src":"16691:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16714:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"16720:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16710:3:6"},"nodeType":"YulFunctionCall","src":"16710:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16684:6:6"},"nodeType":"YulFunctionCall","src":"16684:47:6"},"nodeType":"YulExpressionStatement","src":"16684:47:6"},{"nodeType":"YulAssignment","src":"16740:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16874:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16748:124:6"},"nodeType":"YulFunctionCall","src":"16748:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16740:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16618:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16633:4:6","type":""}],"src":"16467:419:6"},{"body":{"nodeType":"YulBlock","src":"17102:454:6","statements":[{"nodeType":"YulAssignment","src":"17112:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17124:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17135:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17120:3:6"},"nodeType":"YulFunctionCall","src":"17120:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17112:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17193:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17206:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17217:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17202:3:6"},"nodeType":"YulFunctionCall","src":"17202:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17149:43:6"},"nodeType":"YulFunctionCall","src":"17149:71:6"},"nodeType":"YulExpressionStatement","src":"17149:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17274:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17287:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17298:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17283:3:6"},"nodeType":"YulFunctionCall","src":"17283:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17230:43:6"},"nodeType":"YulFunctionCall","src":"17230:72:6"},"nodeType":"YulExpressionStatement","src":"17230:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17356:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17369:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17380:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17365:3:6"},"nodeType":"YulFunctionCall","src":"17365:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17312:43:6"},"nodeType":"YulFunctionCall","src":"17312:72:6"},"nodeType":"YulExpressionStatement","src":"17312:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17438:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17451:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17462:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17447:3:6"},"nodeType":"YulFunctionCall","src":"17447:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"17394:43:6"},"nodeType":"YulFunctionCall","src":"17394:72:6"},"nodeType":"YulExpressionStatement","src":"17394:72:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"17520:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17533:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17544:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17529:3:6"},"nodeType":"YulFunctionCall","src":"17529:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17476:43:6"},"nodeType":"YulFunctionCall","src":"17476:73:6"},"nodeType":"YulExpressionStatement","src":"17476:73:6"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17042:9:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17054:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17062:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17070:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17078:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17086:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17097:4:6","type":""}],"src":"16892:664:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IMyERC20Votes_$1642_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IMyERC20Votes_$1642_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IMyERC20Votes_$1642_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IMyERC20Votes_$1642__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IMyERC20Votes_$1642_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517(memPtr) {\n\n        mstore(add(memPtr, 0), \"Signature expired\")\n\n    }\n\n    function abi_encode_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function store_literal_in_memory_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid nonce\")\n\n    }\n\n    function abi_encode_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"615":[{"length":32,"start":2324}],"617":[{"length":32,"start":2283}],"619":[{"length":32,"start":2197}],"621":[{"length":32,"start":2400}],"623":[{"length":32,"start":2433}],"625":[{"length":32,"start":2367}],"1667":[{"length":32,"start":1145},{"length":32,"start":1791}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe001461014a578063a72003511461017a578063b384abef146101aa578063c07473f6146101c6578063e2ba53f0146101f65761009e565b8063013cf08b146100a357806304f81b35146100d45780632a8cd29e146100f057806355a373d61461010e578063609ff1bd1461012c575b600080fd5b6100bd60048036038101906100b89190610cb1565b610214565b6040516100cb929190610d06565b60405180910390f35b6100ee60048036038101906100e99190610d94565b610248565b005b6100f8610471565b6040516101059190610e36565b60405180910390f35b610116610477565b6040516101239190610ed0565b60405180910390f35b61013461049b565b6040516101419190610e36565b60405180910390f35b610164600480360381019061015f9190610f29565b610523565b6040516101719190610e36565b60405180910390f35b610194600480360381019061018f9190610f29565b610573565b6040516101a19190610e36565b60405180910390f35b6101c460048036038101906101bf9190610f56565b61058b565b005b6101e060048036038101906101db9190610f29565b6106bb565b6040516101ed9190610e36565b60405180910390f35b6101fe6107ac565b60405161020b9190610f96565b60405180910390f35b6001818154811061022457600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b6000610253336106bb565b90508681101561029c5786816040517f29eed8ef000000000000000000000000000000000000000000000000000000008152600401610293929190610fb1565b60405180910390fd5b844211156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690611037565b60405180910390fd5b600061034361033b7f28816ce205799cd8e74a803d550b4f187a36f340db77c90235bdf7187faa05328b8b8b8b604051602001610320959493929190611057565b604051602081830303815290604052805190602001206107e0565b8686866107fa565b905061034e81610825565b871461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906110f6565b60405180910390fd5b87600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103de9190611145565b925050819055508760018a815481106103fa576103f9611179565b5b9060005260206000209060020201600101600082825461041a9190611145565b9250508190555087898273ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050505050505050565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000905060005b60018054905081101561051e5781600182815481106104c7576104c6611179565b5b906000526020600020906002020160010154111561050b57600181815481106104f3576104f2611179565b5b90600052602060002090600202016001015491508092505b8080610516906111a8565b9150506104a5565b505090565b600061056c600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610883565b9050919050565b60026020528060005260406000206000915090505481565b6000610596336106bb565b9050818110156105df5781816040517f29eed8ef0000000000000000000000000000000000000000000000000000000081526004016105d6929190610fb1565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062e9190611145565b92505081905550816001848154811061064a57610649611179565b5b9060005260206000209060020201600101600082825461066a9190611145565b9250508190555081833373ffffffffffffffffffffffffffffffffffffffff167fafd3f234c1f8e944129b26b206d98e5752ad3336a4059938b4a3e990e958853060405160405180910390a4505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b815260040161075a9291906111ff565b602060405180830381865afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b919061123d565b6107a5919061126a565b9050919050565b600060016107b861049b565b815481106107c9576107c8611179565b5b906000526020600020906002020160000154905090565b60006107f36107ed610891565b836109ab565b9050919050565b600080600061080b878787876109de565b9150915061081881610ac0565b8192505050949350505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061087281610883565b915061087d81610c26565b50919050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561090d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561093a577f000000000000000000000000000000000000000000000000000000000000000090506109a8565b6109a57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c3c565b90505b90565b600082826040516020016109c0929190611316565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a19576000600391509150610ab7565b600060018787878760405160008152602001604052604051610a3e949392919061135c565b6020604051602081039080840390855afa158015610a60573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aae57600060019250925050610ab7565b80600092509250505b94509492505050565b60006004811115610ad457610ad36113a1565b5b816004811115610ae757610ae66113a1565b5b0315610c235760016004811115610b0157610b006113a1565b5b816004811115610b1457610b136113a1565b5b03610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b9061141c565b60405180910390fd5b60026004811115610b6857610b676113a1565b5b816004811115610b7b57610b7a6113a1565b5b03610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611488565b60405180910390fd5b60036004811115610bcf57610bce6113a1565b5b816004811115610be257610be16113a1565b5b03610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c199061151a565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b60008383834630604051602001610c5795949392919061153a565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b6000819050919050565b610c8e81610c7b565b8114610c9957600080fd5b50565b600081359050610cab81610c85565b92915050565b600060208284031215610cc757610cc6610c76565b5b6000610cd584828501610c9c565b91505092915050565b6000819050919050565b610cf181610cde565b82525050565b610d0081610c7b565b82525050565b6000604082019050610d1b6000830185610ce8565b610d286020830184610cf7565b9392505050565b600060ff82169050919050565b610d4581610d2f565b8114610d5057600080fd5b50565b600081359050610d6281610d3c565b92915050565b610d7181610cde565b8114610d7c57600080fd5b50565b600081359050610d8e81610d68565b92915050565b600080600080600080600060e0888a031215610db357610db2610c76565b5b6000610dc18a828b01610c9c565b9750506020610dd28a828b01610c9c565b9650506040610de38a828b01610c9c565b9550506060610df48a828b01610c9c565b9450506080610e058a828b01610d53565b93505060a0610e168a828b01610d7f565b92505060c0610e278a828b01610d7f565b91505092959891949750929550565b6000602082019050610e4b6000830184610cf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e96610e91610e8c84610e51565b610e71565b610e51565b9050919050565b6000610ea882610e7b565b9050919050565b6000610eba82610e9d565b9050919050565b610eca81610eaf565b82525050565b6000602082019050610ee56000830184610ec1565b92915050565b6000610ef682610e51565b9050919050565b610f0681610eeb565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610c76565b5b6000610f4d84828501610f14565b91505092915050565b60008060408385031215610f6d57610f6c610c76565b5b6000610f7b85828601610c9c565b9250506020610f8c85828601610c9c565b9150509250929050565b6000602082019050610fab6000830184610ce8565b92915050565b6000604082019050610fc66000830185610cf7565b610fd36020830184610cf7565b9392505050565b600082825260208201905092915050565b7f5369676e61747572652065787069726564000000000000000000000000000000600082015250565b6000611021601183610fda565b915061102c82610feb565b602082019050919050565b6000602082019050818103600083015261105081611014565b9050919050565b600060a08201905061106c6000830188610ce8565b6110796020830187610cf7565b6110866040830186610cf7565b6110936060830185610cf7565b6110a06080830184610cf7565b9695505050505050565b7f496e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b60006110e0600d83610fda565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115082610c7b565b915061115b83610c7b565b925082820190508082111561117357611172611116565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111b382610c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e5576111e4611116565b5b600182019050919050565b6111f981610eeb565b82525050565b600060408201905061121460008301856111f0565b6112216020830184610cf7565b9392505050565b60008151905061123781610c85565b92915050565b60006020828403121561125357611252610c76565b5b600061126184828501611228565b91505092915050565b600061127582610c7b565b915061128083610c7b565b925082820390508181111561129857611297611116565b5b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006112df60028361129e565b91506112ea826112a9565b600282019050919050565b6000819050919050565b61131061130b82610cde565b6112f5565b82525050565b6000611321826112d2565b915061132d82856112ff565b60208201915061133d82846112ff565b6020820191508190509392505050565b61135681610d2f565b82525050565b60006080820190506113716000830187610ce8565b61137e602083018661134d565b61138b6040830185610ce8565b6113986060830184610ce8565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611406601883610fda565b9150611411826113d0565b602082019050919050565b60006020820190508181036000830152611435816113f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611472601f83610fda565b915061147d8261143c565b602082019050919050565b600060208201905081810360008301526114a181611465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611504602283610fda565b915061150f826114a8565b604082019050919050565b60006020820190508181036000830152611533816114f7565b9050919050565b600060a08201905061154f6000830188610ce8565b61155c6020830187610ce8565b6115696040830186610ce8565b6115766060830185610cf7565b61158360808301846111f0565b969550505050505056fea2646970667358221220252f42aaafe07c5a5f5dd4277fab65a3d40db52f84d1609094897a566061e27764736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xA7200351 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xB384ABEF EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xC07473F6 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xE2BA53F0 EQ PUSH2 0x1F6 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x13CF08B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x4F81B35 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A8CD29E EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x55A373D6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x609FF1BD EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP3 SWAP2 SWAP1 PUSH2 0xD06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xD94 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x471 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x116 PUSH2 0x477 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH2 0x49B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x573 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A1 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0xF96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253 CALLER PUSH2 0x6BB JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x29C JUMPI DUP7 DUP2 PUSH1 0x40 MLOAD PUSH32 0x29EED8EF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293 SWAP3 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 TIMESTAMP GT ISZERO PUSH2 0x2DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D6 SWAP1 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x343 PUSH2 0x33B PUSH32 0x28816CE205799CD8E74A803D550B4F187A36F340DB77C90235BDF7187FAA0532 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x320 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E0 JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x7FA JUMP JUMPDEST SWAP1 POP PUSH2 0x34E DUP2 PUSH2 0x825 JUMP JUMPDEST DUP8 EQ PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x386 SWAP1 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x1 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x3FA JUMPI PUSH2 0x3F9 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 DUP10 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFD3F234C1F8E944129B26B206D98E5752AD3336A4059938B4A3E990E9588530 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x51E JUMPI DUP2 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C6 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x50B JUMPI PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4F3 JUMPI PUSH2 0x4F2 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 DUP1 PUSH2 0x516 SWAP1 PUSH2 0x11A8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4A5 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x883 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x596 CALLER PUSH2 0x6BB JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x5DF JUMPI DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x29EED8EF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D6 SWAP3 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62E SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x64A JUMPI PUSH2 0x649 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x66A SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFD3F234C1F8E944129B26B206D98E5752AD3336A4059938B4A3E990E9588530 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3A46B1A8 DUP5 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x777 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79B SWAP2 SWAP1 PUSH2 0x123D JUMP JUMPDEST PUSH2 0x7A5 SWAP2 SWAP1 PUSH2 0x126A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x7B8 PUSH2 0x49B JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x7C9 JUMPI PUSH2 0x7C8 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F3 PUSH2 0x7ED PUSH2 0x891 JUMP JUMPDEST DUP4 PUSH2 0x9AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80B DUP8 DUP8 DUP8 DUP8 PUSH2 0x9DE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x818 DUP2 PUSH2 0xAC0 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x872 DUP2 PUSH2 0x883 JUMP JUMPDEST SWAP2 POP PUSH2 0x87D DUP2 PUSH2 0xC26 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x90D JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x93A JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x9A5 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH2 0xC3C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9C0 SWAP3 SWAP2 SWAP1 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0xAB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xA3E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x135C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA60 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAAE JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xAB7 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAD4 JUMPI PUSH2 0xAD3 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE7 JUMPI PUSH2 0xAE6 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0xC23 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB01 JUMPI PUSH2 0xB00 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB14 JUMPI PUSH2 0xB13 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xB54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB4B SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB68 JUMPI PUSH2 0xB67 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB7B JUMPI PUSH2 0xB7A PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB2 SWAP1 PUSH2 0x1488 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBCF JUMPI PUSH2 0xBCE PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0x13A1 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xC22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC19 SWAP1 PUSH2 0x151A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC57 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC8E DUP2 PUSH2 0xC7B JUMP JUMPDEST DUP2 EQ PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCAB DUP2 PUSH2 0xC85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC7 JUMPI PUSH2 0xCC6 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCD5 DUP5 DUP3 DUP6 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF1 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD00 DUP2 PUSH2 0xC7B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD1B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0xD28 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD45 DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP2 EQ PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD62 DUP2 PUSH2 0xD3C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD71 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP2 EQ PUSH2 0xD7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD8E DUP2 PUSH2 0xD68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH2 0xDB2 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDC1 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0xDD2 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0xDE3 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0xDF4 DUP11 DUP3 DUP12 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0xE05 DUP11 DUP3 DUP12 ADD PUSH2 0xD53 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0xE16 DUP11 DUP3 DUP12 ADD PUSH2 0xD7F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0xE27 DUP11 DUP3 DUP12 ADD PUSH2 0xD7F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE4B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE96 PUSH2 0xE91 PUSH2 0xE8C DUP5 PUSH2 0xE51 JUMP JUMPDEST PUSH2 0xE71 JUMP JUMPDEST PUSH2 0xE51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA8 DUP3 PUSH2 0xE7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBA DUP3 PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xECA DUP2 PUSH2 0xEAF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEE5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF6 DUP3 PUSH2 0xE51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF06 DUP2 PUSH2 0xEEB JUMP JUMPDEST DUP2 EQ PUSH2 0xF11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF23 DUP2 PUSH2 0xEFD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF3F JUMPI PUSH2 0xF3E PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF4D DUP5 DUP3 DUP6 ADD PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF6D JUMPI PUSH2 0xF6C PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF7B DUP6 DUP3 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF8C DUP6 DUP3 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFAB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCE8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFC6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0xFD3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5369676E61747572652065787069726564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1021 PUSH1 0x11 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x102C DUP3 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1050 DUP2 PUSH2 0x1014 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x106C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1079 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1086 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1093 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x10A0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x496E76616C6964206E6F6E636500000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 PUSH1 0xD DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x10EB DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x110F DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1150 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x115B DUP4 PUSH2 0xC7B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1173 JUMPI PUSH2 0x1172 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x11B3 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x11E5 JUMPI PUSH2 0x11E4 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11F9 DUP2 PUSH2 0xEEB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1214 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x11F0 JUMP JUMPDEST PUSH2 0x1221 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1237 DUP2 PUSH2 0xC85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1253 JUMPI PUSH2 0x1252 PUSH2 0xC76 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1261 DUP5 DUP3 DUP6 ADD PUSH2 0x1228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1275 DUP3 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x1280 DUP4 PUSH2 0xC7B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1298 JUMPI PUSH2 0x1297 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DF PUSH1 0x2 DUP4 PUSH2 0x129E JUMP JUMPDEST SWAP2 POP PUSH2 0x12EA DUP3 PUSH2 0x12A9 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1310 PUSH2 0x130B DUP3 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1321 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x132D DUP3 DUP6 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x133D DUP3 DUP5 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1356 DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1371 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x137E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x134D JUMP JUMPDEST PUSH2 0x138B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1398 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xCE8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1406 PUSH1 0x18 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x1411 DUP3 PUSH2 0x13D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1435 DUP2 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1472 PUSH1 0x1F DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x147D DUP3 PUSH2 0x143C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14A1 DUP2 PUSH2 0x1465 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1504 PUSH1 0x22 DUP4 PUSH2 0xFDA JUMP JUMPDEST SWAP2 POP PUSH2 0x150F DUP3 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1533 DUP2 PUSH2 0x14F7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x154F PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x155C PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1569 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCE8 JUMP JUMPDEST PUSH2 0x1576 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCF7 JUMP JUMPDEST PUSH2 0x1583 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11F0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0x2F TIMESTAMP 0xAA 0xAF 0xE0 PUSH29 0x5A5F5DD4277FAB65A3D40DB52F84D1609094897A566061E27764736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"401:3622:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;812:27;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1920:879;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;774:32;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;724:44;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3179:358;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2860:109;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;846:51;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1550:364;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2975:198;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3543:130;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;812:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1920:879::-;2116:20;2139:23;2151:10;2139:11;:23::i;:::-;2116:46;;2191:6;2176:12;:21;2172:88;;;2239:6;2247:12;2218:42;;;;;;;;;;;;:::i;:::-;;;;;;;;2172:88;2298:6;2279:15;:25;;2271:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;2337:14;2354:238;2381:156;534:106;2473:8;2483:6;2491:5;2498:6;2446:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2415:108;;;;;;2381:16;:156::i;:::-;2551:1;2566;2581;2354:13;:238::i;:::-;2337:255;;2619:17;2629:6;2619:9;:17::i;:::-;2610:5;:26;2602:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;2692:6;2664:16;:24;2681:6;2664:24;;;;;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;;;;;2741:6;2708:9;2718:8;2708:19;;;;;;;;:::i;:::-;;;;;;;;;;;;:29;;;:39;;;;;;;:::i;:::-;;;;;;;;2785:6;2775:8;2767:6;2762:30;;;;;;;;;;;;2106:693;;1920:879;;;;;;;:::o;774:32::-;;;;:::o;724:44::-;;;:::o;3179:358::-;3227:24;3263;3290:1;3263:28;;3306:9;3301:230;3325:9;:16;;;;3321:1;:20;3301:230;;;3391:16;3366:9;3376:1;3366:12;;;;;;;;:::i;:::-;;;;;;;;;;;;:22;;;:41;3362:159;;;3446:9;3456:1;3446:12;;;;;;;;:::i;:::-;;;;;;;;;;;;:22;;;3427:41;;3505:1;3486:20;;3362:159;3343:3;;;;;:::i;:::-;;;;3301:230;;;;3253:284;3179:358;:::o;2860:109::-;2912:7;2938:24;:7;:14;2946:5;2938:14;;;;;;;;;;;;;;;:22;:24::i;:::-;2931:31;;2860:109;;;:::o;846:51::-;;;;;;;;;;;;;;;;;:::o;1550:364::-;1617:20;1640:23;1652:10;1640:11;:23::i;:::-;1617:46;;1692:6;1677:12;:21;1673:88;;;1740:6;1748:12;1719:42;;;;;;;;;;;;:::i;:::-;;;;;;;;1673:88;1803:6;1771:16;:28;1788:10;1771:28;;;;;;;;;;;;;;;;:38;;;;;;;:::i;:::-;;;;;;;;1852:6;1819:9;1829:8;1819:19;;;;;;;;:::i;:::-;;;;;;;;;;;;:29;;;:39;;;;;;;:::i;:::-;;;;;;;;1900:6;1890:8;1878:10;1873:34;;;;;;;;;;;;1607:307;1550:364;;:::o;2975:198::-;3034:7;3141:16;:25;3158:7;3141:25;;;;;;;;;;;;;;;;3072:13;:26;;;3099:7;3108:17;;3072:54;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:94;;;;:::i;:::-;3053:113;;2975:198;;;:::o;3543:130::-;3588:19;3633:9;3643:17;:15;:17::i;:::-;3633:28;;;;;;;;:::i;:::-;;;;;;;;;;;;:33;;;3619:47;;3543:130;:::o;4348:165:3:-;4425:7;4451:55;4473:20;:18;:20::i;:::-;4495:10;4451:21;:55::i;:::-;4444:62;;4348:165;;;:::o;6696:270:2:-;6819:7;6839:17;6858:18;6880:25;6891:4;6897:1;6900;6903;6880:10;:25::i;:::-;6838:67;;;;6915:18;6927:5;6915:11;:18::i;:::-;6950:9;6943:16;;;;6696:270;;;;;;:::o;3804:217:5:-;3878:15;3905:30;3938:7;:14;3946:5;3938:14;;;;;;;;;;;;;;;3905:47;;3972:15;:5;:13;:15::i;:::-;3962:25;;3997:17;:5;:15;:17::i;:::-;3895:126;3804:217;;;:::o;827:112:0:-;892:7;918;:14;;;911:21;;827:112;;;:::o;3152:308:3:-;3205:7;3245:12;3228:29;;3236:4;3228:29;;;:66;;;;;3278:16;3261:13;:33;3228:66;3224:230;;;3317:24;3310:31;;;;3224:230;3379:64;3401:10;3413:12;3427:15;3379:21;:64::i;:::-;3372:71;;3152:308;;:::o;8341:194:2:-;8434:7;8499:15;8516:10;8470:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8460:68;;;;;;8453:75;;8341:194;;;;:::o;5069:1494::-;5195:7;5204:12;6119:66;6114:1;6106:10;;:79;6102:161;;;6217:1;6221:30;6201:51;;;;;;6102:161;6357:14;6374:24;6384:4;6390:1;6393;6396;6374:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6357:41;;6430:1;6412:20;;:6;:20;;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;6535:20;6519:37;;;;;5069:1494;;;;;;;;:::o;570:511::-;647:20;638:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;634:441;683:7;634:441;743:29;734:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;730:345;;788:34;;;;;;;;;;:::i;:::-;;;;;;;;730:345;852:35;843:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;839:236;;903:41;;;;;;;;;;:::i;:::-;;;;;;;;839:236;974:30;965:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;961:114;;1020:44;;;;;;;;;;:::i;:::-;;;;;;;;961:114;570:511;;:::o;945:123:0:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;3466:257:3:-;3606:7;3653:8;3663;3673:11;3686:13;3709:4;3642:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3632:84;;;;;;3625:91;;3466:257;;;;;:::o;88:117:6:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:77::-;1062:7;1091:5;1080:16;;1025:77;;;:::o;1108:118::-;1195:24;1213:5;1195:24;:::i;:::-;1190:3;1183:37;1108:118;;:::o;1232:::-;1319:24;1337:5;1319:24;:::i;:::-;1314:3;1307:37;1232:118;;:::o;1356:332::-;1477:4;1515:2;1504:9;1500:18;1492:26;;1528:71;1596:1;1585:9;1581:17;1572:6;1528:71;:::i;:::-;1609:72;1677:2;1666:9;1662:18;1653:6;1609:72;:::i;:::-;1356:332;;;;;:::o;1694:86::-;1729:7;1769:4;1762:5;1758:16;1747:27;;1694:86;;;:::o;1786:118::-;1857:22;1873:5;1857:22;:::i;:::-;1850:5;1847:33;1837:61;;1894:1;1891;1884:12;1837:61;1786:118;:::o;1910:135::-;1954:5;1992:6;1979:20;1970:29;;2008:31;2033:5;2008:31;:::i;:::-;1910:135;;;;:::o;2051:122::-;2124:24;2142:5;2124:24;:::i;:::-;2117:5;2114:35;2104:63;;2163:1;2160;2153:12;2104:63;2051:122;:::o;2179:139::-;2225:5;2263:6;2250:20;2241:29;;2279:33;2306:5;2279:33;:::i;:::-;2179:139;;;;:::o;2324:1199::-;2435:6;2443;2451;2459;2467;2475;2483;2532:3;2520:9;2511:7;2507:23;2503:33;2500:120;;;2539:79;;:::i;:::-;2500:120;2659:1;2684:53;2729:7;2720:6;2709:9;2705:22;2684:53;:::i;:::-;2674:63;;2630:117;2786:2;2812:53;2857:7;2848:6;2837:9;2833:22;2812:53;:::i;:::-;2802:63;;2757:118;2914:2;2940:53;2985:7;2976:6;2965:9;2961:22;2940:53;:::i;:::-;2930:63;;2885:118;3042:2;3068:53;3113:7;3104:6;3093:9;3089:22;3068:53;:::i;:::-;3058:63;;3013:118;3170:3;3197:51;3240:7;3231:6;3220:9;3216:22;3197:51;:::i;:::-;3187:61;;3141:117;3297:3;3324:53;3369:7;3360:6;3349:9;3345:22;3324:53;:::i;:::-;3314:63;;3268:119;3426:3;3453:53;3498:7;3489:6;3478:9;3474:22;3453:53;:::i;:::-;3443:63;;3397:119;2324:1199;;;;;;;;;;:::o;3529:222::-;3622:4;3660:2;3649:9;3645:18;3637:26;;3673:71;3741:1;3730:9;3726:17;3717:6;3673:71;:::i;:::-;3529:222;;;;:::o;3757:126::-;3794:7;3834:42;3827:5;3823:54;3812:65;;3757:126;;;:::o;3889:60::-;3917:3;3938:5;3931:12;;3889:60;;;:::o;3955:142::-;4005:9;4038:53;4056:34;4065:24;4083:5;4065:24;:::i;:::-;4056:34;:::i;:::-;4038:53;:::i;:::-;4025:66;;3955:142;;;:::o;4103:126::-;4153:9;4186:37;4217:5;4186:37;:::i;:::-;4173:50;;4103:126;;;:::o;4235:148::-;4307:9;4340:37;4371:5;4340:37;:::i;:::-;4327:50;;4235:148;;;:::o;4389:175::-;4498:59;4551:5;4498:59;:::i;:::-;4493:3;4486:72;4389:175;;:::o;4570:266::-;4685:4;4723:2;4712:9;4708:18;4700:26;;4736:93;4826:1;4815:9;4811:17;4802:6;4736:93;:::i;:::-;4570:266;;;;:::o;4842:96::-;4879:7;4908:24;4926:5;4908:24;:::i;:::-;4897:35;;4842:96;;;:::o;4944:122::-;5017:24;5035:5;5017:24;:::i;:::-;5010:5;5007:35;4997:63;;5056:1;5053;5046:12;4997:63;4944:122;:::o;5072:139::-;5118:5;5156:6;5143:20;5134:29;;5172:33;5199:5;5172:33;:::i;:::-;5072:139;;;;:::o;5217:329::-;5276:6;5325:2;5313:9;5304:7;5300:23;5296:32;5293:119;;;5331:79;;:::i;:::-;5293:119;5451:1;5476:53;5521:7;5512:6;5501:9;5497:22;5476:53;:::i;:::-;5466:63;;5422:117;5217:329;;;;:::o;5552:474::-;5620:6;5628;5677:2;5665:9;5656:7;5652:23;5648:32;5645:119;;;5683:79;;:::i;:::-;5645:119;5803:1;5828:53;5873:7;5864:6;5853:9;5849:22;5828:53;:::i;:::-;5818:63;;5774:117;5930:2;5956:53;6001:7;5992:6;5981:9;5977:22;5956:53;:::i;:::-;5946:63;;5901:118;5552:474;;;;;:::o;6032:222::-;6125:4;6163:2;6152:9;6148:18;6140:26;;6176:71;6244:1;6233:9;6229:17;6220:6;6176:71;:::i;:::-;6032:222;;;;:::o;6260:332::-;6381:4;6419:2;6408:9;6404:18;6396:26;;6432:71;6500:1;6489:9;6485:17;6476:6;6432:71;:::i;:::-;6513:72;6581:2;6570:9;6566:18;6557:6;6513:72;:::i;:::-;6260:332;;;;;:::o;6598:169::-;6682:11;6716:6;6711:3;6704:19;6756:4;6751:3;6747:14;6732:29;;6598:169;;;;:::o;6773:167::-;6913:19;6909:1;6901:6;6897:14;6890:43;6773:167;:::o;6946:366::-;7088:3;7109:67;7173:2;7168:3;7109:67;:::i;:::-;7102:74;;7185:93;7274:3;7185:93;:::i;:::-;7303:2;7298:3;7294:12;7287:19;;6946:366;;;:::o;7318:419::-;7484:4;7522:2;7511:9;7507:18;7499:26;;7571:9;7565:4;7561:20;7557:1;7546:9;7542:17;7535:47;7599:131;7725:4;7599:131;:::i;:::-;7591:139;;7318:419;;;:::o;7743:664::-;7948:4;7986:3;7975:9;7971:19;7963:27;;8000:71;8068:1;8057:9;8053:17;8044:6;8000:71;:::i;:::-;8081:72;8149:2;8138:9;8134:18;8125:6;8081:72;:::i;:::-;8163;8231:2;8220:9;8216:18;8207:6;8163:72;:::i;:::-;8245;8313:2;8302:9;8298:18;8289:6;8245:72;:::i;:::-;8327:73;8395:3;8384:9;8380:19;8371:6;8327:73;:::i;:::-;7743:664;;;;;;;;:::o;8413:163::-;8553:15;8549:1;8541:6;8537:14;8530:39;8413:163;:::o;8582:366::-;8724:3;8745:67;8809:2;8804:3;8745:67;:::i;:::-;8738:74;;8821:93;8910:3;8821:93;:::i;:::-;8939:2;8934:3;8930:12;8923:19;;8582:366;;;:::o;8954:419::-;9120:4;9158:2;9147:9;9143:18;9135:26;;9207:9;9201:4;9197:20;9193:1;9182:9;9178:17;9171:47;9235:131;9361:4;9235:131;:::i;:::-;9227:139;;8954:419;;;:::o;9379:180::-;9427:77;9424:1;9417:88;9524:4;9521:1;9514:15;9548:4;9545:1;9538:15;9565:191;9605:3;9624:20;9642:1;9624:20;:::i;:::-;9619:25;;9658:20;9676:1;9658:20;:::i;:::-;9653:25;;9701:1;9698;9694:9;9687:16;;9722:3;9719:1;9716:10;9713:36;;;9729:18;;:::i;:::-;9713:36;9565:191;;;;:::o;9762:180::-;9810:77;9807:1;9800:88;9907:4;9904:1;9897:15;9931:4;9928:1;9921:15;9948:233;9987:3;10010:24;10028:5;10010:24;:::i;:::-;10001:33;;10056:66;10049:5;10046:77;10043:103;;10126:18;;:::i;:::-;10043:103;10173:1;10166:5;10162:13;10155:20;;9948:233;;;:::o;10187:118::-;10274:24;10292:5;10274:24;:::i;:::-;10269:3;10262:37;10187:118;;:::o;10311:332::-;10432:4;10470:2;10459:9;10455:18;10447:26;;10483:71;10551:1;10540:9;10536:17;10527:6;10483:71;:::i;:::-;10564:72;10632:2;10621:9;10617:18;10608:6;10564:72;:::i;:::-;10311:332;;;;;:::o;10649:143::-;10706:5;10737:6;10731:13;10722:22;;10753:33;10780:5;10753:33;:::i;:::-;10649:143;;;;:::o;10798:351::-;10868:6;10917:2;10905:9;10896:7;10892:23;10888:32;10885:119;;;10923:79;;:::i;:::-;10885:119;11043:1;11068:64;11124:7;11115:6;11104:9;11100:22;11068:64;:::i;:::-;11058:74;;11014:128;10798:351;;;;:::o;11155:194::-;11195:4;11215:20;11233:1;11215:20;:::i;:::-;11210:25;;11249:20;11267:1;11249:20;:::i;:::-;11244:25;;11293:1;11290;11286:9;11278:17;;11317:1;11311:4;11308:11;11305:37;;;11322:18;;:::i;:::-;11305:37;11155:194;;;;:::o;11355:148::-;11457:11;11494:3;11479:18;;11355:148;;;;:::o;11509:214::-;11649:66;11645:1;11637:6;11633:14;11626:90;11509:214;:::o;11729:400::-;11889:3;11910:84;11992:1;11987:3;11910:84;:::i;:::-;11903:91;;12003:93;12092:3;12003:93;:::i;:::-;12121:1;12116:3;12112:11;12105:18;;11729:400;;;:::o;12135:79::-;12174:7;12203:5;12192:16;;12135:79;;;:::o;12220:157::-;12325:45;12345:24;12363:5;12345:24;:::i;:::-;12325:45;:::i;:::-;12320:3;12313:58;12220:157;;:::o;12383:663::-;12624:3;12646:148;12790:3;12646:148;:::i;:::-;12639:155;;12804:75;12875:3;12866:6;12804:75;:::i;:::-;12904:2;12899:3;12895:12;12888:19;;12917:75;12988:3;12979:6;12917:75;:::i;:::-;13017:2;13012:3;13008:12;13001:19;;13037:3;13030:10;;12383:663;;;;;:::o;13052:112::-;13135:22;13151:5;13135:22;:::i;:::-;13130:3;13123:35;13052:112;;:::o;13170:545::-;13343:4;13381:3;13370:9;13366:19;13358:27;;13395:71;13463:1;13452:9;13448:17;13439:6;13395:71;:::i;:::-;13476:68;13540:2;13529:9;13525:18;13516:6;13476:68;:::i;:::-;13554:72;13622:2;13611:9;13607:18;13598:6;13554:72;:::i;:::-;13636;13704:2;13693:9;13689:18;13680:6;13636:72;:::i;:::-;13170:545;;;;;;;:::o;13721:180::-;13769:77;13766:1;13759:88;13866:4;13863:1;13856:15;13890:4;13887:1;13880:15;13907:174;14047:26;14043:1;14035:6;14031:14;14024:50;13907:174;:::o;14087:366::-;14229:3;14250:67;14314:2;14309:3;14250:67;:::i;:::-;14243:74;;14326:93;14415:3;14326:93;:::i;:::-;14444:2;14439:3;14435:12;14428:19;;14087:366;;;:::o;14459:419::-;14625:4;14663:2;14652:9;14648:18;14640:26;;14712:9;14706:4;14702:20;14698:1;14687:9;14683:17;14676:47;14740:131;14866:4;14740:131;:::i;:::-;14732:139;;14459:419;;;:::o;14884:181::-;15024:33;15020:1;15012:6;15008:14;15001:57;14884:181;:::o;15071:366::-;15213:3;15234:67;15298:2;15293:3;15234:67;:::i;:::-;15227:74;;15310:93;15399:3;15310:93;:::i;:::-;15428:2;15423:3;15419:12;15412:19;;15071:366;;;:::o;15443:419::-;15609:4;15647:2;15636:9;15632:18;15624:26;;15696:9;15690:4;15686:20;15682:1;15671:9;15667:17;15660:47;15724:131;15850:4;15724:131;:::i;:::-;15716:139;;15443:419;;;:::o;15868:221::-;16008:34;16004:1;15996:6;15992:14;15985:58;16077:4;16072:2;16064:6;16060:15;16053:29;15868:221;:::o;16095:366::-;16237:3;16258:67;16322:2;16317:3;16258:67;:::i;:::-;16251:74;;16334:93;16423:3;16334:93;:::i;:::-;16452:2;16447:3;16443:12;16436:19;;16095:366;;;:::o;16467:419::-;16633:4;16671:2;16660:9;16656:18;16648:26;;16720:9;16714:4;16710:20;16706:1;16695:9;16691:17;16684:47;16748:131;16874:4;16748:131;:::i;:::-;16740:139;;16467:419;;;:::o;16892:664::-;17097:4;17135:3;17124:9;17120:19;17112:27;;17149:71;17217:1;17206:9;17202:17;17193:6;17149:71;:::i;:::-;17230:72;17298:2;17287:9;17283:18;17274:6;17230:72;:::i;:::-;17312;17380:2;17369:9;17365:18;17356:6;17312:72;:::i;:::-;17394;17462:2;17451:9;17447:18;17438:6;17394:72;:::i;:::-;17476:73;17544:3;17533:9;17529:19;17520:6;17476:73;:::i;:::-;16892:664;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1114200","executionCost":"infinite","totalCost":"infinite"},"external":{"nonces(address)":"2890","proposals(uint256)":"infinite","targetBlockNumber()":"2474","tokenContract()":"infinite","vote(uint256,uint256)":"infinite","voteBySig(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)":"infinite","votingPower(address)":"infinite","votingPowerSpent(address)":"2836","winnerName()":"infinite","winningProposal()":"infinite"},"internal":{"_useNonce(address)":"26554"}},"methodIdentifiers":{"nonces(address)":"7ecebe00","proposals(uint256)":"013cf08b","targetBlockNumber()":"2a8cd29e","tokenContract()":"55a373d6","vote(uint256,uint256)":"b384abef","voteBySig(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)":"04f81b35","votingPower(address)":"c07473f6","votingPowerSpent(address)":"a7200351","winnerName()":"e2ba53f0","winningProposal()":"609ff1bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inControl\",\"type\":\"uint256\"}],\"name\":\"NotEnoughVotingPower\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IMyERC20Votes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"voteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingPowerSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenizedBallot.sol\":\"TokenizedBallot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenizedBallot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface IMyERC20Votes {\\n    function getPastVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n}\\n\\nerror NotEnoughVotingPower(uint256 required, uint256 inControl);\\n\\ncontract TokenizedBallot is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 private constant _VOTE_TYPEHASH =\\n        keccak256(\\n            \\\"voteBySig(uint256 proposal,uint256 amount,uint256 nonce,uint256 expiry)\\\"\\n        );\\n\\n    struct Proposal {\\n        bytes32 name;\\n        uint256 voteCount;\\n    }\\n    IMyERC20Votes public immutable tokenContract;\\n    uint256 public targetBlockNumber;\\n    Proposal[] public proposals;\\n\\n    mapping(address => uint256) public votingPowerSpent;\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    /* Events */\\n    event Vote(\\n        address indexed voter,\\n        uint256 indexed proposal,\\n        uint256 indexed amount\\n    );\\n\\n    constructor(\\n        bytes32[] memory proposalNames,\\n        address _tokenContractAddress,\\n        uint256 _targetBlockNumber,\\n        string memory name\\n    ) EIP712(name, \\\"1\\\") {\\n        tokenContract = IMyERC20Votes(_tokenContractAddress);\\n        targetBlockNumber = _targetBlockNumber;\\n        for (uint256 i = 0; i < proposalNames.length; i++) {\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    function vote(uint256 proposal, uint256 amount) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n        votingPowerSpent[msg.sender] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(msg.sender, proposal, amount);\\n    }\\n\\n    function voteBySig(\\n        uint256 proposal,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        uint256 _votingPower = votingPower(msg.sender);\\n        if (_votingPower < amount)\\n            revert NotEnoughVotingPower(amount, _votingPower);\\n\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(_VOTE_TYPEHASH, proposal, amount, nonce, expiry)\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"Invalid nonce\\\");\\n        votingPowerSpent[signer] += amount;\\n        proposals[proposal].voteCount += amount;\\n        emit Vote(signer, proposal, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    function votingPower(address account) public view returns (uint256) {\\n        return\\n            tokenContract.getPastVotes(account, targetBlockNumber) -\\n            votingPowerSpent[account];\\n    }\\n\\n    function winningProposal() public view returns (uint256 winningProposal_) {\\n        uint256 winningVoteCount = 0;\\n        for (uint256 p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(\\n        address owner\\n    ) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x5b0d66a028fda9d6f0fc6e4cf6d36ceb5f40c9d6436772792f7fea6650d0ad6b\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1669,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"targetBlockNumber","offset":0,"slot":"0","type":"t_uint256"},{"astId":1673,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"proposals","offset":0,"slot":"1","type":"t_array(t_struct(Proposal)1664_storage)dyn_storage"},{"astId":1677,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"votingPowerSpent","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":1682,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"_nonces","offset":0,"slot":"3","type":"t_mapping(t_address,t_struct(Counter)5_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Proposal)1664_storage)dyn_storage":{"base":"t_struct(Proposal)1664_storage","encoding":"dynamic_array","label":"struct TokenizedBallot.Proposal[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_struct(Counter)5_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Counters.Counter)","numberOfBytes":"32","value":"t_struct(Counter)5_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Counter)5_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":4,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Proposal)1664_storage":{"encoding":"inplace","label":"struct TokenizedBallot.Proposal","members":[{"astId":1661,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1663,"contract":"contracts/TokenizedBallot.sol:TokenizedBallot","label":"voteCount","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}